// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Select snapshot should match snapshot 1`] = `
<Select
  id="test-id"
  label="test"
>
  <div
    className="md-select-wrapper"
    id="test-id"
  >
    <label
      id="test-ID"
      onClick={[Function]}
    >
      test
    </label>
    <HiddenSelect
      label="test"
      state={
        Object {
          "close": [Function],
          "collection": ListCollection {
            "firstKey": "$.0",
            "iterable": Object {
              Symbol(Symbol.iterator): [Function],
            },
            "keyMap": Map {
              "$.0" => Object {
                "aria-label": undefined,
                "childNodes": Object {
                  Symbol(Symbol.iterator): [Function],
                },
                "hasChildNodes": false,
                "index": 0,
                "key": "$.0",
                "level": 0,
                "nextKey": "$.1",
                "parentKey": null,
                "prevKey": undefined,
                "props": Object {
                  "children": "Item 1",
                },
                "rendered": "Item 1",
                "shouldInvalidate": undefined,
                "textValue": "Item 1",
                "type": "item",
                "value": undefined,
                "wrapper": undefined,
              },
              "$.1" => Object {
                "aria-label": undefined,
                "childNodes": Object {
                  Symbol(Symbol.iterator): [Function],
                },
                "hasChildNodes": false,
                "index": 1,
                "key": "$.1",
                "level": 0,
                "nextKey": undefined,
                "parentKey": null,
                "prevKey": "$.0",
                "props": Object {
                  "children": "Item 2",
                },
                "rendered": "Item 2",
                "shouldInvalidate": undefined,
                "textValue": "Item 2",
                "type": "item",
                "value": undefined,
                "wrapper": undefined,
              },
            },
            "lastKey": "$.1",
          },
          "disabledKeys": Set {},
          "focusStrategy": null,
          "isFocused": false,
          "isOpen": false,
          "open": [Function],
          "selectedItem": null,
          "selectedKey": null,
          "selectionManager": SelectionManager {
            "_isSelectAll": null,
            "allowsCellSelection": false,
            "collection": ListCollection {
              "firstKey": "$.0",
              "iterable": Object {
                Symbol(Symbol.iterator): [Function],
              },
              "keyMap": Map {
                "$.0" => Object {
                  "aria-label": undefined,
                  "childNodes": Object {
                    Symbol(Symbol.iterator): [Function],
                  },
                  "hasChildNodes": false,
                  "index": 0,
                  "key": "$.0",
                  "level": 0,
                  "nextKey": "$.1",
                  "parentKey": null,
                  "prevKey": undefined,
                  "props": Object {
                    "children": "Item 1",
                  },
                  "rendered": "Item 1",
                  "shouldInvalidate": undefined,
                  "textValue": "Item 1",
                  "type": "item",
                  "value": undefined,
                  "wrapper": undefined,
                },
                "$.1" => Object {
                  "aria-label": undefined,
                  "childNodes": Object {
                    Symbol(Symbol.iterator): [Function],
                  },
                  "hasChildNodes": false,
                  "index": 1,
                  "key": "$.1",
                  "level": 0,
                  "nextKey": undefined,
                  "parentKey": null,
                  "prevKey": "$.0",
                  "props": Object {
                    "children": "Item 2",
                  },
                  "rendered": "Item 2",
                  "shouldInvalidate": undefined,
                  "textValue": "Item 2",
                  "type": "item",
                  "value": undefined,
                  "wrapper": undefined,
                },
              },
              "lastKey": "$.1",
            },
            "state": Object {
              "childFocusStrategy": null,
              "disabledKeys": Set {},
              "disallowEmptySelection": true,
              "focusedKey": null,
              "isFocused": false,
              "selectedKeys": Set {},
              "selectionMode": "single",
              "setFocused": [Function],
              "setFocusedKey": [Function],
              "setSelectedKeys": [Function],
            },
          },
          "setFocused": [Function],
          "setSelectedKey": [Function],
          "toggle": [Function],
        }
      }
      triggerRef={
        Object {
          "current": <button
            aria-expanded="false"
            aria-haspopup="listbox"
            aria-labelledby="test-ID test-ID"
            class="md-select-dropdown-input"
            id="test-id"
            type="button"
          >
            <span
              class="md-select-selected-item-wrapper"
              id="test-ID"
            />
            <span
              aria-hidden="true"
              class="md-select-icon-wrapper"
            >
              <div
                class="md-icon-wrapper md-icon-auto-scales md-icon-scales md-icon-no-shrink"
              >
                <svg
                  class=""
                  data-autoscale="false"
                  data-scale="16"
                  data-test="arrow-down"
                  fill="currentColor"
                  height="100%"
                  viewBox="0, 0, 32, 32"
                  width="100%"
                />
              </div>
            </span>
          </button>,
        }
      }
    >
      <div
        aria-hidden={true}
        style={
          Object {
            "border": 0,
            "clip": "rect(0 0 0 0)",
            "clipPath": "inset(50%)",
            "height": 1,
            "margin": "0 -1px -1px 0",
            "overflow": "hidden",
            "padding": 0,
            "position": "absolute",
            "whiteSpace": "nowrap",
            "width": 1,
          }
        }
      >
        <input
          onFocus={[Function]}
          style={
            Object {
              "fontSize": 16,
            }
          }
          tabIndex={-1}
          type="text"
        />
        <label>
          test
          <select
            onChange={[Function]}
            size={2}
            tabIndex={-1}
            value=""
          >
            <option />
            <option
              key="$.0"
              value="$.0"
            >
              Item 1
            </option>
            <option
              key="$.1"
              value="$.1"
            >
              Item 2
            </option>
          </select>
        </label>
      </div>
    </HiddenSelect>
    <FocusRing>
      <FocusRing
        focusClass="md-focus-ring-wrapper children"
        focusRingClass="md-focus-ring-wrapper children"
      >
        <button
          aria-controls={null}
          aria-expanded={false}
          aria-haspopup="listbox"
          aria-labelledby="test-ID test-ID"
          className="md-select-dropdown-input"
          id="test-id"
          onBlur={[Function]}
          onClick={[Function]}
          onDragStart={[Function]}
          onFocus={[Function]}
          onKeyDown={[Function]}
          onKeyUp={[Function]}
          onMouseDown={[Function]}
          onMouseEnter={[Function]}
          onMouseLeave={[Function]}
          onMouseUp={[Function]}
          onTouchCancel={[Function]}
          onTouchEnd={[Function]}
          onTouchMove={[Function]}
          onTouchStart={[Function]}
          type="button"
        >
          <span
            className="md-select-selected-item-wrapper"
            id="test-ID"
          />
          <span
            aria-hidden="true"
            className="md-select-icon-wrapper"
          >
            <Icon
              name="arrow-down"
              scale={16}
              weight="bold"
            >
              <div
                className="md-icon-wrapper md-icon-auto-scales md-icon-scales md-icon-no-shrink"
              >
                <svg
                  className=""
                  data-autoscale={false}
                  data-scale={16}
                  data-test="arrow-down"
                  fill="currentColor"
                  height="100%"
                  style={Object {}}
                  viewBox="0, 0, 32, 32"
                  width="100%"
                />
              </div>
            </Icon>
          </span>
        </button>
      </FocusRing>
    </FocusRing>
  </div>
</Select>
`;

exports[`Select snapshot should match snapshot before and after opening select dropdown 1`] = `
<Select
  id="test-id"
  label="test"
>
  <div
    className="md-select-wrapper"
    id="test-id"
  >
    <label
      id="test-ID"
      onClick={[Function]}
    >
      test
    </label>
    <HiddenSelect
      label="test"
      state={
        Object {
          "close": [Function],
          "collection": ListCollection {
            "firstKey": "$.0",
            "iterable": Object {
              Symbol(Symbol.iterator): [Function],
            },
            "keyMap": Map {
              "$.0" => Object {
                "aria-label": undefined,
                "childNodes": Object {
                  Symbol(Symbol.iterator): [Function],
                },
                "hasChildNodes": false,
                "index": 0,
                "key": "$.0",
                "level": 0,
                "nextKey": "$.1",
                "parentKey": null,
                "prevKey": undefined,
                "props": Object {
                  "children": "Item 1",
                },
                "rendered": "Item 1",
                "shouldInvalidate": undefined,
                "textValue": "Item 1",
                "type": "item",
                "value": undefined,
                "wrapper": undefined,
              },
              "$.1" => Object {
                "aria-label": undefined,
                "childNodes": Object {
                  Symbol(Symbol.iterator): [Function],
                },
                "hasChildNodes": false,
                "index": 1,
                "key": "$.1",
                "level": 0,
                "nextKey": undefined,
                "parentKey": null,
                "prevKey": "$.0",
                "props": Object {
                  "children": "Item 2",
                },
                "rendered": "Item 2",
                "shouldInvalidate": undefined,
                "textValue": "Item 2",
                "type": "item",
                "value": undefined,
                "wrapper": undefined,
              },
            },
            "lastKey": "$.1",
          },
          "disabledKeys": Set {},
          "focusStrategy": null,
          "isFocused": false,
          "isOpen": false,
          "open": [Function],
          "selectedItem": null,
          "selectedKey": null,
          "selectionManager": SelectionManager {
            "_isSelectAll": null,
            "allowsCellSelection": false,
            "collection": ListCollection {
              "firstKey": "$.0",
              "iterable": Object {
                Symbol(Symbol.iterator): [Function],
              },
              "keyMap": Map {
                "$.0" => Object {
                  "aria-label": undefined,
                  "childNodes": Object {
                    Symbol(Symbol.iterator): [Function],
                  },
                  "hasChildNodes": false,
                  "index": 0,
                  "key": "$.0",
                  "level": 0,
                  "nextKey": "$.1",
                  "parentKey": null,
                  "prevKey": undefined,
                  "props": Object {
                    "children": "Item 1",
                  },
                  "rendered": "Item 1",
                  "shouldInvalidate": undefined,
                  "textValue": "Item 1",
                  "type": "item",
                  "value": undefined,
                  "wrapper": undefined,
                },
                "$.1" => Object {
                  "aria-label": undefined,
                  "childNodes": Object {
                    Symbol(Symbol.iterator): [Function],
                  },
                  "hasChildNodes": false,
                  "index": 1,
                  "key": "$.1",
                  "level": 0,
                  "nextKey": undefined,
                  "parentKey": null,
                  "prevKey": "$.0",
                  "props": Object {
                    "children": "Item 2",
                  },
                  "rendered": "Item 2",
                  "shouldInvalidate": undefined,
                  "textValue": "Item 2",
                  "type": "item",
                  "value": undefined,
                  "wrapper": undefined,
                },
              },
              "lastKey": "$.1",
            },
            "state": Object {
              "childFocusStrategy": null,
              "disabledKeys": Set {},
              "disallowEmptySelection": true,
              "focusedKey": null,
              "isFocused": false,
              "selectedKeys": Set {},
              "selectionMode": "single",
              "setFocused": [Function],
              "setFocusedKey": [Function],
              "setSelectedKeys": [Function],
            },
          },
          "setFocused": [Function],
          "setSelectedKey": [Function],
          "toggle": [Function],
        }
      }
      triggerRef={
        Object {
          "current": <button
            aria-expanded="false"
            aria-haspopup="listbox"
            aria-labelledby="test-ID test-ID"
            class="md-select-dropdown-input"
            id="test-ID"
            type="button"
          >
            <span
              class="md-select-selected-item-wrapper"
              id="test-ID"
            />
            <span
              aria-hidden="true"
              class="md-select-icon-wrapper"
            >
              <div
                class="md-icon-wrapper md-icon-auto-scales md-icon-scales md-icon-no-shrink"
              >
                <svg
                  class=""
                  data-autoscale="false"
                  data-scale="16"
                  data-test="arrow-down"
                  fill="currentColor"
                  height="100%"
                  viewBox="0, 0, 32, 32"
                  width="100%"
                />
              </div>
            </span>
          </button>,
        }
      }
    >
      <div
        aria-hidden={true}
        style={
          Object {
            "border": 0,
            "clip": "rect(0 0 0 0)",
            "clipPath": "inset(50%)",
            "height": 1,
            "margin": "0 -1px -1px 0",
            "overflow": "hidden",
            "padding": 0,
            "position": "absolute",
            "whiteSpace": "nowrap",
            "width": 1,
          }
        }
      >
        <input
          onFocus={[Function]}
          style={
            Object {
              "fontSize": 16,
            }
          }
          tabIndex={-1}
          type="text"
        />
        <label>
          test
          <select
            onChange={[Function]}
            size={2}
            tabIndex={-1}
            value=""
          >
            <option />
            <option
              key="$.0"
              value="$.0"
            >
              Item 1
            </option>
            <option
              key="$.1"
              value="$.1"
            >
              Item 2
            </option>
          </select>
        </label>
      </div>
    </HiddenSelect>
    <FocusRing>
      <FocusRing
        focusClass="md-focus-ring-wrapper children"
        focusRingClass="md-focus-ring-wrapper children"
      >
        <button
          aria-controls={null}
          aria-expanded={false}
          aria-haspopup="listbox"
          aria-labelledby="test-ID test-ID"
          className="md-select-dropdown-input"
          id="test-ID"
          onBlur={[Function]}
          onClick={[Function]}
          onDragStart={[Function]}
          onFocus={[Function]}
          onKeyDown={[Function]}
          onKeyUp={[Function]}
          onMouseDown={[Function]}
          onMouseEnter={[Function]}
          onMouseLeave={[Function]}
          onMouseUp={[Function]}
          onTouchCancel={[Function]}
          onTouchEnd={[Function]}
          onTouchMove={[Function]}
          onTouchStart={[Function]}
          type="button"
        >
          <span
            className="md-select-selected-item-wrapper"
            id="test-ID"
          />
          <span
            aria-hidden="true"
            className="md-select-icon-wrapper"
          >
            <Icon
              name="arrow-down"
              scale={16}
              weight="bold"
            >
              <div
                className="md-icon-wrapper md-icon-auto-scales md-icon-scales md-icon-no-shrink"
              >
                <svg
                  className=""
                  data-autoscale={false}
                  data-scale={16}
                  data-test="arrow-down"
                  fill="currentColor"
                  height="100%"
                  style={Object {}}
                  viewBox="0, 0, 32, 32"
                  width="100%"
                />
              </div>
            </Icon>
          </span>
        </button>
      </FocusRing>
    </FocusRing>
  </div>
</Select>
`;

exports[`Select snapshot should match snapshot before and after opening select dropdown 2`] = `
<Select
  id="test-id"
  label="test"
>
  <div
    className="md-select-wrapper"
    id="test-id"
  >
    <label
      id="test-ID"
      onClick={[Function]}
    >
      test
    </label>
    <HiddenSelect
      label="test"
      state={
        Object {
          "close": [Function],
          "collection": ListCollection {
            "firstKey": "$.0",
            "iterable": Object {
              Symbol(Symbol.iterator): [Function],
            },
            "keyMap": Map {
              "$.0" => Object {
                "aria-label": undefined,
                "childNodes": Object {
                  Symbol(Symbol.iterator): [Function],
                },
                "hasChildNodes": false,
                "index": 0,
                "key": "$.0",
                "level": 0,
                "nextKey": "$.1",
                "parentKey": null,
                "prevKey": undefined,
                "props": Object {
                  "children": "Item 1",
                },
                "rendered": "Item 1",
                "shouldInvalidate": undefined,
                "textValue": "Item 1",
                "type": "item",
                "value": undefined,
                "wrapper": undefined,
              },
              "$.1" => Object {
                "aria-label": undefined,
                "childNodes": Object {
                  Symbol(Symbol.iterator): [Function],
                },
                "hasChildNodes": false,
                "index": 1,
                "key": "$.1",
                "level": 0,
                "nextKey": undefined,
                "parentKey": null,
                "prevKey": "$.0",
                "props": Object {
                  "children": "Item 2",
                },
                "rendered": "Item 2",
                "shouldInvalidate": undefined,
                "textValue": "Item 2",
                "type": "item",
                "value": undefined,
                "wrapper": undefined,
              },
            },
            "lastKey": "$.1",
          },
          "disabledKeys": Set {},
          "focusStrategy": "first",
          "isFocused": false,
          "isOpen": true,
          "open": [Function],
          "selectedItem": null,
          "selectedKey": null,
          "selectionManager": SelectionManager {
            "_isSelectAll": null,
            "allowsCellSelection": false,
            "collection": ListCollection {
              "firstKey": "$.0",
              "iterable": Object {
                Symbol(Symbol.iterator): [Function],
              },
              "keyMap": Map {
                "$.0" => Object {
                  "aria-label": undefined,
                  "childNodes": Object {
                    Symbol(Symbol.iterator): [Function],
                  },
                  "hasChildNodes": false,
                  "index": 0,
                  "key": "$.0",
                  "level": 0,
                  "nextKey": "$.1",
                  "parentKey": null,
                  "prevKey": undefined,
                  "props": Object {
                    "children": "Item 1",
                  },
                  "rendered": "Item 1",
                  "shouldInvalidate": undefined,
                  "textValue": "Item 1",
                  "type": "item",
                  "value": undefined,
                  "wrapper": undefined,
                },
                "$.1" => Object {
                  "aria-label": undefined,
                  "childNodes": Object {
                    Symbol(Symbol.iterator): [Function],
                  },
                  "hasChildNodes": false,
                  "index": 1,
                  "key": "$.1",
                  "level": 0,
                  "nextKey": undefined,
                  "parentKey": null,
                  "prevKey": "$.0",
                  "props": Object {
                    "children": "Item 2",
                  },
                  "rendered": "Item 2",
                  "shouldInvalidate": undefined,
                  "textValue": "Item 2",
                  "type": "item",
                  "value": undefined,
                  "wrapper": undefined,
                },
              },
              "lastKey": "$.1",
            },
            "state": Object {
              "childFocusStrategy": "first",
              "disabledKeys": Set {},
              "disallowEmptySelection": true,
              "focusedKey": "$.0",
              "isFocused": true,
              "selectedKeys": Set {},
              "selectionMode": "single",
              "setFocused": [Function],
              "setFocusedKey": [Function],
              "setSelectedKeys": [Function],
            },
          },
          "setFocused": [Function],
          "setSelectedKey": [Function],
          "toggle": [Function],
        }
      }
      triggerRef={
        Object {
          "current": <button
            aria-controls="test-ID"
            aria-expanded="true"
            aria-haspopup="listbox"
            aria-labelledby="test-ID test-ID"
            class="md-select-dropdown-input md-select-open"
            id="test-ID"
            type="button"
          >
            <span
              class="md-select-selected-item-wrapper"
              id="test-ID"
            />
            <span
              aria-hidden="true"
              class="md-select-icon-wrapper"
            >
              <div
                class="md-icon-wrapper md-icon-auto-scales md-icon-scales md-icon-no-shrink"
              >
                <svg
                  class=""
                  data-autoscale="false"
                  data-scale="16"
                  data-test="arrow-up"
                  fill="currentColor"
                  height="100%"
                  viewBox="0, 0, 32, 32"
                  width="100%"
                />
              </div>
            </span>
          </button>,
        }
      }
    >
      <div
        aria-hidden={true}
        style={
          Object {
            "border": 0,
            "clip": "rect(0 0 0 0)",
            "clipPath": "inset(50%)",
            "height": 1,
            "margin": "0 -1px -1px 0",
            "overflow": "hidden",
            "padding": 0,
            "position": "absolute",
            "whiteSpace": "nowrap",
            "width": 1,
          }
        }
      >
        <input
          onFocus={[Function]}
          style={
            Object {
              "fontSize": 16,
            }
          }
          tabIndex={-1}
          type="text"
        />
        <label>
          test
          <select
            onChange={[Function]}
            size={2}
            tabIndex={-1}
            value=""
          >
            <option />
            <option
              key="$.0"
              value="$.0"
            >
              Item 1
            </option>
            <option
              key="$.1"
              value="$.1"
            >
              Item 2
            </option>
          </select>
        </label>
      </div>
    </HiddenSelect>
    <FocusRing>
      <FocusRing
        focusClass="md-focus-ring-wrapper children"
        focusRingClass="md-focus-ring-wrapper children"
      >
        <button
          aria-controls="test-ID"
          aria-expanded={true}
          aria-haspopup="listbox"
          aria-labelledby="test-ID test-ID"
          className="md-select-dropdown-input md-select-open"
          id="test-ID"
          onBlur={[Function]}
          onClick={[Function]}
          onDragStart={[Function]}
          onFocus={[Function]}
          onKeyDown={[Function]}
          onKeyUp={[Function]}
          onMouseDown={[Function]}
          onMouseEnter={[Function]}
          onMouseLeave={[Function]}
          onMouseUp={[Function]}
          onTouchCancel={[Function]}
          onTouchEnd={[Function]}
          onTouchMove={[Function]}
          onTouchStart={[Function]}
          type="button"
        >
          <span
            className="md-select-selected-item-wrapper"
            id="test-ID"
          />
          <span
            aria-hidden="true"
            className="md-select-icon-wrapper"
          >
            <Icon
              name="arrow-up"
              scale={16}
              weight="bold"
            >
              <div
                className="md-icon-wrapper md-icon-auto-scales md-icon-scales md-icon-no-shrink"
              >
                <svg
                  className=""
                  data-autoscale={false}
                  data-scale={16}
                  data-test="arrow-up"
                  fill="currentColor"
                  height="100%"
                  style={Object {}}
                  viewBox="0, 0, 32, 32"
                  width="100%"
                />
              </div>
            </Icon>
          </span>
        </button>
      </FocusRing>
    </FocusRing>
    <FocusScope
      restoreFocus={true}
    >
      <span
        data-focus-scope-start={true}
        hidden={true}
      />
      <div
        className="md-select-overlay"
        data-direction="bottom"
        onBlur={[Function]}
        onFocus={[Function]}
        onKeyDown={[Function]}
        style={
          Object {
            "--md-globals-select-dropdown-input-height": "0.0rem",
          }
        }
      >
        <DismissButton
          onDismiss={[Function]}
        >
          <VisuallyHidden>
            <div
              style={
                Object {
                  "border": 0,
                  "clip": "rect(0 0 0 0)",
                  "clipPath": "inset(50%)",
                  "height": 1,
                  "margin": "0 -1px -1px 0",
                  "overflow": "hidden",
                  "padding": 0,
                  "position": "absolute",
                  "whiteSpace": "nowrap",
                  "width": 1,
                }
              }
            >
              <button
                aria-label="Dismiss"
                onClick={[Function]}
                tabIndex={-1}
              />
            </div>
          </VisuallyHidden>
        </DismissButton>
        <ListBoxBase
          aria-labelledby="test-ID"
          autoFocus="first"
          className="md-select-menu-listbox"
          disallowEmptySelection={true}
          id="test-ID"
          onBlur={[Function]}
          shouldFocusOnHover={true}
          shouldSelectOnPressUp={true}
          state={
            Object {
              "close": [Function],
              "collection": ListCollection {
                "firstKey": "$.0",
                "iterable": Object {
                  Symbol(Symbol.iterator): [Function],
                },
                "keyMap": Map {
                  "$.0" => Object {
                    "aria-label": undefined,
                    "childNodes": Object {
                      Symbol(Symbol.iterator): [Function],
                    },
                    "hasChildNodes": false,
                    "index": 0,
                    "key": "$.0",
                    "level": 0,
                    "nextKey": "$.1",
                    "parentKey": null,
                    "prevKey": undefined,
                    "props": Object {
                      "children": "Item 1",
                    },
                    "rendered": "Item 1",
                    "shouldInvalidate": undefined,
                    "textValue": "Item 1",
                    "type": "item",
                    "value": undefined,
                    "wrapper": undefined,
                  },
                  "$.1" => Object {
                    "aria-label": undefined,
                    "childNodes": Object {
                      Symbol(Symbol.iterator): [Function],
                    },
                    "hasChildNodes": false,
                    "index": 1,
                    "key": "$.1",
                    "level": 0,
                    "nextKey": undefined,
                    "parentKey": null,
                    "prevKey": "$.0",
                    "props": Object {
                      "children": "Item 2",
                    },
                    "rendered": "Item 2",
                    "shouldInvalidate": undefined,
                    "textValue": "Item 2",
                    "type": "item",
                    "value": undefined,
                    "wrapper": undefined,
                  },
                },
                "lastKey": "$.1",
              },
              "disabledKeys": Set {},
              "focusStrategy": "first",
              "isFocused": false,
              "isOpen": true,
              "open": [Function],
              "selectedItem": null,
              "selectedKey": null,
              "selectionManager": SelectionManager {
                "_isSelectAll": null,
                "allowsCellSelection": false,
                "collection": ListCollection {
                  "firstKey": "$.0",
                  "iterable": Object {
                    Symbol(Symbol.iterator): [Function],
                  },
                  "keyMap": Map {
                    "$.0" => Object {
                      "aria-label": undefined,
                      "childNodes": Object {
                        Symbol(Symbol.iterator): [Function],
                      },
                      "hasChildNodes": false,
                      "index": 0,
                      "key": "$.0",
                      "level": 0,
                      "nextKey": "$.1",
                      "parentKey": null,
                      "prevKey": undefined,
                      "props": Object {
                        "children": "Item 1",
                      },
                      "rendered": "Item 1",
                      "shouldInvalidate": undefined,
                      "textValue": "Item 1",
                      "type": "item",
                      "value": undefined,
                      "wrapper": undefined,
                    },
                    "$.1" => Object {
                      "aria-label": undefined,
                      "childNodes": Object {
                        Symbol(Symbol.iterator): [Function],
                      },
                      "hasChildNodes": false,
                      "index": 1,
                      "key": "$.1",
                      "level": 0,
                      "nextKey": undefined,
                      "parentKey": null,
                      "prevKey": "$.0",
                      "props": Object {
                        "children": "Item 2",
                      },
                      "rendered": "Item 2",
                      "shouldInvalidate": undefined,
                      "textValue": "Item 2",
                      "type": "item",
                      "value": undefined,
                      "wrapper": undefined,
                    },
                  },
                  "lastKey": "$.1",
                },
                "state": Object {
                  "childFocusStrategy": "first",
                  "disabledKeys": Set {},
                  "disallowEmptySelection": true,
                  "focusedKey": "$.0",
                  "isFocused": true,
                  "selectedKeys": Set {},
                  "selectionMode": "single",
                  "setFocused": [Function],
                  "setFocusedKey": [Function],
                  "setSelectedKeys": [Function],
                },
              },
              "setFocused": [Function],
              "setSelectedKey": [Function],
              "toggle": [Function],
            }
          }
        >
          <MenuListBackground
            aria-labelledby="test-ID"
            className="md-select-menu-listbox"
            color="primary"
            id="test-ID"
            onBlur={[Function]}
            onFocus={[Function]}
            onKeyDown={[Function]}
            onKeyDownCapture={[Function]}
            onMouseDown={[Function]}
            role="listbox"
            tabIndex={-1}
          >
            <FocusRing>
              <FocusRing
                focusClass="md-focus-ring-wrapper children"
                focusRingClass="md-focus-ring-wrapper children"
              >
                <ul
                  aria-labelledby="test-ID"
                  className="md-select-menu-listbox md-menu-list-background-wrapper"
                  data-color="primary"
                  id="test-ID"
                  onBlur={[Function]}
                  onFocus={[Function]}
                  onKeyDown={[Function]}
                  onKeyDownCapture={[Function]}
                  onMouseDown={[Function]}
                  role="listbox"
                  tabIndex={-1}
                >
                  <ListBoxItem
                    item={
                      Object {
                        "aria-label": undefined,
                        "childNodes": Object {
                          Symbol(Symbol.iterator): [Function],
                        },
                        "hasChildNodes": false,
                        "index": 0,
                        "key": "$.0",
                        "level": 0,
                        "nextKey": "$.1",
                        "parentKey": null,
                        "prevKey": undefined,
                        "props": Object {
                          "children": "Item 1",
                        },
                        "rendered": "Item 1",
                        "shouldInvalidate": undefined,
                        "textValue": "Item 1",
                        "type": "item",
                        "value": undefined,
                        "wrapper": undefined,
                      }
                    }
                    key="$.0"
                  >
                    <ListItemBase
                      aria-describedby={null}
                      aria-disabled={false}
                      aria-labelledby={null}
                      aria-selected={false}
                      data-key="$.0"
                      id="test-ID-option-$.0"
                      isDisabled={false}
                      isPadded={true}
                      key="$.0"
                      onClick={[Function]}
                      onDragStart={[Function]}
                      onFocus={[Function]}
                      onKeyDown={[Function]}
                      onKeyUp={[Function]}
                      onMouseDown={[Function]}
                      onMouseEnter={[Function]}
                      onMouseLeave={[Function]}
                      onMouseUp={[Function]}
                      onTouchCancel={[Function]}
                      onTouchEnd={[Function]}
                      onTouchMove={[Function]}
                      onTouchStart={[Function]}
                      role="option"
                      tabIndex={0}
                    >
                      <FocusRing
                        isInset={false}
                      >
                        <FocusRing
                          focusClass="md-focus-ring-wrapper children"
                          focusRingClass="md-focus-ring-wrapper children"
                          isInset={false}
                        >
                          <li
                            aria-describedby={null}
                            aria-disabled={false}
                            aria-labelledby={null}
                            aria-selected={false}
                            className="md-list-item-base-wrapper"
                            data-disabled={false}
                            data-interactive={true}
                            data-key="$.0"
                            data-padded={true}
                            data-shape="rectangle"
                            data-size={40}
                            id="test-ID-option-$.0"
                            onBlur={[Function]}
                            onClick={[Function]}
                            onDragStart={[Function]}
                            onFocus={[Function]}
                            onKeyDown={[Function]}
                            onKeyUp={[Function]}
                            onMouseDown={[Function]}
                            onMouseEnter={[Function]}
                            onMouseLeave={[Function]}
                            onMouseUp={[Function]}
                            onTouchCancel={[Function]}
                            onTouchEnd={[Function]}
                            onTouchMove={[Function]}
                            onTouchStart={[Function]}
                            role="option"
                            tabIndex={0}
                          >
                            <ListItemBaseSection
                              position="fill"
                              title="Item 1"
                            >
                              <div
                                data-position="fill"
                                title="Item 1"
                              >
                                Item 1
                              </div>
                            </ListItemBaseSection>
                          </li>
                        </FocusRing>
                      </FocusRing>
                    </ListItemBase>
                  </ListBoxItem>
                  <ListBoxItem
                    item={
                      Object {
                        "aria-label": undefined,
                        "childNodes": Object {
                          Symbol(Symbol.iterator): [Function],
                        },
                        "hasChildNodes": false,
                        "index": 1,
                        "key": "$.1",
                        "level": 0,
                        "nextKey": undefined,
                        "parentKey": null,
                        "prevKey": "$.0",
                        "props": Object {
                          "children": "Item 2",
                        },
                        "rendered": "Item 2",
                        "shouldInvalidate": undefined,
                        "textValue": "Item 2",
                        "type": "item",
                        "value": undefined,
                        "wrapper": undefined,
                      }
                    }
                    key="$.1"
                  >
                    <ListItemBase
                      aria-describedby={null}
                      aria-disabled={false}
                      aria-labelledby={null}
                      aria-selected={false}
                      data-key="$.1"
                      id="test-ID-option-$.1"
                      isDisabled={false}
                      isPadded={true}
                      key="$.1"
                      onClick={[Function]}
                      onDragStart={[Function]}
                      onFocus={[Function]}
                      onKeyDown={[Function]}
                      onKeyUp={[Function]}
                      onMouseDown={[Function]}
                      onMouseEnter={[Function]}
                      onMouseLeave={[Function]}
                      onMouseUp={[Function]}
                      onTouchCancel={[Function]}
                      onTouchEnd={[Function]}
                      onTouchMove={[Function]}
                      onTouchStart={[Function]}
                      role="option"
                      tabIndex={-1}
                    >
                      <FocusRing
                        isInset={false}
                      >
                        <FocusRing
                          focusClass="md-focus-ring-wrapper children"
                          focusRingClass="md-focus-ring-wrapper children"
                          isInset={false}
                        >
                          <li
                            aria-describedby={null}
                            aria-disabled={false}
                            aria-labelledby={null}
                            aria-selected={false}
                            className="md-list-item-base-wrapper"
                            data-disabled={false}
                            data-interactive={true}
                            data-key="$.1"
                            data-padded={true}
                            data-shape="rectangle"
                            data-size={40}
                            id="test-ID-option-$.1"
                            onBlur={[Function]}
                            onClick={[Function]}
                            onDragStart={[Function]}
                            onFocus={[Function]}
                            onKeyDown={[Function]}
                            onKeyUp={[Function]}
                            onMouseDown={[Function]}
                            onMouseEnter={[Function]}
                            onMouseLeave={[Function]}
                            onMouseUp={[Function]}
                            onTouchCancel={[Function]}
                            onTouchEnd={[Function]}
                            onTouchMove={[Function]}
                            onTouchStart={[Function]}
                            role="option"
                            tabIndex={-1}
                          >
                            <ListItemBaseSection
                              position="fill"
                              title="Item 2"
                            >
                              <div
                                data-position="fill"
                                title="Item 2"
                              >
                                Item 2
                              </div>
                            </ListItemBaseSection>
                          </li>
                        </FocusRing>
                      </FocusRing>
                    </ListItemBase>
                  </ListBoxItem>
                </ul>
              </FocusRing>
            </FocusRing>
          </MenuListBackground>
        </ListBoxBase>
        <DismissButton
          onDismiss={[Function]}
        >
          <VisuallyHidden>
            <div
              style={
                Object {
                  "border": 0,
                  "clip": "rect(0 0 0 0)",
                  "clipPath": "inset(50%)",
                  "height": 1,
                  "margin": "0 -1px -1px 0",
                  "overflow": "hidden",
                  "padding": 0,
                  "position": "absolute",
                  "whiteSpace": "nowrap",
                  "width": 1,
                }
              }
            >
              <button
                aria-label="Dismiss"
                onClick={[Function]}
                tabIndex={-1}
              />
            </div>
          </VisuallyHidden>
        </DismissButton>
      </div>
      <span
        data-focus-scope-end={true}
        hidden={true}
      />
    </FocusScope>
  </div>
</Select>
`;

exports[`Select snapshot should match snapshot with className 1`] = `
<Select
  className="example-class"
  id="test-id"
  label="test"
>
  <div
    className="example-class md-select-wrapper"
    id="test-id"
  >
    <label
      id="test-ID"
      onClick={[Function]}
    >
      test
    </label>
    <HiddenSelect
      label="test"
      state={
        Object {
          "close": [Function],
          "collection": ListCollection {
            "firstKey": "$.0",
            "iterable": Object {
              Symbol(Symbol.iterator): [Function],
            },
            "keyMap": Map {
              "$.0" => Object {
                "aria-label": undefined,
                "childNodes": Object {
                  Symbol(Symbol.iterator): [Function],
                },
                "hasChildNodes": false,
                "index": 0,
                "key": "$.0",
                "level": 0,
                "nextKey": "$.1",
                "parentKey": null,
                "prevKey": undefined,
                "props": Object {
                  "children": "Item 1",
                },
                "rendered": "Item 1",
                "shouldInvalidate": undefined,
                "textValue": "Item 1",
                "type": "item",
                "value": undefined,
                "wrapper": undefined,
              },
              "$.1" => Object {
                "aria-label": undefined,
                "childNodes": Object {
                  Symbol(Symbol.iterator): [Function],
                },
                "hasChildNodes": false,
                "index": 1,
                "key": "$.1",
                "level": 0,
                "nextKey": undefined,
                "parentKey": null,
                "prevKey": "$.0",
                "props": Object {
                  "children": "Item 2",
                },
                "rendered": "Item 2",
                "shouldInvalidate": undefined,
                "textValue": "Item 2",
                "type": "item",
                "value": undefined,
                "wrapper": undefined,
              },
            },
            "lastKey": "$.1",
          },
          "disabledKeys": Set {},
          "focusStrategy": null,
          "isFocused": false,
          "isOpen": false,
          "open": [Function],
          "selectedItem": null,
          "selectedKey": null,
          "selectionManager": SelectionManager {
            "_isSelectAll": null,
            "allowsCellSelection": false,
            "collection": ListCollection {
              "firstKey": "$.0",
              "iterable": Object {
                Symbol(Symbol.iterator): [Function],
              },
              "keyMap": Map {
                "$.0" => Object {
                  "aria-label": undefined,
                  "childNodes": Object {
                    Symbol(Symbol.iterator): [Function],
                  },
                  "hasChildNodes": false,
                  "index": 0,
                  "key": "$.0",
                  "level": 0,
                  "nextKey": "$.1",
                  "parentKey": null,
                  "prevKey": undefined,
                  "props": Object {
                    "children": "Item 1",
                  },
                  "rendered": "Item 1",
                  "shouldInvalidate": undefined,
                  "textValue": "Item 1",
                  "type": "item",
                  "value": undefined,
                  "wrapper": undefined,
                },
                "$.1" => Object {
                  "aria-label": undefined,
                  "childNodes": Object {
                    Symbol(Symbol.iterator): [Function],
                  },
                  "hasChildNodes": false,
                  "index": 1,
                  "key": "$.1",
                  "level": 0,
                  "nextKey": undefined,
                  "parentKey": null,
                  "prevKey": "$.0",
                  "props": Object {
                    "children": "Item 2",
                  },
                  "rendered": "Item 2",
                  "shouldInvalidate": undefined,
                  "textValue": "Item 2",
                  "type": "item",
                  "value": undefined,
                  "wrapper": undefined,
                },
              },
              "lastKey": "$.1",
            },
            "state": Object {
              "childFocusStrategy": null,
              "disabledKeys": Set {},
              "disallowEmptySelection": true,
              "focusedKey": null,
              "isFocused": false,
              "selectedKeys": Set {},
              "selectionMode": "single",
              "setFocused": [Function],
              "setFocusedKey": [Function],
              "setSelectedKeys": [Function],
            },
          },
          "setFocused": [Function],
          "setSelectedKey": [Function],
          "toggle": [Function],
        }
      }
      triggerRef={
        Object {
          "current": <button
            aria-expanded="false"
            aria-haspopup="listbox"
            aria-labelledby="test-ID test-ID"
            class="md-select-dropdown-input"
            id="test-ID"
            type="button"
          >
            <span
              class="md-select-selected-item-wrapper"
              id="test-ID"
            />
            <span
              aria-hidden="true"
              class="md-select-icon-wrapper"
            >
              <div
                class="md-icon-wrapper md-icon-auto-scales md-icon-scales md-icon-no-shrink"
              >
                <svg
                  class=""
                  data-autoscale="false"
                  data-scale="16"
                  data-test="arrow-down"
                  fill="currentColor"
                  height="100%"
                  viewBox="0, 0, 32, 32"
                  width="100%"
                />
              </div>
            </span>
          </button>,
        }
      }
    >
      <div
        aria-hidden={true}
        style={
          Object {
            "border": 0,
            "clip": "rect(0 0 0 0)",
            "clipPath": "inset(50%)",
            "height": 1,
            "margin": "0 -1px -1px 0",
            "overflow": "hidden",
            "padding": 0,
            "position": "absolute",
            "whiteSpace": "nowrap",
            "width": 1,
          }
        }
      >
        <input
          onFocus={[Function]}
          style={
            Object {
              "fontSize": 16,
            }
          }
          tabIndex={-1}
          type="text"
        />
        <label>
          test
          <select
            onChange={[Function]}
            size={2}
            tabIndex={-1}
            value=""
          >
            <option />
            <option
              key="$.0"
              value="$.0"
            >
              Item 1
            </option>
            <option
              key="$.1"
              value="$.1"
            >
              Item 2
            </option>
          </select>
        </label>
      </div>
    </HiddenSelect>
    <FocusRing>
      <FocusRing
        focusClass="md-focus-ring-wrapper children"
        focusRingClass="md-focus-ring-wrapper children"
      >
        <button
          aria-controls={null}
          aria-expanded={false}
          aria-haspopup="listbox"
          aria-labelledby="test-ID test-ID"
          className="md-select-dropdown-input"
          id="test-ID"
          onBlur={[Function]}
          onClick={[Function]}
          onDragStart={[Function]}
          onFocus={[Function]}
          onKeyDown={[Function]}
          onKeyUp={[Function]}
          onMouseDown={[Function]}
          onMouseEnter={[Function]}
          onMouseLeave={[Function]}
          onMouseUp={[Function]}
          onTouchCancel={[Function]}
          onTouchEnd={[Function]}
          onTouchMove={[Function]}
          onTouchStart={[Function]}
          type="button"
        >
          <span
            className="md-select-selected-item-wrapper"
            id="test-ID"
          />
          <span
            aria-hidden="true"
            className="md-select-icon-wrapper"
          >
            <Icon
              name="arrow-down"
              scale={16}
              weight="bold"
            >
              <div
                className="md-icon-wrapper md-icon-auto-scales md-icon-scales md-icon-no-shrink"
              >
                <svg
                  className=""
                  data-autoscale={false}
                  data-scale={16}
                  data-test="arrow-down"
                  fill="currentColor"
                  height="100%"
                  style={Object {}}
                  viewBox="0, 0, 32, 32"
                  width="100%"
                />
              </div>
            </Icon>
          </span>
        </button>
      </FocusRing>
    </FocusRing>
  </div>
</Select>
`;

exports[`Select snapshot should match snapshot with direction 1`] = `
<Select
  direction="top"
  id="test-id"
  label="test"
>
  <div
    className="md-select-wrapper"
    id="test-id"
  >
    <label
      id="test-ID"
      onClick={[Function]}
    >
      test
    </label>
    <HiddenSelect
      label="test"
      state={
        Object {
          "close": [Function],
          "collection": ListCollection {
            "firstKey": "$.0",
            "iterable": Object {
              Symbol(Symbol.iterator): [Function],
            },
            "keyMap": Map {
              "$.0" => Object {
                "aria-label": undefined,
                "childNodes": Object {
                  Symbol(Symbol.iterator): [Function],
                },
                "hasChildNodes": false,
                "index": 0,
                "key": "$.0",
                "level": 0,
                "nextKey": "$.1",
                "parentKey": null,
                "prevKey": undefined,
                "props": Object {
                  "children": "Item 1",
                },
                "rendered": "Item 1",
                "shouldInvalidate": undefined,
                "textValue": "Item 1",
                "type": "item",
                "value": undefined,
                "wrapper": undefined,
              },
              "$.1" => Object {
                "aria-label": undefined,
                "childNodes": Object {
                  Symbol(Symbol.iterator): [Function],
                },
                "hasChildNodes": false,
                "index": 1,
                "key": "$.1",
                "level": 0,
                "nextKey": undefined,
                "parentKey": null,
                "prevKey": "$.0",
                "props": Object {
                  "children": "Item 2",
                },
                "rendered": "Item 2",
                "shouldInvalidate": undefined,
                "textValue": "Item 2",
                "type": "item",
                "value": undefined,
                "wrapper": undefined,
              },
            },
            "lastKey": "$.1",
          },
          "disabledKeys": Set {},
          "focusStrategy": null,
          "isFocused": false,
          "isOpen": false,
          "open": [Function],
          "selectedItem": null,
          "selectedKey": null,
          "selectionManager": SelectionManager {
            "_isSelectAll": null,
            "allowsCellSelection": false,
            "collection": ListCollection {
              "firstKey": "$.0",
              "iterable": Object {
                Symbol(Symbol.iterator): [Function],
              },
              "keyMap": Map {
                "$.0" => Object {
                  "aria-label": undefined,
                  "childNodes": Object {
                    Symbol(Symbol.iterator): [Function],
                  },
                  "hasChildNodes": false,
                  "index": 0,
                  "key": "$.0",
                  "level": 0,
                  "nextKey": "$.1",
                  "parentKey": null,
                  "prevKey": undefined,
                  "props": Object {
                    "children": "Item 1",
                  },
                  "rendered": "Item 1",
                  "shouldInvalidate": undefined,
                  "textValue": "Item 1",
                  "type": "item",
                  "value": undefined,
                  "wrapper": undefined,
                },
                "$.1" => Object {
                  "aria-label": undefined,
                  "childNodes": Object {
                    Symbol(Symbol.iterator): [Function],
                  },
                  "hasChildNodes": false,
                  "index": 1,
                  "key": "$.1",
                  "level": 0,
                  "nextKey": undefined,
                  "parentKey": null,
                  "prevKey": "$.0",
                  "props": Object {
                    "children": "Item 2",
                  },
                  "rendered": "Item 2",
                  "shouldInvalidate": undefined,
                  "textValue": "Item 2",
                  "type": "item",
                  "value": undefined,
                  "wrapper": undefined,
                },
              },
              "lastKey": "$.1",
            },
            "state": Object {
              "childFocusStrategy": null,
              "disabledKeys": Set {},
              "disallowEmptySelection": true,
              "focusedKey": null,
              "isFocused": false,
              "selectedKeys": Set {},
              "selectionMode": "single",
              "setFocused": [Function],
              "setFocusedKey": [Function],
              "setSelectedKeys": [Function],
            },
          },
          "setFocused": [Function],
          "setSelectedKey": [Function],
          "toggle": [Function],
        }
      }
      triggerRef={
        Object {
          "current": <button
            aria-expanded="false"
            aria-haspopup="listbox"
            aria-labelledby="test-ID test-ID"
            class="md-select-dropdown-input"
            id="test-ID"
            type="button"
          >
            <span
              class="md-select-selected-item-wrapper"
              id="test-ID"
            />
            <span
              aria-hidden="true"
              class="md-select-icon-wrapper"
            >
              <div
                class="md-icon-wrapper md-icon-auto-scales md-icon-scales md-icon-no-shrink"
              >
                <svg
                  class=""
                  data-autoscale="false"
                  data-scale="16"
                  data-test="arrow-up"
                  fill="currentColor"
                  height="100%"
                  viewBox="0, 0, 32, 32"
                  width="100%"
                />
              </div>
            </span>
          </button>,
        }
      }
    >
      <div
        aria-hidden={true}
        style={
          Object {
            "border": 0,
            "clip": "rect(0 0 0 0)",
            "clipPath": "inset(50%)",
            "height": 1,
            "margin": "0 -1px -1px 0",
            "overflow": "hidden",
            "padding": 0,
            "position": "absolute",
            "whiteSpace": "nowrap",
            "width": 1,
          }
        }
      >
        <input
          onFocus={[Function]}
          style={
            Object {
              "fontSize": 16,
            }
          }
          tabIndex={-1}
          type="text"
        />
        <label>
          test
          <select
            onChange={[Function]}
            size={2}
            tabIndex={-1}
            value=""
          >
            <option />
            <option
              key="$.0"
              value="$.0"
            >
              Item 1
            </option>
            <option
              key="$.1"
              value="$.1"
            >
              Item 2
            </option>
          </select>
        </label>
      </div>
    </HiddenSelect>
    <FocusRing>
      <FocusRing
        focusClass="md-focus-ring-wrapper children"
        focusRingClass="md-focus-ring-wrapper children"
      >
        <button
          aria-controls={null}
          aria-expanded={false}
          aria-haspopup="listbox"
          aria-labelledby="test-ID test-ID"
          className="md-select-dropdown-input"
          id="test-ID"
          onBlur={[Function]}
          onClick={[Function]}
          onDragStart={[Function]}
          onFocus={[Function]}
          onKeyDown={[Function]}
          onKeyUp={[Function]}
          onMouseDown={[Function]}
          onMouseEnter={[Function]}
          onMouseLeave={[Function]}
          onMouseUp={[Function]}
          onTouchCancel={[Function]}
          onTouchEnd={[Function]}
          onTouchMove={[Function]}
          onTouchStart={[Function]}
          type="button"
        >
          <span
            className="md-select-selected-item-wrapper"
            id="test-ID"
          />
          <span
            aria-hidden="true"
            className="md-select-icon-wrapper"
          >
            <Icon
              name="arrow-up"
              scale={16}
              weight="bold"
            >
              <div
                className="md-icon-wrapper md-icon-auto-scales md-icon-scales md-icon-no-shrink"
              >
                <svg
                  className=""
                  data-autoscale={false}
                  data-scale={16}
                  data-test="arrow-up"
                  fill="currentColor"
                  height="100%"
                  style={Object {}}
                  viewBox="0, 0, 32, 32"
                  width="100%"
                />
              </div>
            </Icon>
          </span>
        </button>
      </FocusRing>
    </FocusRing>
  </div>
</Select>
`;

exports[`Select snapshot should match snapshot with disabled option 1`] = `
<Select
  disabledKeys={
    Array [
      "$.0",
    ]
  }
  id="test-id"
  isOpen={true}
  label="test"
>
  <div
    className="md-select-wrapper"
    id="test-id"
  >
    <label
      id="test-ID"
      onClick={[Function]}
    >
      test
    </label>
    <HiddenSelect
      label="test"
      state={
        Object {
          "close": [Function],
          "collection": ListCollection {
            "firstKey": "$.0",
            "iterable": Object {
              Symbol(Symbol.iterator): [Function],
            },
            "keyMap": Map {
              "$.0" => Object {
                "aria-label": undefined,
                "childNodes": Object {
                  Symbol(Symbol.iterator): [Function],
                },
                "hasChildNodes": false,
                "index": 0,
                "key": "$.0",
                "level": 0,
                "nextKey": "$.1",
                "parentKey": null,
                "prevKey": undefined,
                "props": Object {
                  "children": "Item 1",
                },
                "rendered": "Item 1",
                "shouldInvalidate": undefined,
                "textValue": "Item 1",
                "type": "item",
                "value": undefined,
                "wrapper": undefined,
              },
              "$.1" => Object {
                "aria-label": undefined,
                "childNodes": Object {
                  Symbol(Symbol.iterator): [Function],
                },
                "hasChildNodes": false,
                "index": 1,
                "key": "$.1",
                "level": 0,
                "nextKey": undefined,
                "parentKey": null,
                "prevKey": "$.0",
                "props": Object {
                  "children": "Item 2",
                },
                "rendered": "Item 2",
                "shouldInvalidate": undefined,
                "textValue": "Item 2",
                "type": "item",
                "value": undefined,
                "wrapper": undefined,
              },
            },
            "lastKey": "$.1",
          },
          "disabledKeys": Set {
            "$.0",
          },
          "focusStrategy": null,
          "isFocused": false,
          "isOpen": true,
          "open": [Function],
          "selectedItem": null,
          "selectedKey": null,
          "selectionManager": SelectionManager {
            "_isSelectAll": null,
            "allowsCellSelection": false,
            "collection": ListCollection {
              "firstKey": "$.0",
              "iterable": Object {
                Symbol(Symbol.iterator): [Function],
              },
              "keyMap": Map {
                "$.0" => Object {
                  "aria-label": undefined,
                  "childNodes": Object {
                    Symbol(Symbol.iterator): [Function],
                  },
                  "hasChildNodes": false,
                  "index": 0,
                  "key": "$.0",
                  "level": 0,
                  "nextKey": "$.1",
                  "parentKey": null,
                  "prevKey": undefined,
                  "props": Object {
                    "children": "Item 1",
                  },
                  "rendered": "Item 1",
                  "shouldInvalidate": undefined,
                  "textValue": "Item 1",
                  "type": "item",
                  "value": undefined,
                  "wrapper": undefined,
                },
                "$.1" => Object {
                  "aria-label": undefined,
                  "childNodes": Object {
                    Symbol(Symbol.iterator): [Function],
                  },
                  "hasChildNodes": false,
                  "index": 1,
                  "key": "$.1",
                  "level": 0,
                  "nextKey": undefined,
                  "parentKey": null,
                  "prevKey": "$.0",
                  "props": Object {
                    "children": "Item 2",
                  },
                  "rendered": "Item 2",
                  "shouldInvalidate": undefined,
                  "textValue": "Item 2",
                  "type": "item",
                  "value": undefined,
                  "wrapper": undefined,
                },
              },
              "lastKey": "$.1",
            },
            "state": Object {
              "childFocusStrategy": "first",
              "disabledKeys": Set {
                "$.0",
              },
              "disallowEmptySelection": true,
              "focusedKey": null,
              "isFocused": true,
              "selectedKeys": Set {},
              "selectionMode": "single",
              "setFocused": [Function],
              "setFocusedKey": [Function],
              "setSelectedKeys": [Function],
            },
          },
          "setFocused": [Function],
          "setSelectedKey": [Function],
          "toggle": [Function],
        }
      }
      triggerRef={
        Object {
          "current": <button
            aria-controls="test-ID"
            aria-expanded="true"
            aria-haspopup="listbox"
            aria-labelledby="test-ID test-ID"
            class="md-select-dropdown-input md-select-open"
            id="test-ID"
            type="button"
          >
            <span
              class="md-select-selected-item-wrapper"
              id="test-ID"
            />
            <span
              aria-hidden="true"
              class="md-select-icon-wrapper"
            >
              <div
                class="md-icon-wrapper md-icon-auto-scales md-icon-scales md-icon-no-shrink"
              >
                <svg
                  class=""
                  data-autoscale="false"
                  data-scale="16"
                  data-test="arrow-up"
                  fill="currentColor"
                  height="100%"
                  viewBox="0, 0, 32, 32"
                  width="100%"
                />
              </div>
            </span>
          </button>,
        }
      }
    >
      <div
        aria-hidden={true}
        style={
          Object {
            "border": 0,
            "clip": "rect(0 0 0 0)",
            "clipPath": "inset(50%)",
            "height": 1,
            "margin": "0 -1px -1px 0",
            "overflow": "hidden",
            "padding": 0,
            "position": "absolute",
            "whiteSpace": "nowrap",
            "width": 1,
          }
        }
      >
        <input
          onFocus={[Function]}
          style={
            Object {
              "fontSize": 16,
            }
          }
          tabIndex={-1}
          type="text"
        />
        <label>
          test
          <select
            onChange={[Function]}
            size={2}
            tabIndex={-1}
            value=""
          >
            <option />
            <option
              key="$.0"
              value="$.0"
            >
              Item 1
            </option>
            <option
              key="$.1"
              value="$.1"
            >
              Item 2
            </option>
          </select>
        </label>
      </div>
    </HiddenSelect>
    <FocusRing>
      <FocusRing
        focusClass="md-focus-ring-wrapper children"
        focusRingClass="md-focus-ring-wrapper children"
      >
        <button
          aria-controls="test-ID"
          aria-expanded={true}
          aria-haspopup="listbox"
          aria-labelledby="test-ID test-ID"
          className="md-select-dropdown-input md-select-open"
          id="test-ID"
          onBlur={[Function]}
          onClick={[Function]}
          onDragStart={[Function]}
          onFocus={[Function]}
          onKeyDown={[Function]}
          onKeyUp={[Function]}
          onMouseDown={[Function]}
          onMouseEnter={[Function]}
          onMouseLeave={[Function]}
          onMouseUp={[Function]}
          onTouchCancel={[Function]}
          onTouchEnd={[Function]}
          onTouchMove={[Function]}
          onTouchStart={[Function]}
          type="button"
        >
          <span
            className="md-select-selected-item-wrapper"
            id="test-ID"
          />
          <span
            aria-hidden="true"
            className="md-select-icon-wrapper"
          >
            <Icon
              name="arrow-up"
              scale={16}
              weight="bold"
            >
              <div
                className="md-icon-wrapper md-icon-auto-scales md-icon-scales md-icon-no-shrink"
              >
                <svg
                  className=""
                  data-autoscale={false}
                  data-scale={16}
                  data-test="arrow-up"
                  fill="currentColor"
                  height="100%"
                  style={Object {}}
                  viewBox="0, 0, 32, 32"
                  width="100%"
                />
              </div>
            </Icon>
          </span>
        </button>
      </FocusRing>
    </FocusRing>
    <FocusScope
      restoreFocus={true}
    >
      <span
        data-focus-scope-start={true}
        hidden={true}
      />
      <div
        className="md-select-overlay"
        data-direction="bottom"
        onBlur={[Function]}
        onFocus={[Function]}
        onKeyDown={[Function]}
        style={
          Object {
            "--md-globals-select-dropdown-input-height": "0.0rem",
          }
        }
      >
        <DismissButton
          onDismiss={[Function]}
        >
          <VisuallyHidden>
            <div
              style={
                Object {
                  "border": 0,
                  "clip": "rect(0 0 0 0)",
                  "clipPath": "inset(50%)",
                  "height": 1,
                  "margin": "0 -1px -1px 0",
                  "overflow": "hidden",
                  "padding": 0,
                  "position": "absolute",
                  "whiteSpace": "nowrap",
                  "width": 1,
                }
              }
            >
              <button
                aria-label="Dismiss"
                onClick={[Function]}
                tabIndex={-1}
              />
            </div>
          </VisuallyHidden>
        </DismissButton>
        <ListBoxBase
          aria-labelledby="test-ID"
          autoFocus={true}
          className="md-select-menu-listbox"
          disallowEmptySelection={true}
          id="test-ID"
          onBlur={[Function]}
          shouldFocusOnHover={true}
          shouldSelectOnPressUp={true}
          state={
            Object {
              "close": [Function],
              "collection": ListCollection {
                "firstKey": "$.0",
                "iterable": Object {
                  Symbol(Symbol.iterator): [Function],
                },
                "keyMap": Map {
                  "$.0" => Object {
                    "aria-label": undefined,
                    "childNodes": Object {
                      Symbol(Symbol.iterator): [Function],
                    },
                    "hasChildNodes": false,
                    "index": 0,
                    "key": "$.0",
                    "level": 0,
                    "nextKey": "$.1",
                    "parentKey": null,
                    "prevKey": undefined,
                    "props": Object {
                      "children": "Item 1",
                    },
                    "rendered": "Item 1",
                    "shouldInvalidate": undefined,
                    "textValue": "Item 1",
                    "type": "item",
                    "value": undefined,
                    "wrapper": undefined,
                  },
                  "$.1" => Object {
                    "aria-label": undefined,
                    "childNodes": Object {
                      Symbol(Symbol.iterator): [Function],
                    },
                    "hasChildNodes": false,
                    "index": 1,
                    "key": "$.1",
                    "level": 0,
                    "nextKey": undefined,
                    "parentKey": null,
                    "prevKey": "$.0",
                    "props": Object {
                      "children": "Item 2",
                    },
                    "rendered": "Item 2",
                    "shouldInvalidate": undefined,
                    "textValue": "Item 2",
                    "type": "item",
                    "value": undefined,
                    "wrapper": undefined,
                  },
                },
                "lastKey": "$.1",
              },
              "disabledKeys": Set {
                "$.0",
              },
              "focusStrategy": null,
              "isFocused": false,
              "isOpen": true,
              "open": [Function],
              "selectedItem": null,
              "selectedKey": null,
              "selectionManager": SelectionManager {
                "_isSelectAll": null,
                "allowsCellSelection": false,
                "collection": ListCollection {
                  "firstKey": "$.0",
                  "iterable": Object {
                    Symbol(Symbol.iterator): [Function],
                  },
                  "keyMap": Map {
                    "$.0" => Object {
                      "aria-label": undefined,
                      "childNodes": Object {
                        Symbol(Symbol.iterator): [Function],
                      },
                      "hasChildNodes": false,
                      "index": 0,
                      "key": "$.0",
                      "level": 0,
                      "nextKey": "$.1",
                      "parentKey": null,
                      "prevKey": undefined,
                      "props": Object {
                        "children": "Item 1",
                      },
                      "rendered": "Item 1",
                      "shouldInvalidate": undefined,
                      "textValue": "Item 1",
                      "type": "item",
                      "value": undefined,
                      "wrapper": undefined,
                    },
                    "$.1" => Object {
                      "aria-label": undefined,
                      "childNodes": Object {
                        Symbol(Symbol.iterator): [Function],
                      },
                      "hasChildNodes": false,
                      "index": 1,
                      "key": "$.1",
                      "level": 0,
                      "nextKey": undefined,
                      "parentKey": null,
                      "prevKey": "$.0",
                      "props": Object {
                        "children": "Item 2",
                      },
                      "rendered": "Item 2",
                      "shouldInvalidate": undefined,
                      "textValue": "Item 2",
                      "type": "item",
                      "value": undefined,
                      "wrapper": undefined,
                    },
                  },
                  "lastKey": "$.1",
                },
                "state": Object {
                  "childFocusStrategy": "first",
                  "disabledKeys": Set {
                    "$.0",
                  },
                  "disallowEmptySelection": true,
                  "focusedKey": null,
                  "isFocused": true,
                  "selectedKeys": Set {},
                  "selectionMode": "single",
                  "setFocused": [Function],
                  "setFocusedKey": [Function],
                  "setSelectedKeys": [Function],
                },
              },
              "setFocused": [Function],
              "setSelectedKey": [Function],
              "toggle": [Function],
            }
          }
        >
          <MenuListBackground
            aria-labelledby="test-ID"
            className="md-select-menu-listbox"
            color="primary"
            id="test-ID"
            onBlur={[Function]}
            onFocus={[Function]}
            onKeyDown={[Function]}
            onKeyDownCapture={[Function]}
            onMouseDown={[Function]}
            role="listbox"
            tabIndex={0}
          >
            <FocusRing>
              <FocusRing
                focusClass="md-focus-ring-wrapper children"
                focusRingClass="md-focus-ring-wrapper children"
              >
                <ul
                  aria-labelledby="test-ID"
                  className="md-select-menu-listbox md-menu-list-background-wrapper"
                  data-color="primary"
                  id="test-ID"
                  onBlur={[Function]}
                  onFocus={[Function]}
                  onKeyDown={[Function]}
                  onKeyDownCapture={[Function]}
                  onMouseDown={[Function]}
                  role="listbox"
                  tabIndex={0}
                >
                  <ListBoxItem
                    item={
                      Object {
                        "aria-label": undefined,
                        "childNodes": Object {
                          Symbol(Symbol.iterator): [Function],
                        },
                        "hasChildNodes": false,
                        "index": 0,
                        "key": "$.0",
                        "level": 0,
                        "nextKey": "$.1",
                        "parentKey": null,
                        "prevKey": undefined,
                        "props": Object {
                          "children": "Item 1",
                        },
                        "rendered": "Item 1",
                        "shouldInvalidate": undefined,
                        "textValue": "Item 1",
                        "type": "item",
                        "value": undefined,
                        "wrapper": undefined,
                      }
                    }
                    key="$.0"
                  >
                    <ListItemBase
                      aria-describedby={null}
                      aria-disabled={true}
                      aria-labelledby={null}
                      aria-selected={false}
                      data-key="$.0"
                      id="test-ID-option-$.0"
                      isDisabled={true}
                      isPadded={true}
                      key="$.0"
                      onClick={[Function]}
                      onDragStart={[Function]}
                      onFocus={[Function]}
                      onKeyDown={[Function]}
                      onKeyUp={[Function]}
                      onMouseDown={[Function]}
                      onMouseEnter={[Function]}
                      onMouseLeave={[Function]}
                      onMouseUp={[Function]}
                      onTouchCancel={[Function]}
                      onTouchEnd={[Function]}
                      onTouchMove={[Function]}
                      onTouchStart={[Function]}
                      role="option"
                      tabIndex={-1}
                    >
                      <FocusRing
                        isInset={false}
                      >
                        <FocusRing
                          focusClass="md-focus-ring-wrapper children"
                          focusRingClass="md-focus-ring-wrapper children"
                          isInset={false}
                        >
                          <li
                            aria-describedby={null}
                            aria-disabled={true}
                            aria-labelledby={null}
                            aria-selected={false}
                            className="md-list-item-base-wrapper"
                            data-disabled={true}
                            data-interactive={true}
                            data-key="$.0"
                            data-padded={true}
                            data-shape="rectangle"
                            data-size={40}
                            id="test-ID-option-$.0"
                            onBlur={[Function]}
                            onClick={[Function]}
                            onDragStart={[Function]}
                            onFocus={[Function]}
                            onKeyDown={[Function]}
                            onKeyUp={[Function]}
                            onMouseDown={[Function]}
                            onMouseEnter={[Function]}
                            onMouseLeave={[Function]}
                            onMouseUp={[Function]}
                            onTouchCancel={[Function]}
                            onTouchEnd={[Function]}
                            onTouchMove={[Function]}
                            onTouchStart={[Function]}
                            role="option"
                            tabIndex={-1}
                          >
                            <ListItemBaseSection
                              position="fill"
                              title="Item 1"
                            >
                              <div
                                data-position="fill"
                                title="Item 1"
                              >
                                Item 1
                              </div>
                            </ListItemBaseSection>
                          </li>
                        </FocusRing>
                      </FocusRing>
                    </ListItemBase>
                  </ListBoxItem>
                  <ListBoxItem
                    item={
                      Object {
                        "aria-label": undefined,
                        "childNodes": Object {
                          Symbol(Symbol.iterator): [Function],
                        },
                        "hasChildNodes": false,
                        "index": 1,
                        "key": "$.1",
                        "level": 0,
                        "nextKey": undefined,
                        "parentKey": null,
                        "prevKey": "$.0",
                        "props": Object {
                          "children": "Item 2",
                        },
                        "rendered": "Item 2",
                        "shouldInvalidate": undefined,
                        "textValue": "Item 2",
                        "type": "item",
                        "value": undefined,
                        "wrapper": undefined,
                      }
                    }
                    key="$.1"
                  >
                    <ListItemBase
                      aria-describedby={null}
                      aria-disabled={false}
                      aria-labelledby={null}
                      aria-selected={false}
                      data-key="$.1"
                      id="test-ID-option-$.1"
                      isDisabled={false}
                      isPadded={true}
                      key="$.1"
                      onClick={[Function]}
                      onDragStart={[Function]}
                      onFocus={[Function]}
                      onKeyDown={[Function]}
                      onKeyUp={[Function]}
                      onMouseDown={[Function]}
                      onMouseEnter={[Function]}
                      onMouseLeave={[Function]}
                      onMouseUp={[Function]}
                      onTouchCancel={[Function]}
                      onTouchEnd={[Function]}
                      onTouchMove={[Function]}
                      onTouchStart={[Function]}
                      role="option"
                      tabIndex={-1}
                    >
                      <FocusRing
                        isInset={false}
                      >
                        <FocusRing
                          focusClass="md-focus-ring-wrapper children"
                          focusRingClass="md-focus-ring-wrapper children"
                          isInset={false}
                        >
                          <li
                            aria-describedby={null}
                            aria-disabled={false}
                            aria-labelledby={null}
                            aria-selected={false}
                            className="md-list-item-base-wrapper"
                            data-disabled={false}
                            data-interactive={true}
                            data-key="$.1"
                            data-padded={true}
                            data-shape="rectangle"
                            data-size={40}
                            id="test-ID-option-$.1"
                            onBlur={[Function]}
                            onClick={[Function]}
                            onDragStart={[Function]}
                            onFocus={[Function]}
                            onKeyDown={[Function]}
                            onKeyUp={[Function]}
                            onMouseDown={[Function]}
                            onMouseEnter={[Function]}
                            onMouseLeave={[Function]}
                            onMouseUp={[Function]}
                            onTouchCancel={[Function]}
                            onTouchEnd={[Function]}
                            onTouchMove={[Function]}
                            onTouchStart={[Function]}
                            role="option"
                            tabIndex={-1}
                          >
                            <ListItemBaseSection
                              position="fill"
                              title="Item 2"
                            >
                              <div
                                data-position="fill"
                                title="Item 2"
                              >
                                Item 2
                              </div>
                            </ListItemBaseSection>
                          </li>
                        </FocusRing>
                      </FocusRing>
                    </ListItemBase>
                  </ListBoxItem>
                </ul>
              </FocusRing>
            </FocusRing>
          </MenuListBackground>
        </ListBoxBase>
        <DismissButton
          onDismiss={[Function]}
        >
          <VisuallyHidden>
            <div
              style={
                Object {
                  "border": 0,
                  "clip": "rect(0 0 0 0)",
                  "clipPath": "inset(50%)",
                  "height": 1,
                  "margin": "0 -1px -1px 0",
                  "overflow": "hidden",
                  "padding": 0,
                  "position": "absolute",
                  "whiteSpace": "nowrap",
                  "width": 1,
                }
              }
            >
              <button
                aria-label="Dismiss"
                onClick={[Function]}
                tabIndex={-1}
              />
            </div>
          </VisuallyHidden>
        </DismissButton>
      </div>
      <span
        data-focus-scope-end={true}
        hidden={true}
      />
    </FocusScope>
  </div>
</Select>
`;

exports[`Select snapshot should match snapshot with id 1`] = `
<Select
  id="example-id"
  label="test"
>
  <div
    className="md-select-wrapper"
    id="example-id"
  >
    <label
      id="test-ID"
      onClick={[Function]}
    >
      test
    </label>
    <HiddenSelect
      label="test"
      state={
        Object {
          "close": [Function],
          "collection": ListCollection {
            "firstKey": "$.0",
            "iterable": Object {
              Symbol(Symbol.iterator): [Function],
            },
            "keyMap": Map {
              "$.0" => Object {
                "aria-label": undefined,
                "childNodes": Object {
                  Symbol(Symbol.iterator): [Function],
                },
                "hasChildNodes": false,
                "index": 0,
                "key": "$.0",
                "level": 0,
                "nextKey": "$.1",
                "parentKey": null,
                "prevKey": undefined,
                "props": Object {
                  "children": "Item 1",
                },
                "rendered": "Item 1",
                "shouldInvalidate": undefined,
                "textValue": "Item 1",
                "type": "item",
                "value": undefined,
                "wrapper": undefined,
              },
              "$.1" => Object {
                "aria-label": undefined,
                "childNodes": Object {
                  Symbol(Symbol.iterator): [Function],
                },
                "hasChildNodes": false,
                "index": 1,
                "key": "$.1",
                "level": 0,
                "nextKey": undefined,
                "parentKey": null,
                "prevKey": "$.0",
                "props": Object {
                  "children": "Item 2",
                },
                "rendered": "Item 2",
                "shouldInvalidate": undefined,
                "textValue": "Item 2",
                "type": "item",
                "value": undefined,
                "wrapper": undefined,
              },
            },
            "lastKey": "$.1",
          },
          "disabledKeys": Set {},
          "focusStrategy": null,
          "isFocused": false,
          "isOpen": false,
          "open": [Function],
          "selectedItem": null,
          "selectedKey": null,
          "selectionManager": SelectionManager {
            "_isSelectAll": null,
            "allowsCellSelection": false,
            "collection": ListCollection {
              "firstKey": "$.0",
              "iterable": Object {
                Symbol(Symbol.iterator): [Function],
              },
              "keyMap": Map {
                "$.0" => Object {
                  "aria-label": undefined,
                  "childNodes": Object {
                    Symbol(Symbol.iterator): [Function],
                  },
                  "hasChildNodes": false,
                  "index": 0,
                  "key": "$.0",
                  "level": 0,
                  "nextKey": "$.1",
                  "parentKey": null,
                  "prevKey": undefined,
                  "props": Object {
                    "children": "Item 1",
                  },
                  "rendered": "Item 1",
                  "shouldInvalidate": undefined,
                  "textValue": "Item 1",
                  "type": "item",
                  "value": undefined,
                  "wrapper": undefined,
                },
                "$.1" => Object {
                  "aria-label": undefined,
                  "childNodes": Object {
                    Symbol(Symbol.iterator): [Function],
                  },
                  "hasChildNodes": false,
                  "index": 1,
                  "key": "$.1",
                  "level": 0,
                  "nextKey": undefined,
                  "parentKey": null,
                  "prevKey": "$.0",
                  "props": Object {
                    "children": "Item 2",
                  },
                  "rendered": "Item 2",
                  "shouldInvalidate": undefined,
                  "textValue": "Item 2",
                  "type": "item",
                  "value": undefined,
                  "wrapper": undefined,
                },
              },
              "lastKey": "$.1",
            },
            "state": Object {
              "childFocusStrategy": null,
              "disabledKeys": Set {},
              "disallowEmptySelection": true,
              "focusedKey": null,
              "isFocused": false,
              "selectedKeys": Set {},
              "selectionMode": "single",
              "setFocused": [Function],
              "setFocusedKey": [Function],
              "setSelectedKeys": [Function],
            },
          },
          "setFocused": [Function],
          "setSelectedKey": [Function],
          "toggle": [Function],
        }
      }
      triggerRef={
        Object {
          "current": <button
            aria-expanded="false"
            aria-haspopup="listbox"
            aria-labelledby="test-ID test-ID"
            class="md-select-dropdown-input"
            id="example-id"
            type="button"
          >
            <span
              class="md-select-selected-item-wrapper"
              id="test-ID"
            />
            <span
              aria-hidden="true"
              class="md-select-icon-wrapper"
            >
              <div
                class="md-icon-wrapper md-icon-auto-scales md-icon-scales md-icon-no-shrink"
              >
                <svg
                  class=""
                  data-autoscale="false"
                  data-scale="16"
                  data-test="arrow-down"
                  fill="currentColor"
                  height="100%"
                  viewBox="0, 0, 32, 32"
                  width="100%"
                />
              </div>
            </span>
          </button>,
        }
      }
    >
      <div
        aria-hidden={true}
        style={
          Object {
            "border": 0,
            "clip": "rect(0 0 0 0)",
            "clipPath": "inset(50%)",
            "height": 1,
            "margin": "0 -1px -1px 0",
            "overflow": "hidden",
            "padding": 0,
            "position": "absolute",
            "whiteSpace": "nowrap",
            "width": 1,
          }
        }
      >
        <input
          onFocus={[Function]}
          style={
            Object {
              "fontSize": 16,
            }
          }
          tabIndex={-1}
          type="text"
        />
        <label>
          test
          <select
            onChange={[Function]}
            size={2}
            tabIndex={-1}
            value=""
          >
            <option />
            <option
              key="$.0"
              value="$.0"
            >
              Item 1
            </option>
            <option
              key="$.1"
              value="$.1"
            >
              Item 2
            </option>
          </select>
        </label>
      </div>
    </HiddenSelect>
    <FocusRing>
      <FocusRing
        focusClass="md-focus-ring-wrapper children"
        focusRingClass="md-focus-ring-wrapper children"
      >
        <button
          aria-controls={null}
          aria-expanded={false}
          aria-haspopup="listbox"
          aria-labelledby="test-ID test-ID"
          className="md-select-dropdown-input"
          id="example-id"
          onBlur={[Function]}
          onClick={[Function]}
          onDragStart={[Function]}
          onFocus={[Function]}
          onKeyDown={[Function]}
          onKeyUp={[Function]}
          onMouseDown={[Function]}
          onMouseEnter={[Function]}
          onMouseLeave={[Function]}
          onMouseUp={[Function]}
          onTouchCancel={[Function]}
          onTouchEnd={[Function]}
          onTouchMove={[Function]}
          onTouchStart={[Function]}
          type="button"
        >
          <span
            className="md-select-selected-item-wrapper"
            id="test-ID"
          />
          <span
            aria-hidden="true"
            className="md-select-icon-wrapper"
          >
            <Icon
              name="arrow-down"
              scale={16}
              weight="bold"
            >
              <div
                className="md-icon-wrapper md-icon-auto-scales md-icon-scales md-icon-no-shrink"
              >
                <svg
                  className=""
                  data-autoscale={false}
                  data-scale={16}
                  data-test="arrow-down"
                  fill="currentColor"
                  height="100%"
                  style={Object {}}
                  viewBox="0, 0, 32, 32"
                  width="100%"
                />
              </div>
            </Icon>
          </span>
        </button>
      </FocusRing>
    </FocusRing>
  </div>
</Select>
`;

exports[`Select snapshot should match snapshot with listbox opened 1`] = `
<Select
  id="test-id"
  isOpen={true}
  label="test"
>
  <div
    className="md-select-wrapper"
    id="test-id"
  >
    <label
      id="test-ID"
      onClick={[Function]}
    >
      test
    </label>
    <HiddenSelect
      label="test"
      state={
        Object {
          "close": [Function],
          "collection": ListCollection {
            "firstKey": "$.0",
            "iterable": Object {
              Symbol(Symbol.iterator): [Function],
            },
            "keyMap": Map {
              "$.0" => Object {
                "aria-label": undefined,
                "childNodes": Object {
                  Symbol(Symbol.iterator): [Function],
                },
                "hasChildNodes": false,
                "index": 0,
                "key": "$.0",
                "level": 0,
                "nextKey": "$.1",
                "parentKey": null,
                "prevKey": undefined,
                "props": Object {
                  "children": "Item 1",
                },
                "rendered": "Item 1",
                "shouldInvalidate": undefined,
                "textValue": "Item 1",
                "type": "item",
                "value": undefined,
                "wrapper": undefined,
              },
              "$.1" => Object {
                "aria-label": undefined,
                "childNodes": Object {
                  Symbol(Symbol.iterator): [Function],
                },
                "hasChildNodes": false,
                "index": 1,
                "key": "$.1",
                "level": 0,
                "nextKey": undefined,
                "parentKey": null,
                "prevKey": "$.0",
                "props": Object {
                  "children": "Item 2",
                },
                "rendered": "Item 2",
                "shouldInvalidate": undefined,
                "textValue": "Item 2",
                "type": "item",
                "value": undefined,
                "wrapper": undefined,
              },
            },
            "lastKey": "$.1",
          },
          "disabledKeys": Set {},
          "focusStrategy": null,
          "isFocused": false,
          "isOpen": true,
          "open": [Function],
          "selectedItem": null,
          "selectedKey": null,
          "selectionManager": SelectionManager {
            "_isSelectAll": null,
            "allowsCellSelection": false,
            "collection": ListCollection {
              "firstKey": "$.0",
              "iterable": Object {
                Symbol(Symbol.iterator): [Function],
              },
              "keyMap": Map {
                "$.0" => Object {
                  "aria-label": undefined,
                  "childNodes": Object {
                    Symbol(Symbol.iterator): [Function],
                  },
                  "hasChildNodes": false,
                  "index": 0,
                  "key": "$.0",
                  "level": 0,
                  "nextKey": "$.1",
                  "parentKey": null,
                  "prevKey": undefined,
                  "props": Object {
                    "children": "Item 1",
                  },
                  "rendered": "Item 1",
                  "shouldInvalidate": undefined,
                  "textValue": "Item 1",
                  "type": "item",
                  "value": undefined,
                  "wrapper": undefined,
                },
                "$.1" => Object {
                  "aria-label": undefined,
                  "childNodes": Object {
                    Symbol(Symbol.iterator): [Function],
                  },
                  "hasChildNodes": false,
                  "index": 1,
                  "key": "$.1",
                  "level": 0,
                  "nextKey": undefined,
                  "parentKey": null,
                  "prevKey": "$.0",
                  "props": Object {
                    "children": "Item 2",
                  },
                  "rendered": "Item 2",
                  "shouldInvalidate": undefined,
                  "textValue": "Item 2",
                  "type": "item",
                  "value": undefined,
                  "wrapper": undefined,
                },
              },
              "lastKey": "$.1",
            },
            "state": Object {
              "childFocusStrategy": "first",
              "disabledKeys": Set {},
              "disallowEmptySelection": true,
              "focusedKey": null,
              "isFocused": true,
              "selectedKeys": Set {},
              "selectionMode": "single",
              "setFocused": [Function],
              "setFocusedKey": [Function],
              "setSelectedKeys": [Function],
            },
          },
          "setFocused": [Function],
          "setSelectedKey": [Function],
          "toggle": [Function],
        }
      }
      triggerRef={
        Object {
          "current": <button
            aria-controls="test-ID"
            aria-expanded="true"
            aria-haspopup="listbox"
            aria-labelledby="test-ID test-ID"
            class="md-select-dropdown-input md-select-open"
            id="test-ID"
            type="button"
          >
            <span
              class="md-select-selected-item-wrapper"
              id="test-ID"
            />
            <span
              aria-hidden="true"
              class="md-select-icon-wrapper"
            >
              <div
                class="md-icon-wrapper md-icon-auto-scales md-icon-scales md-icon-no-shrink"
              >
                <svg
                  class=""
                  data-autoscale="false"
                  data-scale="16"
                  data-test="arrow-up"
                  fill="currentColor"
                  height="100%"
                  viewBox="0, 0, 32, 32"
                  width="100%"
                />
              </div>
            </span>
          </button>,
        }
      }
    >
      <div
        aria-hidden={true}
        style={
          Object {
            "border": 0,
            "clip": "rect(0 0 0 0)",
            "clipPath": "inset(50%)",
            "height": 1,
            "margin": "0 -1px -1px 0",
            "overflow": "hidden",
            "padding": 0,
            "position": "absolute",
            "whiteSpace": "nowrap",
            "width": 1,
          }
        }
      >
        <input
          onFocus={[Function]}
          style={
            Object {
              "fontSize": 16,
            }
          }
          tabIndex={-1}
          type="text"
        />
        <label>
          test
          <select
            onChange={[Function]}
            size={2}
            tabIndex={-1}
            value=""
          >
            <option />
            <option
              key="$.0"
              value="$.0"
            >
              Item 1
            </option>
            <option
              key="$.1"
              value="$.1"
            >
              Item 2
            </option>
          </select>
        </label>
      </div>
    </HiddenSelect>
    <FocusRing>
      <FocusRing
        focusClass="md-focus-ring-wrapper children"
        focusRingClass="md-focus-ring-wrapper children"
      >
        <button
          aria-controls="test-ID"
          aria-expanded={true}
          aria-haspopup="listbox"
          aria-labelledby="test-ID test-ID"
          className="md-select-dropdown-input md-select-open"
          id="test-ID"
          onBlur={[Function]}
          onClick={[Function]}
          onDragStart={[Function]}
          onFocus={[Function]}
          onKeyDown={[Function]}
          onKeyUp={[Function]}
          onMouseDown={[Function]}
          onMouseEnter={[Function]}
          onMouseLeave={[Function]}
          onMouseUp={[Function]}
          onTouchCancel={[Function]}
          onTouchEnd={[Function]}
          onTouchMove={[Function]}
          onTouchStart={[Function]}
          type="button"
        >
          <span
            className="md-select-selected-item-wrapper"
            id="test-ID"
          />
          <span
            aria-hidden="true"
            className="md-select-icon-wrapper"
          >
            <Icon
              name="arrow-up"
              scale={16}
              weight="bold"
            >
              <div
                className="md-icon-wrapper md-icon-auto-scales md-icon-scales md-icon-no-shrink"
              >
                <svg
                  className=""
                  data-autoscale={false}
                  data-scale={16}
                  data-test="arrow-up"
                  fill="currentColor"
                  height="100%"
                  style={Object {}}
                  viewBox="0, 0, 32, 32"
                  width="100%"
                />
              </div>
            </Icon>
          </span>
        </button>
      </FocusRing>
    </FocusRing>
    <FocusScope
      restoreFocus={true}
    >
      <span
        data-focus-scope-start={true}
        hidden={true}
      />
      <div
        className="md-select-overlay"
        data-direction="bottom"
        onBlur={[Function]}
        onFocus={[Function]}
        onKeyDown={[Function]}
        style={
          Object {
            "--md-globals-select-dropdown-input-height": "0.0rem",
          }
        }
      >
        <DismissButton
          onDismiss={[Function]}
        >
          <VisuallyHidden>
            <div
              style={
                Object {
                  "border": 0,
                  "clip": "rect(0 0 0 0)",
                  "clipPath": "inset(50%)",
                  "height": 1,
                  "margin": "0 -1px -1px 0",
                  "overflow": "hidden",
                  "padding": 0,
                  "position": "absolute",
                  "whiteSpace": "nowrap",
                  "width": 1,
                }
              }
            >
              <button
                aria-label="Dismiss"
                onClick={[Function]}
                tabIndex={-1}
              />
            </div>
          </VisuallyHidden>
        </DismissButton>
        <ListBoxBase
          aria-labelledby="test-ID"
          autoFocus={true}
          className="md-select-menu-listbox"
          disallowEmptySelection={true}
          id="test-ID"
          onBlur={[Function]}
          shouldFocusOnHover={true}
          shouldSelectOnPressUp={true}
          state={
            Object {
              "close": [Function],
              "collection": ListCollection {
                "firstKey": "$.0",
                "iterable": Object {
                  Symbol(Symbol.iterator): [Function],
                },
                "keyMap": Map {
                  "$.0" => Object {
                    "aria-label": undefined,
                    "childNodes": Object {
                      Symbol(Symbol.iterator): [Function],
                    },
                    "hasChildNodes": false,
                    "index": 0,
                    "key": "$.0",
                    "level": 0,
                    "nextKey": "$.1",
                    "parentKey": null,
                    "prevKey": undefined,
                    "props": Object {
                      "children": "Item 1",
                    },
                    "rendered": "Item 1",
                    "shouldInvalidate": undefined,
                    "textValue": "Item 1",
                    "type": "item",
                    "value": undefined,
                    "wrapper": undefined,
                  },
                  "$.1" => Object {
                    "aria-label": undefined,
                    "childNodes": Object {
                      Symbol(Symbol.iterator): [Function],
                    },
                    "hasChildNodes": false,
                    "index": 1,
                    "key": "$.1",
                    "level": 0,
                    "nextKey": undefined,
                    "parentKey": null,
                    "prevKey": "$.0",
                    "props": Object {
                      "children": "Item 2",
                    },
                    "rendered": "Item 2",
                    "shouldInvalidate": undefined,
                    "textValue": "Item 2",
                    "type": "item",
                    "value": undefined,
                    "wrapper": undefined,
                  },
                },
                "lastKey": "$.1",
              },
              "disabledKeys": Set {},
              "focusStrategy": null,
              "isFocused": false,
              "isOpen": true,
              "open": [Function],
              "selectedItem": null,
              "selectedKey": null,
              "selectionManager": SelectionManager {
                "_isSelectAll": null,
                "allowsCellSelection": false,
                "collection": ListCollection {
                  "firstKey": "$.0",
                  "iterable": Object {
                    Symbol(Symbol.iterator): [Function],
                  },
                  "keyMap": Map {
                    "$.0" => Object {
                      "aria-label": undefined,
                      "childNodes": Object {
                        Symbol(Symbol.iterator): [Function],
                      },
                      "hasChildNodes": false,
                      "index": 0,
                      "key": "$.0",
                      "level": 0,
                      "nextKey": "$.1",
                      "parentKey": null,
                      "prevKey": undefined,
                      "props": Object {
                        "children": "Item 1",
                      },
                      "rendered": "Item 1",
                      "shouldInvalidate": undefined,
                      "textValue": "Item 1",
                      "type": "item",
                      "value": undefined,
                      "wrapper": undefined,
                    },
                    "$.1" => Object {
                      "aria-label": undefined,
                      "childNodes": Object {
                        Symbol(Symbol.iterator): [Function],
                      },
                      "hasChildNodes": false,
                      "index": 1,
                      "key": "$.1",
                      "level": 0,
                      "nextKey": undefined,
                      "parentKey": null,
                      "prevKey": "$.0",
                      "props": Object {
                        "children": "Item 2",
                      },
                      "rendered": "Item 2",
                      "shouldInvalidate": undefined,
                      "textValue": "Item 2",
                      "type": "item",
                      "value": undefined,
                      "wrapper": undefined,
                    },
                  },
                  "lastKey": "$.1",
                },
                "state": Object {
                  "childFocusStrategy": "first",
                  "disabledKeys": Set {},
                  "disallowEmptySelection": true,
                  "focusedKey": null,
                  "isFocused": true,
                  "selectedKeys": Set {},
                  "selectionMode": "single",
                  "setFocused": [Function],
                  "setFocusedKey": [Function],
                  "setSelectedKeys": [Function],
                },
              },
              "setFocused": [Function],
              "setSelectedKey": [Function],
              "toggle": [Function],
            }
          }
        >
          <MenuListBackground
            aria-labelledby="test-ID"
            className="md-select-menu-listbox"
            color="primary"
            id="test-ID"
            onBlur={[Function]}
            onFocus={[Function]}
            onKeyDown={[Function]}
            onKeyDownCapture={[Function]}
            onMouseDown={[Function]}
            role="listbox"
            tabIndex={0}
          >
            <FocusRing>
              <FocusRing
                focusClass="md-focus-ring-wrapper children"
                focusRingClass="md-focus-ring-wrapper children"
              >
                <ul
                  aria-labelledby="test-ID"
                  className="md-select-menu-listbox md-menu-list-background-wrapper"
                  data-color="primary"
                  id="test-ID"
                  onBlur={[Function]}
                  onFocus={[Function]}
                  onKeyDown={[Function]}
                  onKeyDownCapture={[Function]}
                  onMouseDown={[Function]}
                  role="listbox"
                  tabIndex={0}
                >
                  <ListBoxItem
                    item={
                      Object {
                        "aria-label": undefined,
                        "childNodes": Object {
                          Symbol(Symbol.iterator): [Function],
                        },
                        "hasChildNodes": false,
                        "index": 0,
                        "key": "$.0",
                        "level": 0,
                        "nextKey": "$.1",
                        "parentKey": null,
                        "prevKey": undefined,
                        "props": Object {
                          "children": "Item 1",
                        },
                        "rendered": "Item 1",
                        "shouldInvalidate": undefined,
                        "textValue": "Item 1",
                        "type": "item",
                        "value": undefined,
                        "wrapper": undefined,
                      }
                    }
                    key="$.0"
                  >
                    <ListItemBase
                      aria-describedby={null}
                      aria-disabled={false}
                      aria-labelledby={null}
                      aria-selected={false}
                      data-key="$.0"
                      id="test-ID-option-$.0"
                      isDisabled={false}
                      isPadded={true}
                      key="$.0"
                      onClick={[Function]}
                      onDragStart={[Function]}
                      onFocus={[Function]}
                      onKeyDown={[Function]}
                      onKeyUp={[Function]}
                      onMouseDown={[Function]}
                      onMouseEnter={[Function]}
                      onMouseLeave={[Function]}
                      onMouseUp={[Function]}
                      onTouchCancel={[Function]}
                      onTouchEnd={[Function]}
                      onTouchMove={[Function]}
                      onTouchStart={[Function]}
                      role="option"
                      tabIndex={-1}
                    >
                      <FocusRing
                        isInset={false}
                      >
                        <FocusRing
                          focusClass="md-focus-ring-wrapper children"
                          focusRingClass="md-focus-ring-wrapper children"
                          isInset={false}
                        >
                          <li
                            aria-describedby={null}
                            aria-disabled={false}
                            aria-labelledby={null}
                            aria-selected={false}
                            className="md-list-item-base-wrapper"
                            data-disabled={false}
                            data-interactive={true}
                            data-key="$.0"
                            data-padded={true}
                            data-shape="rectangle"
                            data-size={40}
                            id="test-ID-option-$.0"
                            onBlur={[Function]}
                            onClick={[Function]}
                            onDragStart={[Function]}
                            onFocus={[Function]}
                            onKeyDown={[Function]}
                            onKeyUp={[Function]}
                            onMouseDown={[Function]}
                            onMouseEnter={[Function]}
                            onMouseLeave={[Function]}
                            onMouseUp={[Function]}
                            onTouchCancel={[Function]}
                            onTouchEnd={[Function]}
                            onTouchMove={[Function]}
                            onTouchStart={[Function]}
                            role="option"
                            tabIndex={-1}
                          >
                            <ListItemBaseSection
                              position="fill"
                              title="Item 1"
                            >
                              <div
                                data-position="fill"
                                title="Item 1"
                              >
                                Item 1
                              </div>
                            </ListItemBaseSection>
                          </li>
                        </FocusRing>
                      </FocusRing>
                    </ListItemBase>
                  </ListBoxItem>
                  <ListBoxItem
                    item={
                      Object {
                        "aria-label": undefined,
                        "childNodes": Object {
                          Symbol(Symbol.iterator): [Function],
                        },
                        "hasChildNodes": false,
                        "index": 1,
                        "key": "$.1",
                        "level": 0,
                        "nextKey": undefined,
                        "parentKey": null,
                        "prevKey": "$.0",
                        "props": Object {
                          "children": "Item 2",
                        },
                        "rendered": "Item 2",
                        "shouldInvalidate": undefined,
                        "textValue": "Item 2",
                        "type": "item",
                        "value": undefined,
                        "wrapper": undefined,
                      }
                    }
                    key="$.1"
                  >
                    <ListItemBase
                      aria-describedby={null}
                      aria-disabled={false}
                      aria-labelledby={null}
                      aria-selected={false}
                      data-key="$.1"
                      id="test-ID-option-$.1"
                      isDisabled={false}
                      isPadded={true}
                      key="$.1"
                      onClick={[Function]}
                      onDragStart={[Function]}
                      onFocus={[Function]}
                      onKeyDown={[Function]}
                      onKeyUp={[Function]}
                      onMouseDown={[Function]}
                      onMouseEnter={[Function]}
                      onMouseLeave={[Function]}
                      onMouseUp={[Function]}
                      onTouchCancel={[Function]}
                      onTouchEnd={[Function]}
                      onTouchMove={[Function]}
                      onTouchStart={[Function]}
                      role="option"
                      tabIndex={-1}
                    >
                      <FocusRing
                        isInset={false}
                      >
                        <FocusRing
                          focusClass="md-focus-ring-wrapper children"
                          focusRingClass="md-focus-ring-wrapper children"
                          isInset={false}
                        >
                          <li
                            aria-describedby={null}
                            aria-disabled={false}
                            aria-labelledby={null}
                            aria-selected={false}
                            className="md-list-item-base-wrapper"
                            data-disabled={false}
                            data-interactive={true}
                            data-key="$.1"
                            data-padded={true}
                            data-shape="rectangle"
                            data-size={40}
                            id="test-ID-option-$.1"
                            onBlur={[Function]}
                            onClick={[Function]}
                            onDragStart={[Function]}
                            onFocus={[Function]}
                            onKeyDown={[Function]}
                            onKeyUp={[Function]}
                            onMouseDown={[Function]}
                            onMouseEnter={[Function]}
                            onMouseLeave={[Function]}
                            onMouseUp={[Function]}
                            onTouchCancel={[Function]}
                            onTouchEnd={[Function]}
                            onTouchMove={[Function]}
                            onTouchStart={[Function]}
                            role="option"
                            tabIndex={-1}
                          >
                            <ListItemBaseSection
                              position="fill"
                              title="Item 2"
                            >
                              <div
                                data-position="fill"
                                title="Item 2"
                              >
                                Item 2
                              </div>
                            </ListItemBaseSection>
                          </li>
                        </FocusRing>
                      </FocusRing>
                    </ListItemBase>
                  </ListBoxItem>
                </ul>
              </FocusRing>
            </FocusRing>
          </MenuListBackground>
        </ListBoxBase>
        <DismissButton
          onDismiss={[Function]}
        >
          <VisuallyHidden>
            <div
              style={
                Object {
                  "border": 0,
                  "clip": "rect(0 0 0 0)",
                  "clipPath": "inset(50%)",
                  "height": 1,
                  "margin": "0 -1px -1px 0",
                  "overflow": "hidden",
                  "padding": 0,
                  "position": "absolute",
                  "whiteSpace": "nowrap",
                  "width": 1,
                }
              }
            >
              <button
                aria-label="Dismiss"
                onClick={[Function]}
                tabIndex={-1}
              />
            </div>
          </VisuallyHidden>
        </DismissButton>
      </div>
      <span
        data-focus-scope-end={true}
        hidden={true}
      />
    </FocusScope>
  </div>
</Select>
`;

exports[`Select snapshot should match snapshot with placeholder 1`] = `
<Select
  id="test-id"
  label="test"
  placeholder="Select an option"
>
  <div
    className="md-select-wrapper"
    id="test-id"
  >
    <label
      id="test-ID"
      onClick={[Function]}
    >
      test
    </label>
    <HiddenSelect
      label="test"
      state={
        Object {
          "close": [Function],
          "collection": ListCollection {
            "firstKey": "$.0",
            "iterable": Object {
              Symbol(Symbol.iterator): [Function],
            },
            "keyMap": Map {
              "$.0" => Object {
                "aria-label": undefined,
                "childNodes": Object {
                  Symbol(Symbol.iterator): [Function],
                },
                "hasChildNodes": false,
                "index": 0,
                "key": "$.0",
                "level": 0,
                "nextKey": "$.1",
                "parentKey": null,
                "prevKey": undefined,
                "props": Object {
                  "children": "Item 1",
                },
                "rendered": "Item 1",
                "shouldInvalidate": undefined,
                "textValue": "Item 1",
                "type": "item",
                "value": undefined,
                "wrapper": undefined,
              },
              "$.1" => Object {
                "aria-label": undefined,
                "childNodes": Object {
                  Symbol(Symbol.iterator): [Function],
                },
                "hasChildNodes": false,
                "index": 1,
                "key": "$.1",
                "level": 0,
                "nextKey": undefined,
                "parentKey": null,
                "prevKey": "$.0",
                "props": Object {
                  "children": "Item 2",
                },
                "rendered": "Item 2",
                "shouldInvalidate": undefined,
                "textValue": "Item 2",
                "type": "item",
                "value": undefined,
                "wrapper": undefined,
              },
            },
            "lastKey": "$.1",
          },
          "disabledKeys": Set {},
          "focusStrategy": null,
          "isFocused": false,
          "isOpen": false,
          "open": [Function],
          "selectedItem": null,
          "selectedKey": null,
          "selectionManager": SelectionManager {
            "_isSelectAll": null,
            "allowsCellSelection": false,
            "collection": ListCollection {
              "firstKey": "$.0",
              "iterable": Object {
                Symbol(Symbol.iterator): [Function],
              },
              "keyMap": Map {
                "$.0" => Object {
                  "aria-label": undefined,
                  "childNodes": Object {
                    Symbol(Symbol.iterator): [Function],
                  },
                  "hasChildNodes": false,
                  "index": 0,
                  "key": "$.0",
                  "level": 0,
                  "nextKey": "$.1",
                  "parentKey": null,
                  "prevKey": undefined,
                  "props": Object {
                    "children": "Item 1",
                  },
                  "rendered": "Item 1",
                  "shouldInvalidate": undefined,
                  "textValue": "Item 1",
                  "type": "item",
                  "value": undefined,
                  "wrapper": undefined,
                },
                "$.1" => Object {
                  "aria-label": undefined,
                  "childNodes": Object {
                    Symbol(Symbol.iterator): [Function],
                  },
                  "hasChildNodes": false,
                  "index": 1,
                  "key": "$.1",
                  "level": 0,
                  "nextKey": undefined,
                  "parentKey": null,
                  "prevKey": "$.0",
                  "props": Object {
                    "children": "Item 2",
                  },
                  "rendered": "Item 2",
                  "shouldInvalidate": undefined,
                  "textValue": "Item 2",
                  "type": "item",
                  "value": undefined,
                  "wrapper": undefined,
                },
              },
              "lastKey": "$.1",
            },
            "state": Object {
              "childFocusStrategy": null,
              "disabledKeys": Set {},
              "disallowEmptySelection": true,
              "focusedKey": null,
              "isFocused": false,
              "selectedKeys": Set {},
              "selectionMode": "single",
              "setFocused": [Function],
              "setFocusedKey": [Function],
              "setSelectedKeys": [Function],
            },
          },
          "setFocused": [Function],
          "setSelectedKey": [Function],
          "toggle": [Function],
        }
      }
      triggerRef={
        Object {
          "current": <button
            aria-expanded="false"
            aria-haspopup="listbox"
            aria-labelledby="test-ID test-ID"
            class="md-select-dropdown-input"
            id="test-ID"
            type="button"
          >
            <span
              class="md-select-selected-item-wrapper"
              id="test-ID"
            >
              Select an option
            </span>
            <span
              aria-hidden="true"
              class="md-select-icon-wrapper"
            >
              <div
                class="md-icon-wrapper md-icon-auto-scales md-icon-scales md-icon-no-shrink"
              >
                <svg
                  class=""
                  data-autoscale="false"
                  data-scale="16"
                  data-test="arrow-down"
                  fill="currentColor"
                  height="100%"
                  viewBox="0, 0, 32, 32"
                  width="100%"
                />
              </div>
            </span>
          </button>,
        }
      }
    >
      <div
        aria-hidden={true}
        style={
          Object {
            "border": 0,
            "clip": "rect(0 0 0 0)",
            "clipPath": "inset(50%)",
            "height": 1,
            "margin": "0 -1px -1px 0",
            "overflow": "hidden",
            "padding": 0,
            "position": "absolute",
            "whiteSpace": "nowrap",
            "width": 1,
          }
        }
      >
        <input
          onFocus={[Function]}
          style={
            Object {
              "fontSize": 16,
            }
          }
          tabIndex={-1}
          type="text"
        />
        <label>
          test
          <select
            onChange={[Function]}
            size={2}
            tabIndex={-1}
            value=""
          >
            <option />
            <option
              key="$.0"
              value="$.0"
            >
              Item 1
            </option>
            <option
              key="$.1"
              value="$.1"
            >
              Item 2
            </option>
          </select>
        </label>
      </div>
    </HiddenSelect>
    <FocusRing>
      <FocusRing
        focusClass="md-focus-ring-wrapper children"
        focusRingClass="md-focus-ring-wrapper children"
      >
        <button
          aria-controls={null}
          aria-expanded={false}
          aria-haspopup="listbox"
          aria-labelledby="test-ID test-ID"
          className="md-select-dropdown-input"
          id="test-ID"
          onBlur={[Function]}
          onClick={[Function]}
          onDragStart={[Function]}
          onFocus={[Function]}
          onKeyDown={[Function]}
          onKeyUp={[Function]}
          onMouseDown={[Function]}
          onMouseEnter={[Function]}
          onMouseLeave={[Function]}
          onMouseUp={[Function]}
          onTouchCancel={[Function]}
          onTouchEnd={[Function]}
          onTouchMove={[Function]}
          onTouchStart={[Function]}
          type="button"
        >
          <span
            className="md-select-selected-item-wrapper"
            id="test-ID"
          >
            Select an option
          </span>
          <span
            aria-hidden="true"
            className="md-select-icon-wrapper"
          >
            <Icon
              name="arrow-down"
              scale={16}
              weight="bold"
            >
              <div
                className="md-icon-wrapper md-icon-auto-scales md-icon-scales md-icon-no-shrink"
              >
                <svg
                  className=""
                  data-autoscale={false}
                  data-scale={16}
                  data-test="arrow-down"
                  fill="currentColor"
                  height="100%"
                  style={Object {}}
                  viewBox="0, 0, 32, 32"
                  width="100%"
                />
              </div>
            </Icon>
          </span>
        </button>
      </FocusRing>
    </FocusRing>
  </div>
</Select>
`;

exports[`Select snapshot should match snapshot with selected option and listbox closed 1`] = `
<Select
  defaultSelectedKey="$.0"
  id="test-id"
  label="test"
>
  <div
    className="md-select-wrapper"
    id="test-id"
  >
    <label
      id="test-ID"
      onClick={[Function]}
    >
      test
    </label>
    <HiddenSelect
      label="test"
      state={
        Object {
          "close": [Function],
          "collection": ListCollection {
            "firstKey": "$.0",
            "iterable": Object {
              Symbol(Symbol.iterator): [Function],
            },
            "keyMap": Map {
              "$.0" => Object {
                "aria-label": undefined,
                "childNodes": Object {
                  Symbol(Symbol.iterator): [Function],
                },
                "hasChildNodes": false,
                "index": 0,
                "key": "$.0",
                "level": 0,
                "nextKey": "$.1",
                "parentKey": null,
                "prevKey": undefined,
                "props": Object {
                  "children": "Item 1",
                },
                "rendered": "Item 1",
                "shouldInvalidate": undefined,
                "textValue": "Item 1",
                "type": "item",
                "value": undefined,
                "wrapper": undefined,
              },
              "$.1" => Object {
                "aria-label": undefined,
                "childNodes": Object {
                  Symbol(Symbol.iterator): [Function],
                },
                "hasChildNodes": false,
                "index": 1,
                "key": "$.1",
                "level": 0,
                "nextKey": undefined,
                "parentKey": null,
                "prevKey": "$.0",
                "props": Object {
                  "children": "Item 2",
                },
                "rendered": "Item 2",
                "shouldInvalidate": undefined,
                "textValue": "Item 2",
                "type": "item",
                "value": undefined,
                "wrapper": undefined,
              },
            },
            "lastKey": "$.1",
          },
          "disabledKeys": Set {},
          "focusStrategy": null,
          "isFocused": false,
          "isOpen": false,
          "open": [Function],
          "selectedItem": Object {
            "aria-label": undefined,
            "childNodes": Object {
              Symbol(Symbol.iterator): [Function],
            },
            "hasChildNodes": false,
            "index": 0,
            "key": "$.0",
            "level": 0,
            "nextKey": "$.1",
            "parentKey": null,
            "prevKey": undefined,
            "props": Object {
              "children": "Item 1",
            },
            "rendered": "Item 1",
            "shouldInvalidate": undefined,
            "textValue": "Item 1",
            "type": "item",
            "value": undefined,
            "wrapper": undefined,
          },
          "selectedKey": "$.0",
          "selectionManager": SelectionManager {
            "_isSelectAll": null,
            "allowsCellSelection": false,
            "collection": ListCollection {
              "firstKey": "$.0",
              "iterable": Object {
                Symbol(Symbol.iterator): [Function],
              },
              "keyMap": Map {
                "$.0" => Object {
                  "aria-label": undefined,
                  "childNodes": Object {
                    Symbol(Symbol.iterator): [Function],
                  },
                  "hasChildNodes": false,
                  "index": 0,
                  "key": "$.0",
                  "level": 0,
                  "nextKey": "$.1",
                  "parentKey": null,
                  "prevKey": undefined,
                  "props": Object {
                    "children": "Item 1",
                  },
                  "rendered": "Item 1",
                  "shouldInvalidate": undefined,
                  "textValue": "Item 1",
                  "type": "item",
                  "value": undefined,
                  "wrapper": undefined,
                },
                "$.1" => Object {
                  "aria-label": undefined,
                  "childNodes": Object {
                    Symbol(Symbol.iterator): [Function],
                  },
                  "hasChildNodes": false,
                  "index": 1,
                  "key": "$.1",
                  "level": 0,
                  "nextKey": undefined,
                  "parentKey": null,
                  "prevKey": "$.0",
                  "props": Object {
                    "children": "Item 2",
                  },
                  "rendered": "Item 2",
                  "shouldInvalidate": undefined,
                  "textValue": "Item 2",
                  "type": "item",
                  "value": undefined,
                  "wrapper": undefined,
                },
              },
              "lastKey": "$.1",
            },
            "state": Object {
              "childFocusStrategy": null,
              "disabledKeys": Set {},
              "disallowEmptySelection": true,
              "focusedKey": null,
              "isFocused": false,
              "selectedKeys": Set {
                "$.0",
              },
              "selectionMode": "single",
              "setFocused": [Function],
              "setFocusedKey": [Function],
              "setSelectedKeys": [Function],
            },
          },
          "setFocused": [Function],
          "setSelectedKey": [Function],
          "toggle": [Function],
        }
      }
      triggerRef={
        Object {
          "current": <button
            aria-expanded="false"
            aria-haspopup="listbox"
            aria-labelledby="test-ID test-ID"
            class="md-select-dropdown-input md-select-selected"
            id="test-ID"
            type="button"
          >
            <span
              class="md-select-selected-item-wrapper"
              id="test-ID"
              title="Item 1"
            >
              Item 1
            </span>
            <span
              aria-hidden="true"
              class="md-select-icon-wrapper"
            >
              <div
                class="md-icon-wrapper md-icon-auto-scales md-icon-scales md-icon-no-shrink"
              >
                <svg
                  class=""
                  data-autoscale="false"
                  data-scale="16"
                  data-test="arrow-down"
                  fill="currentColor"
                  height="100%"
                  viewBox="0, 0, 32, 32"
                  width="100%"
                />
              </div>
            </span>
          </button>,
        }
      }
    >
      <div
        aria-hidden={true}
        style={
          Object {
            "border": 0,
            "clip": "rect(0 0 0 0)",
            "clipPath": "inset(50%)",
            "height": 1,
            "margin": "0 -1px -1px 0",
            "overflow": "hidden",
            "padding": 0,
            "position": "absolute",
            "whiteSpace": "nowrap",
            "width": 1,
          }
        }
      >
        <input
          onFocus={[Function]}
          style={
            Object {
              "fontSize": 16,
            }
          }
          tabIndex={-1}
          type="text"
        />
        <label>
          test
          <select
            onChange={[Function]}
            size={2}
            tabIndex={-1}
            value="$.0"
          >
            <option />
            <option
              key="$.0"
              value="$.0"
            >
              Item 1
            </option>
            <option
              key="$.1"
              value="$.1"
            >
              Item 2
            </option>
          </select>
        </label>
      </div>
    </HiddenSelect>
    <FocusRing>
      <FocusRing
        focusClass="md-focus-ring-wrapper children"
        focusRingClass="md-focus-ring-wrapper children"
      >
        <button
          aria-controls={null}
          aria-expanded={false}
          aria-haspopup="listbox"
          aria-labelledby="test-ID test-ID"
          className="md-select-dropdown-input md-select-selected"
          id="test-ID"
          onBlur={[Function]}
          onClick={[Function]}
          onDragStart={[Function]}
          onFocus={[Function]}
          onKeyDown={[Function]}
          onKeyUp={[Function]}
          onMouseDown={[Function]}
          onMouseEnter={[Function]}
          onMouseLeave={[Function]}
          onMouseUp={[Function]}
          onTouchCancel={[Function]}
          onTouchEnd={[Function]}
          onTouchMove={[Function]}
          onTouchStart={[Function]}
          type="button"
        >
          <span
            className="md-select-selected-item-wrapper"
            id="test-ID"
            title="Item 1"
          >
            Item 1
          </span>
          <span
            aria-hidden="true"
            className="md-select-icon-wrapper"
          >
            <Icon
              name="arrow-down"
              scale={16}
              weight="bold"
            >
              <div
                className="md-icon-wrapper md-icon-auto-scales md-icon-scales md-icon-no-shrink"
              >
                <svg
                  className=""
                  data-autoscale={false}
                  data-scale={16}
                  data-test="arrow-down"
                  fill="currentColor"
                  height="100%"
                  style={Object {}}
                  viewBox="0, 0, 32, 32"
                  width="100%"
                />
              </div>
            </Icon>
          </span>
        </button>
      </FocusRing>
    </FocusRing>
  </div>
</Select>
`;

exports[`Select snapshot should match snapshot with selected option and listbox open 1`] = `
<Select
  defaultSelectedKey="$.0"
  id="test-id"
  isOpen={true}
  label="test"
>
  <div
    className="md-select-wrapper"
    id="test-id"
  >
    <label
      id="test-ID"
      onClick={[Function]}
    >
      test
    </label>
    <HiddenSelect
      label="test"
      state={
        Object {
          "close": [Function],
          "collection": ListCollection {
            "firstKey": "$.0",
            "iterable": Object {
              Symbol(Symbol.iterator): [Function],
            },
            "keyMap": Map {
              "$.0" => Object {
                "aria-label": undefined,
                "childNodes": Object {
                  Symbol(Symbol.iterator): [Function],
                },
                "hasChildNodes": false,
                "index": 0,
                "key": "$.0",
                "level": 0,
                "nextKey": "$.1",
                "parentKey": null,
                "prevKey": undefined,
                "props": Object {
                  "children": "Item 1",
                },
                "rendered": "Item 1",
                "shouldInvalidate": undefined,
                "textValue": "Item 1",
                "type": "item",
                "value": undefined,
                "wrapper": undefined,
              },
              "$.1" => Object {
                "aria-label": undefined,
                "childNodes": Object {
                  Symbol(Symbol.iterator): [Function],
                },
                "hasChildNodes": false,
                "index": 1,
                "key": "$.1",
                "level": 0,
                "nextKey": undefined,
                "parentKey": null,
                "prevKey": "$.0",
                "props": Object {
                  "children": "Item 2",
                },
                "rendered": "Item 2",
                "shouldInvalidate": undefined,
                "textValue": "Item 2",
                "type": "item",
                "value": undefined,
                "wrapper": undefined,
              },
            },
            "lastKey": "$.1",
          },
          "disabledKeys": Set {},
          "focusStrategy": null,
          "isFocused": false,
          "isOpen": true,
          "open": [Function],
          "selectedItem": Object {
            "aria-label": undefined,
            "childNodes": Object {
              Symbol(Symbol.iterator): [Function],
            },
            "hasChildNodes": false,
            "index": 0,
            "key": "$.0",
            "level": 0,
            "nextKey": "$.1",
            "parentKey": null,
            "prevKey": undefined,
            "props": Object {
              "children": "Item 1",
            },
            "rendered": "Item 1",
            "shouldInvalidate": undefined,
            "textValue": "Item 1",
            "type": "item",
            "value": undefined,
            "wrapper": undefined,
          },
          "selectedKey": "$.0",
          "selectionManager": SelectionManager {
            "_isSelectAll": null,
            "allowsCellSelection": false,
            "collection": ListCollection {
              "firstKey": "$.0",
              "iterable": Object {
                Symbol(Symbol.iterator): [Function],
              },
              "keyMap": Map {
                "$.0" => Object {
                  "aria-label": undefined,
                  "childNodes": Object {
                    Symbol(Symbol.iterator): [Function],
                  },
                  "hasChildNodes": false,
                  "index": 0,
                  "key": "$.0",
                  "level": 0,
                  "nextKey": "$.1",
                  "parentKey": null,
                  "prevKey": undefined,
                  "props": Object {
                    "children": "Item 1",
                  },
                  "rendered": "Item 1",
                  "shouldInvalidate": undefined,
                  "textValue": "Item 1",
                  "type": "item",
                  "value": undefined,
                  "wrapper": undefined,
                },
                "$.1" => Object {
                  "aria-label": undefined,
                  "childNodes": Object {
                    Symbol(Symbol.iterator): [Function],
                  },
                  "hasChildNodes": false,
                  "index": 1,
                  "key": "$.1",
                  "level": 0,
                  "nextKey": undefined,
                  "parentKey": null,
                  "prevKey": "$.0",
                  "props": Object {
                    "children": "Item 2",
                  },
                  "rendered": "Item 2",
                  "shouldInvalidate": undefined,
                  "textValue": "Item 2",
                  "type": "item",
                  "value": undefined,
                  "wrapper": undefined,
                },
              },
              "lastKey": "$.1",
            },
            "state": Object {
              "childFocusStrategy": "first",
              "disabledKeys": Set {},
              "disallowEmptySelection": true,
              "focusedKey": "$.0",
              "isFocused": true,
              "selectedKeys": Set {
                "$.0",
              },
              "selectionMode": "single",
              "setFocused": [Function],
              "setFocusedKey": [Function],
              "setSelectedKeys": [Function],
            },
          },
          "setFocused": [Function],
          "setSelectedKey": [Function],
          "toggle": [Function],
        }
      }
      triggerRef={
        Object {
          "current": <button
            aria-controls="test-ID"
            aria-expanded="true"
            aria-haspopup="listbox"
            aria-labelledby="test-ID test-ID"
            class="md-select-dropdown-input md-select-selected md-select-open"
            id="test-ID"
            type="button"
          >
            <span
              class="md-select-selected-item-wrapper"
              id="test-ID"
              title="Item 1"
            >
              Item 1
            </span>
            <span
              aria-hidden="true"
              class="md-select-icon-wrapper"
            >
              <div
                class="md-icon-wrapper md-icon-auto-scales md-icon-scales md-icon-no-shrink"
              >
                <svg
                  class=""
                  data-autoscale="false"
                  data-scale="16"
                  data-test="arrow-up"
                  fill="currentColor"
                  height="100%"
                  viewBox="0, 0, 32, 32"
                  width="100%"
                />
              </div>
            </span>
          </button>,
        }
      }
    >
      <div
        aria-hidden={true}
        style={
          Object {
            "border": 0,
            "clip": "rect(0 0 0 0)",
            "clipPath": "inset(50%)",
            "height": 1,
            "margin": "0 -1px -1px 0",
            "overflow": "hidden",
            "padding": 0,
            "position": "absolute",
            "whiteSpace": "nowrap",
            "width": 1,
          }
        }
      >
        <input
          onFocus={[Function]}
          style={
            Object {
              "fontSize": 16,
            }
          }
          tabIndex={-1}
          type="text"
        />
        <label>
          test
          <select
            onChange={[Function]}
            size={2}
            tabIndex={-1}
            value="$.0"
          >
            <option />
            <option
              key="$.0"
              value="$.0"
            >
              Item 1
            </option>
            <option
              key="$.1"
              value="$.1"
            >
              Item 2
            </option>
          </select>
        </label>
      </div>
    </HiddenSelect>
    <FocusRing>
      <FocusRing
        focusClass="md-focus-ring-wrapper children"
        focusRingClass="md-focus-ring-wrapper children"
      >
        <button
          aria-controls="test-ID"
          aria-expanded={true}
          aria-haspopup="listbox"
          aria-labelledby="test-ID test-ID"
          className="md-select-dropdown-input md-select-selected md-select-open"
          id="test-ID"
          onBlur={[Function]}
          onClick={[Function]}
          onDragStart={[Function]}
          onFocus={[Function]}
          onKeyDown={[Function]}
          onKeyUp={[Function]}
          onMouseDown={[Function]}
          onMouseEnter={[Function]}
          onMouseLeave={[Function]}
          onMouseUp={[Function]}
          onTouchCancel={[Function]}
          onTouchEnd={[Function]}
          onTouchMove={[Function]}
          onTouchStart={[Function]}
          type="button"
        >
          <span
            className="md-select-selected-item-wrapper"
            id="test-ID"
            title="Item 1"
          >
            Item 1
          </span>
          <span
            aria-hidden="true"
            className="md-select-icon-wrapper"
          >
            <Icon
              name="arrow-up"
              scale={16}
              weight="bold"
            >
              <div
                className="md-icon-wrapper md-icon-auto-scales md-icon-scales md-icon-no-shrink"
              >
                <svg
                  className=""
                  data-autoscale={false}
                  data-scale={16}
                  data-test="arrow-up"
                  fill="currentColor"
                  height="100%"
                  style={Object {}}
                  viewBox="0, 0, 32, 32"
                  width="100%"
                />
              </div>
            </Icon>
          </span>
        </button>
      </FocusRing>
    </FocusRing>
    <FocusScope
      restoreFocus={true}
    >
      <span
        data-focus-scope-start={true}
        hidden={true}
      />
      <div
        className="md-select-overlay"
        data-direction="bottom"
        onBlur={[Function]}
        onFocus={[Function]}
        onKeyDown={[Function]}
        style={
          Object {
            "--md-globals-select-dropdown-input-height": "0.0rem",
          }
        }
      >
        <DismissButton
          onDismiss={[Function]}
        >
          <VisuallyHidden>
            <div
              style={
                Object {
                  "border": 0,
                  "clip": "rect(0 0 0 0)",
                  "clipPath": "inset(50%)",
                  "height": 1,
                  "margin": "0 -1px -1px 0",
                  "overflow": "hidden",
                  "padding": 0,
                  "position": "absolute",
                  "whiteSpace": "nowrap",
                  "width": 1,
                }
              }
            >
              <button
                aria-label="Dismiss"
                onClick={[Function]}
                tabIndex={-1}
              />
            </div>
          </VisuallyHidden>
        </DismissButton>
        <ListBoxBase
          aria-labelledby="test-ID"
          autoFocus={true}
          className="md-select-menu-listbox"
          disallowEmptySelection={true}
          id="test-ID"
          onBlur={[Function]}
          shouldFocusOnHover={true}
          shouldSelectOnPressUp={true}
          state={
            Object {
              "close": [Function],
              "collection": ListCollection {
                "firstKey": "$.0",
                "iterable": Object {
                  Symbol(Symbol.iterator): [Function],
                },
                "keyMap": Map {
                  "$.0" => Object {
                    "aria-label": undefined,
                    "childNodes": Object {
                      Symbol(Symbol.iterator): [Function],
                    },
                    "hasChildNodes": false,
                    "index": 0,
                    "key": "$.0",
                    "level": 0,
                    "nextKey": "$.1",
                    "parentKey": null,
                    "prevKey": undefined,
                    "props": Object {
                      "children": "Item 1",
                    },
                    "rendered": "Item 1",
                    "shouldInvalidate": undefined,
                    "textValue": "Item 1",
                    "type": "item",
                    "value": undefined,
                    "wrapper": undefined,
                  },
                  "$.1" => Object {
                    "aria-label": undefined,
                    "childNodes": Object {
                      Symbol(Symbol.iterator): [Function],
                    },
                    "hasChildNodes": false,
                    "index": 1,
                    "key": "$.1",
                    "level": 0,
                    "nextKey": undefined,
                    "parentKey": null,
                    "prevKey": "$.0",
                    "props": Object {
                      "children": "Item 2",
                    },
                    "rendered": "Item 2",
                    "shouldInvalidate": undefined,
                    "textValue": "Item 2",
                    "type": "item",
                    "value": undefined,
                    "wrapper": undefined,
                  },
                },
                "lastKey": "$.1",
              },
              "disabledKeys": Set {},
              "focusStrategy": null,
              "isFocused": false,
              "isOpen": true,
              "open": [Function],
              "selectedItem": Object {
                "aria-label": undefined,
                "childNodes": Object {
                  Symbol(Symbol.iterator): [Function],
                },
                "hasChildNodes": false,
                "index": 0,
                "key": "$.0",
                "level": 0,
                "nextKey": "$.1",
                "parentKey": null,
                "prevKey": undefined,
                "props": Object {
                  "children": "Item 1",
                },
                "rendered": "Item 1",
                "shouldInvalidate": undefined,
                "textValue": "Item 1",
                "type": "item",
                "value": undefined,
                "wrapper": undefined,
              },
              "selectedKey": "$.0",
              "selectionManager": SelectionManager {
                "_isSelectAll": null,
                "allowsCellSelection": false,
                "collection": ListCollection {
                  "firstKey": "$.0",
                  "iterable": Object {
                    Symbol(Symbol.iterator): [Function],
                  },
                  "keyMap": Map {
                    "$.0" => Object {
                      "aria-label": undefined,
                      "childNodes": Object {
                        Symbol(Symbol.iterator): [Function],
                      },
                      "hasChildNodes": false,
                      "index": 0,
                      "key": "$.0",
                      "level": 0,
                      "nextKey": "$.1",
                      "parentKey": null,
                      "prevKey": undefined,
                      "props": Object {
                        "children": "Item 1",
                      },
                      "rendered": "Item 1",
                      "shouldInvalidate": undefined,
                      "textValue": "Item 1",
                      "type": "item",
                      "value": undefined,
                      "wrapper": undefined,
                    },
                    "$.1" => Object {
                      "aria-label": undefined,
                      "childNodes": Object {
                        Symbol(Symbol.iterator): [Function],
                      },
                      "hasChildNodes": false,
                      "index": 1,
                      "key": "$.1",
                      "level": 0,
                      "nextKey": undefined,
                      "parentKey": null,
                      "prevKey": "$.0",
                      "props": Object {
                        "children": "Item 2",
                      },
                      "rendered": "Item 2",
                      "shouldInvalidate": undefined,
                      "textValue": "Item 2",
                      "type": "item",
                      "value": undefined,
                      "wrapper": undefined,
                    },
                  },
                  "lastKey": "$.1",
                },
                "state": Object {
                  "childFocusStrategy": "first",
                  "disabledKeys": Set {},
                  "disallowEmptySelection": true,
                  "focusedKey": "$.0",
                  "isFocused": true,
                  "selectedKeys": Set {
                    "$.0",
                  },
                  "selectionMode": "single",
                  "setFocused": [Function],
                  "setFocusedKey": [Function],
                  "setSelectedKeys": [Function],
                },
              },
              "setFocused": [Function],
              "setSelectedKey": [Function],
              "toggle": [Function],
            }
          }
        >
          <MenuListBackground
            aria-labelledby="test-ID"
            className="md-select-menu-listbox"
            color="primary"
            id="test-ID"
            onBlur={[Function]}
            onFocus={[Function]}
            onKeyDown={[Function]}
            onKeyDownCapture={[Function]}
            onMouseDown={[Function]}
            role="listbox"
            tabIndex={-1}
          >
            <FocusRing>
              <FocusRing
                focusClass="md-focus-ring-wrapper children"
                focusRingClass="md-focus-ring-wrapper children"
              >
                <ul
                  aria-labelledby="test-ID"
                  className="md-select-menu-listbox md-menu-list-background-wrapper"
                  data-color="primary"
                  id="test-ID"
                  onBlur={[Function]}
                  onFocus={[Function]}
                  onKeyDown={[Function]}
                  onKeyDownCapture={[Function]}
                  onMouseDown={[Function]}
                  role="listbox"
                  tabIndex={-1}
                >
                  <ListBoxItem
                    item={
                      Object {
                        "aria-label": undefined,
                        "childNodes": Object {
                          Symbol(Symbol.iterator): [Function],
                        },
                        "hasChildNodes": false,
                        "index": 0,
                        "key": "$.0",
                        "level": 0,
                        "nextKey": "$.1",
                        "parentKey": null,
                        "prevKey": undefined,
                        "props": Object {
                          "children": "Item 1",
                        },
                        "rendered": "Item 1",
                        "shouldInvalidate": undefined,
                        "textValue": "Item 1",
                        "type": "item",
                        "value": undefined,
                        "wrapper": undefined,
                      }
                    }
                    key="$.0"
                  >
                    <ListItemBase
                      aria-describedby={null}
                      aria-disabled={false}
                      aria-labelledby={null}
                      aria-selected={true}
                      data-key="$.0"
                      id="test-ID-option-$.0"
                      isDisabled={false}
                      isPadded={true}
                      key="$.0"
                      onClick={[Function]}
                      onDragStart={[Function]}
                      onFocus={[Function]}
                      onKeyDown={[Function]}
                      onKeyUp={[Function]}
                      onMouseDown={[Function]}
                      onMouseEnter={[Function]}
                      onMouseLeave={[Function]}
                      onMouseUp={[Function]}
                      onTouchCancel={[Function]}
                      onTouchEnd={[Function]}
                      onTouchMove={[Function]}
                      onTouchStart={[Function]}
                      role="option"
                      tabIndex={0}
                    >
                      <FocusRing
                        isInset={false}
                      >
                        <FocusRing
                          focusClass="md-focus-ring-wrapper children"
                          focusRingClass="md-focus-ring-wrapper children"
                          isInset={false}
                        >
                          <li
                            aria-describedby={null}
                            aria-disabled={false}
                            aria-labelledby={null}
                            aria-selected={true}
                            className="md-list-item-base-wrapper"
                            data-disabled={false}
                            data-interactive={true}
                            data-key="$.0"
                            data-padded={true}
                            data-shape="rectangle"
                            data-size={40}
                            id="test-ID-option-$.0"
                            onBlur={[Function]}
                            onClick={[Function]}
                            onDragStart={[Function]}
                            onFocus={[Function]}
                            onKeyDown={[Function]}
                            onKeyUp={[Function]}
                            onMouseDown={[Function]}
                            onMouseEnter={[Function]}
                            onMouseLeave={[Function]}
                            onMouseUp={[Function]}
                            onTouchCancel={[Function]}
                            onTouchEnd={[Function]}
                            onTouchMove={[Function]}
                            onTouchStart={[Function]}
                            role="option"
                            tabIndex={0}
                          >
                            <ListItemBaseSection
                              position="fill"
                              title="Item 1"
                            >
                              <div
                                data-position="fill"
                                title="Item 1"
                              >
                                Item 1
                              </div>
                            </ListItemBaseSection>
                            <ListItemBaseSection
                              position="end"
                            >
                              <div
                                data-position="end"
                              >
                                <Icon
                                  className="md-list-box-item-tick-icon"
                                  name="check"
                                  scale={16}
                                  strokeColor="none"
                                  weight="bold"
                                >
                                  <div
                                    className="md-icon-wrapper md-icon-auto-scales md-icon-scales md-list-box-item-tick-icon md-icon-no-shrink"
                                  >
                                    <svg
                                      className=""
                                      data-autoscale={false}
                                      data-scale={16}
                                      data-test="check"
                                      fill="currentColor"
                                      height="100%"
                                      style={
                                        Object {
                                          "stroke": "none",
                                        }
                                      }
                                      viewBox="0, 0, 32, 32"
                                      width="100%"
                                    />
                                  </div>
                                </Icon>
                              </div>
                            </ListItemBaseSection>
                          </li>
                        </FocusRing>
                      </FocusRing>
                    </ListItemBase>
                  </ListBoxItem>
                  <ListBoxItem
                    item={
                      Object {
                        "aria-label": undefined,
                        "childNodes": Object {
                          Symbol(Symbol.iterator): [Function],
                        },
                        "hasChildNodes": false,
                        "index": 1,
                        "key": "$.1",
                        "level": 0,
                        "nextKey": undefined,
                        "parentKey": null,
                        "prevKey": "$.0",
                        "props": Object {
                          "children": "Item 2",
                        },
                        "rendered": "Item 2",
                        "shouldInvalidate": undefined,
                        "textValue": "Item 2",
                        "type": "item",
                        "value": undefined,
                        "wrapper": undefined,
                      }
                    }
                    key="$.1"
                  >
                    <ListItemBase
                      aria-describedby={null}
                      aria-disabled={false}
                      aria-labelledby={null}
                      aria-selected={false}
                      data-key="$.1"
                      id="test-ID-option-$.1"
                      isDisabled={false}
                      isPadded={true}
                      key="$.1"
                      onClick={[Function]}
                      onDragStart={[Function]}
                      onFocus={[Function]}
                      onKeyDown={[Function]}
                      onKeyUp={[Function]}
                      onMouseDown={[Function]}
                      onMouseEnter={[Function]}
                      onMouseLeave={[Function]}
                      onMouseUp={[Function]}
                      onTouchCancel={[Function]}
                      onTouchEnd={[Function]}
                      onTouchMove={[Function]}
                      onTouchStart={[Function]}
                      role="option"
                      tabIndex={-1}
                    >
                      <FocusRing
                        isInset={false}
                      >
                        <FocusRing
                          focusClass="md-focus-ring-wrapper children"
                          focusRingClass="md-focus-ring-wrapper children"
                          isInset={false}
                        >
                          <li
                            aria-describedby={null}
                            aria-disabled={false}
                            aria-labelledby={null}
                            aria-selected={false}
                            className="md-list-item-base-wrapper"
                            data-disabled={false}
                            data-interactive={true}
                            data-key="$.1"
                            data-padded={true}
                            data-shape="rectangle"
                            data-size={40}
                            id="test-ID-option-$.1"
                            onBlur={[Function]}
                            onClick={[Function]}
                            onDragStart={[Function]}
                            onFocus={[Function]}
                            onKeyDown={[Function]}
                            onKeyUp={[Function]}
                            onMouseDown={[Function]}
                            onMouseEnter={[Function]}
                            onMouseLeave={[Function]}
                            onMouseUp={[Function]}
                            onTouchCancel={[Function]}
                            onTouchEnd={[Function]}
                            onTouchMove={[Function]}
                            onTouchStart={[Function]}
                            role="option"
                            tabIndex={-1}
                          >
                            <ListItemBaseSection
                              position="fill"
                              title="Item 2"
                            >
                              <div
                                data-position="fill"
                                title="Item 2"
                              >
                                Item 2
                              </div>
                            </ListItemBaseSection>
                          </li>
                        </FocusRing>
                      </FocusRing>
                    </ListItemBase>
                  </ListBoxItem>
                </ul>
              </FocusRing>
            </FocusRing>
          </MenuListBackground>
        </ListBoxBase>
        <DismissButton
          onDismiss={[Function]}
        >
          <VisuallyHidden>
            <div
              style={
                Object {
                  "border": 0,
                  "clip": "rect(0 0 0 0)",
                  "clipPath": "inset(50%)",
                  "height": 1,
                  "margin": "0 -1px -1px 0",
                  "overflow": "hidden",
                  "padding": 0,
                  "position": "absolute",
                  "whiteSpace": "nowrap",
                  "width": 1,
                }
              }
            >
              <button
                aria-label="Dismiss"
                onClick={[Function]}
                tabIndex={-1}
              />
            </div>
          </VisuallyHidden>
        </DismissButton>
      </div>
      <span
        data-focus-scope-end={true}
        hidden={true}
      />
    </FocusScope>
  </div>
</Select>
`;

exports[`Select snapshot should match snapshot with style 1`] = `
<Select
  id="test-id"
  label="test"
  style={
    Object {
      "color": "pink",
    }
  }
>
  <div
    className="md-select-wrapper"
    id="test-id"
    style={
      Object {
        "color": "pink",
      }
    }
  >
    <label
      id="test-ID"
      onClick={[Function]}
    >
      test
    </label>
    <HiddenSelect
      label="test"
      state={
        Object {
          "close": [Function],
          "collection": ListCollection {
            "firstKey": "$.0",
            "iterable": Object {
              Symbol(Symbol.iterator): [Function],
            },
            "keyMap": Map {
              "$.0" => Object {
                "aria-label": undefined,
                "childNodes": Object {
                  Symbol(Symbol.iterator): [Function],
                },
                "hasChildNodes": false,
                "index": 0,
                "key": "$.0",
                "level": 0,
                "nextKey": "$.1",
                "parentKey": null,
                "prevKey": undefined,
                "props": Object {
                  "children": "Item 1",
                },
                "rendered": "Item 1",
                "shouldInvalidate": undefined,
                "textValue": "Item 1",
                "type": "item",
                "value": undefined,
                "wrapper": undefined,
              },
              "$.1" => Object {
                "aria-label": undefined,
                "childNodes": Object {
                  Symbol(Symbol.iterator): [Function],
                },
                "hasChildNodes": false,
                "index": 1,
                "key": "$.1",
                "level": 0,
                "nextKey": undefined,
                "parentKey": null,
                "prevKey": "$.0",
                "props": Object {
                  "children": "Item 2",
                },
                "rendered": "Item 2",
                "shouldInvalidate": undefined,
                "textValue": "Item 2",
                "type": "item",
                "value": undefined,
                "wrapper": undefined,
              },
            },
            "lastKey": "$.1",
          },
          "disabledKeys": Set {},
          "focusStrategy": null,
          "isFocused": false,
          "isOpen": false,
          "open": [Function],
          "selectedItem": null,
          "selectedKey": null,
          "selectionManager": SelectionManager {
            "_isSelectAll": null,
            "allowsCellSelection": false,
            "collection": ListCollection {
              "firstKey": "$.0",
              "iterable": Object {
                Symbol(Symbol.iterator): [Function],
              },
              "keyMap": Map {
                "$.0" => Object {
                  "aria-label": undefined,
                  "childNodes": Object {
                    Symbol(Symbol.iterator): [Function],
                  },
                  "hasChildNodes": false,
                  "index": 0,
                  "key": "$.0",
                  "level": 0,
                  "nextKey": "$.1",
                  "parentKey": null,
                  "prevKey": undefined,
                  "props": Object {
                    "children": "Item 1",
                  },
                  "rendered": "Item 1",
                  "shouldInvalidate": undefined,
                  "textValue": "Item 1",
                  "type": "item",
                  "value": undefined,
                  "wrapper": undefined,
                },
                "$.1" => Object {
                  "aria-label": undefined,
                  "childNodes": Object {
                    Symbol(Symbol.iterator): [Function],
                  },
                  "hasChildNodes": false,
                  "index": 1,
                  "key": "$.1",
                  "level": 0,
                  "nextKey": undefined,
                  "parentKey": null,
                  "prevKey": "$.0",
                  "props": Object {
                    "children": "Item 2",
                  },
                  "rendered": "Item 2",
                  "shouldInvalidate": undefined,
                  "textValue": "Item 2",
                  "type": "item",
                  "value": undefined,
                  "wrapper": undefined,
                },
              },
              "lastKey": "$.1",
            },
            "state": Object {
              "childFocusStrategy": null,
              "disabledKeys": Set {},
              "disallowEmptySelection": true,
              "focusedKey": null,
              "isFocused": false,
              "selectedKeys": Set {},
              "selectionMode": "single",
              "setFocused": [Function],
              "setFocusedKey": [Function],
              "setSelectedKeys": [Function],
            },
          },
          "setFocused": [Function],
          "setSelectedKey": [Function],
          "toggle": [Function],
        }
      }
      triggerRef={
        Object {
          "current": <button
            aria-expanded="false"
            aria-haspopup="listbox"
            aria-labelledby="test-ID test-ID"
            class="md-select-dropdown-input"
            id="test-ID"
            type="button"
          >
            <span
              class="md-select-selected-item-wrapper"
              id="test-ID"
            />
            <span
              aria-hidden="true"
              class="md-select-icon-wrapper"
            >
              <div
                class="md-icon-wrapper md-icon-auto-scales md-icon-scales md-icon-no-shrink"
              >
                <svg
                  class=""
                  data-autoscale="false"
                  data-scale="16"
                  data-test="arrow-down"
                  fill="currentColor"
                  height="100%"
                  viewBox="0, 0, 32, 32"
                  width="100%"
                />
              </div>
            </span>
          </button>,
        }
      }
    >
      <div
        aria-hidden={true}
        style={
          Object {
            "border": 0,
            "clip": "rect(0 0 0 0)",
            "clipPath": "inset(50%)",
            "height": 1,
            "margin": "0 -1px -1px 0",
            "overflow": "hidden",
            "padding": 0,
            "position": "absolute",
            "whiteSpace": "nowrap",
            "width": 1,
          }
        }
      >
        <input
          onFocus={[Function]}
          style={
            Object {
              "fontSize": 16,
            }
          }
          tabIndex={-1}
          type="text"
        />
        <label>
          test
          <select
            onChange={[Function]}
            size={2}
            tabIndex={-1}
            value=""
          >
            <option />
            <option
              key="$.0"
              value="$.0"
            >
              Item 1
            </option>
            <option
              key="$.1"
              value="$.1"
            >
              Item 2
            </option>
          </select>
        </label>
      </div>
    </HiddenSelect>
    <FocusRing>
      <FocusRing
        focusClass="md-focus-ring-wrapper children"
        focusRingClass="md-focus-ring-wrapper children"
      >
        <button
          aria-controls={null}
          aria-expanded={false}
          aria-haspopup="listbox"
          aria-labelledby="test-ID test-ID"
          className="md-select-dropdown-input"
          id="test-ID"
          onBlur={[Function]}
          onClick={[Function]}
          onDragStart={[Function]}
          onFocus={[Function]}
          onKeyDown={[Function]}
          onKeyUp={[Function]}
          onMouseDown={[Function]}
          onMouseEnter={[Function]}
          onMouseLeave={[Function]}
          onMouseUp={[Function]}
          onTouchCancel={[Function]}
          onTouchEnd={[Function]}
          onTouchMove={[Function]}
          onTouchStart={[Function]}
          type="button"
        >
          <span
            className="md-select-selected-item-wrapper"
            id="test-ID"
          />
          <span
            aria-hidden="true"
            className="md-select-icon-wrapper"
          >
            <Icon
              name="arrow-down"
              scale={16}
              weight="bold"
            >
              <div
                className="md-icon-wrapper md-icon-auto-scales md-icon-scales md-icon-no-shrink"
              >
                <svg
                  className=""
                  data-autoscale={false}
                  data-scale={16}
                  data-test="arrow-down"
                  fill="currentColor"
                  height="100%"
                  style={Object {}}
                  viewBox="0, 0, 32, 32"
                  width="100%"
                />
              </div>
            </Icon>
          </span>
        </button>
      </FocusRing>
    </FocusRing>
  </div>
</Select>
`;

exports[`Select snapshot should match snapshot with title 1`] = `
<Select
  label="test"
  title="Example text"
>
  <div
    className="md-select-wrapper"
  >
    <label
      id="test-ID"
      onClick={[Function]}
    >
      test
    </label>
    <HiddenSelect
      label="test"
      state={
        Object {
          "close": [Function],
          "collection": ListCollection {
            "firstKey": "$.0",
            "iterable": Object {
              Symbol(Symbol.iterator): [Function],
            },
            "keyMap": Map {
              "$.0" => Object {
                "aria-label": undefined,
                "childNodes": Object {
                  Symbol(Symbol.iterator): [Function],
                },
                "hasChildNodes": false,
                "index": 0,
                "key": "$.0",
                "level": 0,
                "nextKey": "$.1",
                "parentKey": null,
                "prevKey": undefined,
                "props": Object {
                  "children": "Item 1",
                },
                "rendered": "Item 1",
                "shouldInvalidate": undefined,
                "textValue": "Item 1",
                "type": "item",
                "value": undefined,
                "wrapper": undefined,
              },
              "$.1" => Object {
                "aria-label": undefined,
                "childNodes": Object {
                  Symbol(Symbol.iterator): [Function],
                },
                "hasChildNodes": false,
                "index": 1,
                "key": "$.1",
                "level": 0,
                "nextKey": undefined,
                "parentKey": null,
                "prevKey": "$.0",
                "props": Object {
                  "children": "Item 2",
                },
                "rendered": "Item 2",
                "shouldInvalidate": undefined,
                "textValue": "Item 2",
                "type": "item",
                "value": undefined,
                "wrapper": undefined,
              },
            },
            "lastKey": "$.1",
          },
          "disabledKeys": Set {},
          "focusStrategy": null,
          "isFocused": false,
          "isOpen": false,
          "open": [Function],
          "selectedItem": null,
          "selectedKey": null,
          "selectionManager": SelectionManager {
            "_isSelectAll": null,
            "allowsCellSelection": false,
            "collection": ListCollection {
              "firstKey": "$.0",
              "iterable": Object {
                Symbol(Symbol.iterator): [Function],
              },
              "keyMap": Map {
                "$.0" => Object {
                  "aria-label": undefined,
                  "childNodes": Object {
                    Symbol(Symbol.iterator): [Function],
                  },
                  "hasChildNodes": false,
                  "index": 0,
                  "key": "$.0",
                  "level": 0,
                  "nextKey": "$.1",
                  "parentKey": null,
                  "prevKey": undefined,
                  "props": Object {
                    "children": "Item 1",
                  },
                  "rendered": "Item 1",
                  "shouldInvalidate": undefined,
                  "textValue": "Item 1",
                  "type": "item",
                  "value": undefined,
                  "wrapper": undefined,
                },
                "$.1" => Object {
                  "aria-label": undefined,
                  "childNodes": Object {
                    Symbol(Symbol.iterator): [Function],
                  },
                  "hasChildNodes": false,
                  "index": 1,
                  "key": "$.1",
                  "level": 0,
                  "nextKey": undefined,
                  "parentKey": null,
                  "prevKey": "$.0",
                  "props": Object {
                    "children": "Item 2",
                  },
                  "rendered": "Item 2",
                  "shouldInvalidate": undefined,
                  "textValue": "Item 2",
                  "type": "item",
                  "value": undefined,
                  "wrapper": undefined,
                },
              },
              "lastKey": "$.1",
            },
            "state": Object {
              "childFocusStrategy": null,
              "disabledKeys": Set {},
              "disallowEmptySelection": true,
              "focusedKey": null,
              "isFocused": false,
              "selectedKeys": Set {},
              "selectionMode": "single",
              "setFocused": [Function],
              "setFocusedKey": [Function],
              "setSelectedKeys": [Function],
            },
          },
          "setFocused": [Function],
          "setSelectedKey": [Function],
          "toggle": [Function],
        }
      }
      triggerRef={
        Object {
          "current": <button
            aria-expanded="false"
            aria-haspopup="listbox"
            aria-labelledby="test-ID test-ID"
            class="md-select-dropdown-input"
            id="test-ID"
            title="Example text"
            type="button"
          >
            <span
              class="md-select-selected-item-wrapper"
              id="test-ID"
            />
            <span
              aria-hidden="true"
              class="md-select-icon-wrapper"
            >
              <div
                class="md-icon-wrapper md-icon-auto-scales md-icon-scales md-icon-no-shrink"
              >
                <svg
                  class=""
                  data-autoscale="false"
                  data-scale="16"
                  data-test="arrow-down"
                  fill="currentColor"
                  height="100%"
                  viewBox="0, 0, 32, 32"
                  width="100%"
                />
              </div>
            </span>
          </button>,
        }
      }
    >
      <div
        aria-hidden={true}
        style={
          Object {
            "border": 0,
            "clip": "rect(0 0 0 0)",
            "clipPath": "inset(50%)",
            "height": 1,
            "margin": "0 -1px -1px 0",
            "overflow": "hidden",
            "padding": 0,
            "position": "absolute",
            "whiteSpace": "nowrap",
            "width": 1,
          }
        }
      >
        <input
          onFocus={[Function]}
          style={
            Object {
              "fontSize": 16,
            }
          }
          tabIndex={-1}
          type="text"
        />
        <label>
          test
          <select
            onChange={[Function]}
            size={2}
            tabIndex={-1}
            value=""
          >
            <option />
            <option
              key="$.0"
              value="$.0"
            >
              Item 1
            </option>
            <option
              key="$.1"
              value="$.1"
            >
              Item 2
            </option>
          </select>
        </label>
      </div>
    </HiddenSelect>
    <FocusRing>
      <FocusRing
        focusClass="md-focus-ring-wrapper children"
        focusRingClass="md-focus-ring-wrapper children"
      >
        <button
          aria-controls={null}
          aria-expanded={false}
          aria-haspopup="listbox"
          aria-labelledby="test-ID test-ID"
          className="md-select-dropdown-input"
          id="test-ID"
          onBlur={[Function]}
          onClick={[Function]}
          onDragStart={[Function]}
          onFocus={[Function]}
          onKeyDown={[Function]}
          onKeyUp={[Function]}
          onMouseDown={[Function]}
          onMouseEnter={[Function]}
          onMouseLeave={[Function]}
          onMouseUp={[Function]}
          onTouchCancel={[Function]}
          onTouchEnd={[Function]}
          onTouchMove={[Function]}
          onTouchStart={[Function]}
          title="Example text"
          type="button"
        >
          <span
            className="md-select-selected-item-wrapper"
            id="test-ID"
          />
          <span
            aria-hidden="true"
            className="md-select-icon-wrapper"
          >
            <Icon
              name="arrow-down"
              scale={16}
              weight="bold"
            >
              <div
                className="md-icon-wrapper md-icon-auto-scales md-icon-scales md-icon-no-shrink"
              >
                <svg
                  className=""
                  data-autoscale={false}
                  data-scale={16}
                  data-test="arrow-down"
                  fill="currentColor"
                  height="100%"
                  style={Object {}}
                  viewBox="0, 0, 32, 32"
                  width="100%"
                />
              </div>
            </Icon>
          </span>
        </button>
      </FocusRing>
    </FocusRing>
  </div>
</Select>
`;
