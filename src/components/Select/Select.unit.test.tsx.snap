// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Select snapshot should match snapshot 1`] = `
<Select
  id="test-id"
  label="test"
>
  <div
    className="md-select-wrapper"
    id="test-id"
    style={
      {
        "--local-width": "100%",
      }
    }
  >
    <label
      id="test-ID"
      onClick={[Function]}
    >
      <Text>
        <p
          className="md-text-wrapper"
          data-type="body-primary"
        >
          test
        </p>
      </Text>
    </label>
    <HiddenSelect
      label="test"
      state={
        {
          "close": [Function],
          "collection": ListCollection {
            "firstKey": "$.0",
            "iterable": {
              Symbol(Symbol.iterator): [Function],
            },
            "keyMap": Map {
              "$.0" => {
                "aria-label": undefined,
                "childNodes": {
                  Symbol(Symbol.iterator): [Function],
                },
                "hasChildNodes": false,
                "index": 0,
                "key": "$.0",
                "level": 0,
                "nextKey": "$.1",
                "parentKey": null,
                "prevKey": undefined,
                "props": {
                  "children": "Item 1",
                },
                "rendered": "Item 1",
                "shouldInvalidate": undefined,
                "textValue": "Item 1",
                "type": "item",
                "value": undefined,
                "wrapper": undefined,
              },
              "$.1" => {
                "aria-label": undefined,
                "childNodes": {
                  Symbol(Symbol.iterator): [Function],
                },
                "hasChildNodes": false,
                "index": 1,
                "key": "$.1",
                "level": 0,
                "nextKey": undefined,
                "parentKey": null,
                "prevKey": "$.0",
                "props": {
                  "children": "Item 2",
                },
                "rendered": "Item 2",
                "shouldInvalidate": undefined,
                "textValue": "Item 2",
                "type": "item",
                "value": undefined,
                "wrapper": undefined,
              },
            },
            "lastKey": "$.1",
          },
          "disabledKeys": Set {},
          "focusStrategy": null,
          "isFocused": false,
          "isOpen": false,
          "open": [Function],
          "selectedItem": null,
          "selectedKey": null,
          "selectionManager": SelectionManager {
            "_isSelectAll": null,
            "allowsCellSelection": false,
            "collection": ListCollection {
              "firstKey": "$.0",
              "iterable": {
                Symbol(Symbol.iterator): [Function],
              },
              "keyMap": Map {
                "$.0" => {
                  "aria-label": undefined,
                  "childNodes": {
                    Symbol(Symbol.iterator): [Function],
                  },
                  "hasChildNodes": false,
                  "index": 0,
                  "key": "$.0",
                  "level": 0,
                  "nextKey": "$.1",
                  "parentKey": null,
                  "prevKey": undefined,
                  "props": {
                    "children": "Item 1",
                  },
                  "rendered": "Item 1",
                  "shouldInvalidate": undefined,
                  "textValue": "Item 1",
                  "type": "item",
                  "value": undefined,
                  "wrapper": undefined,
                },
                "$.1" => {
                  "aria-label": undefined,
                  "childNodes": {
                    Symbol(Symbol.iterator): [Function],
                  },
                  "hasChildNodes": false,
                  "index": 1,
                  "key": "$.1",
                  "level": 0,
                  "nextKey": undefined,
                  "parentKey": null,
                  "prevKey": "$.0",
                  "props": {
                    "children": "Item 2",
                  },
                  "rendered": "Item 2",
                  "shouldInvalidate": undefined,
                  "textValue": "Item 2",
                  "type": "item",
                  "value": undefined,
                  "wrapper": undefined,
                },
              },
              "lastKey": "$.1",
            },
            "state": {
              "childFocusStrategy": null,
              "disabledKeys": Set {},
              "disallowEmptySelection": true,
              "focusedKey": null,
              "isFocused": false,
              "selectedKeys": Set {},
              "selectionMode": "single",
              "setFocused": [Function],
              "setFocusedKey": [Function],
              "setSelectedKeys": [Function],
            },
          },
          "setFocused": [Function],
          "setSelectedKey": [Function],
          "toggle": [Function],
        }
      }
      triggerRef={
        {
          "current": <button
            aria-controls="test-id"
            aria-expanded="false"
            aria-haspopup="listbox"
            aria-labelledby="test-ID test-ID"
            class="md-select-dropdown-input"
            id="test-id"
            role="combobox"
            type="button"
          >
            <span
              class="md-select-selected-item-wrapper"
              id="test-ID"
            />
            <span
              aria-hidden="true"
              class="md-select-icon-wrapper"
            >
              <div
                aria-hidden="true"
                class="md-icon-wrapper md-icon-auto-scales md-icon-scales md-icon-no-shrink"
                role="img"
              >
                <svg
                  aria-hidden="true"
                  class=""
                  data-autoscale="false"
                  data-scale="16"
                  data-test="arrow-down"
                  fill="currentColor"
                  height="100%"
                  viewBox="0, 0, 32, 32"
                  width="100%"
                />
              </div>
            </span>
          </button>,
        }
      }
    >
      <div
        aria-hidden={true}
        style={
          {
            "border": 0,
            "clip": "rect(0 0 0 0)",
            "clipPath": "inset(50%)",
            "height": 1,
            "margin": "0 -1px -1px 0",
            "overflow": "hidden",
            "padding": 0,
            "position": "absolute",
            "whiteSpace": "nowrap",
            "width": 1,
          }
        }
      >
        <input
          onFocus={[Function]}
          style={
            {
              "fontSize": 16,
            }
          }
          tabIndex={-1}
          type="text"
        />
        <label>
          test
          <select
            onChange={[Function]}
            size={2}
            tabIndex={-1}
            value=""
          >
            <option />
            <option
              key="$.0"
              value="$.0"
            >
              Item 1
            </option>
            <option
              key="$.1"
              value="$.1"
            >
              Item 2
            </option>
          </select>
        </label>
      </div>
    </HiddenSelect>
    <Popover
      className="md-select-popover"
      hideOnEsc={false}
      interactive={true}
      onClickOutside={[Function]}
      onHide={[Function]}
      onKeyDown={[Function]}
      placement="bottom"
      role={null}
      setInstance={[Function]}
      showArrow={false}
      strategy="absolute"
      style={
        {
          "maxHeight": "none",
        }
      }
      trigger="manual"
      triggerComponent={
        <button
          aria-activedescendant={null}
          aria-controls="test-id"
          aria-expanded={false}
          aria-haspopup="listbox"
          aria-labelledby="test-ID test-ID"
          className="md-select-dropdown-input"
          id="test-id"
          onBlur={[Function]}
          onClick={[Function]}
          onDragStart={[Function]}
          onFocus={[Function]}
          onKeyDown={[Function]}
          onKeyUp={[Function]}
          onMouseDown={[Function]}
          onMouseEnter={[Function]}
          onMouseLeave={[Function]}
          onMouseUp={[Function]}
          onTouchCancel={[Function]}
          onTouchEnd={[Function]}
          onTouchMove={[Function]}
          onTouchStart={[Function]}
          role="combobox"
          type="button"
        >
          <span
            className="md-select-selected-item-wrapper"
            id="test-ID"
          />
          <span
            aria-hidden="true"
            className="md-select-icon-wrapper"
          >
            <Icon
              name="arrow-down"
              scale={16}
              weight="bold"
            />
          </span>
        </button>
      }
    >
      <LazyTippy
        animation={false}
        appendTo="parent"
        hideOnClick={false}
        interactive={true}
        offset={
          [
            0,
            5,
          ]
        }
        onClickOutside={[Function]}
        onHidden={[Function]}
        onHide={[Function]}
        placement="bottom"
        plugins={
          [
            {
              "fn": [Function],
              "name": "addBackdropPlugin",
            },
          ]
        }
        popperOptions={
          {
            "modifiers": [
              {
                "enabled": false,
                "name": "arrow",
                "options": {
                  "element": "#arrow1",
                  "padding": 5,
                },
              },
              {
                "name": "preventOverflow",
                "options": {
                  "altAxis": true,
                  "boundariesElement": "scrollParent",
                  "padding": 8,
                },
              },
            ],
            "strategy": "absolute",
          }
        }
        render={[Function]}
        setInstance={[Function]}
        trigger="manual"
      >
        <ForwardRef(TippyWrapper)
          animation={false}
          appendTo="parent"
          hideOnClick={false}
          interactive={true}
          offset={
            [
              0,
              5,
            ]
          }
          onClickOutside={[Function]}
          onHidden={[Function]}
          onHide={[Function]}
          placement="bottom"
          plugins={
            [
              {
                "fn": [Function],
              },
              {
                "fn": [Function],
              },
              {
                "fn": [Function],
              },
              {
                "fn": [Function],
                "name": "addBackdropPlugin",
              },
            ]
          }
          popperOptions={
            {
              "modifiers": [
                {
                  "enabled": false,
                  "name": "arrow",
                  "options": {
                    "element": "#arrow1",
                    "padding": 5,
                  },
                },
                {
                  "name": "preventOverflow",
                  "options": {
                    "altAxis": true,
                    "boundariesElement": "scrollParent",
                    "padding": 8,
                  },
                },
              ],
              "strategy": "absolute",
            }
          }
          render={[Function]}
          trigger="manual"
        >
          <Tippy
            animation={false}
            appendTo="parent"
            hideOnClick={false}
            interactive={true}
            offset={
              [
                0,
                5,
              ]
            }
            onClickOutside={[Function]}
            onHidden={[Function]}
            onHide={[Function]}
            placement="bottom"
            plugins={
              [
                {
                  "fn": [Function],
                },
                {
                  "fn": [Function],
                },
                {
                  "fn": [Function],
                },
                {
                  "fn": [Function],
                  "name": "addBackdropPlugin",
                },
              ]
            }
            popperOptions={
              {
                "modifiers": [
                  {
                    "enabled": false,
                    "name": "arrow",
                    "options": {
                      "element": "#arrow1",
                      "padding": 5,
                    },
                  },
                  {
                    "name": "preventOverflow",
                    "options": {
                      "altAxis": true,
                      "boundariesElement": "scrollParent",
                      "padding": 8,
                    },
                  },
                ],
                "strategy": "absolute",
              }
            }
            render={[Function]}
            trigger="manual"
          >
            <button
              aria-activedescendant={null}
              aria-controls="test-id"
              aria-expanded={false}
              aria-haspopup="listbox"
              aria-labelledby="test-ID test-ID"
              className="md-select-dropdown-input"
              id="test-id"
              onBlur={[Function]}
              onClick={[Function]}
              onDragStart={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              onMouseDown={[Function]}
              onMouseEnter={[Function]}
              onMouseLeave={[Function]}
              onMouseUp={[Function]}
              onTouchCancel={[Function]}
              onTouchEnd={[Function]}
              onTouchMove={[Function]}
              onTouchStart={[Function]}
              role="combobox"
              type="button"
            >
              <span
                className="md-select-selected-item-wrapper"
                id="test-ID"
              />
              <span
                aria-hidden="true"
                className="md-select-icon-wrapper"
              >
                <Icon
                  name="arrow-down"
                  scale={16}
                  weight="bold"
                >
                  <div
                    aria-hidden="true"
                    className="md-icon-wrapper md-icon-auto-scales md-icon-scales md-icon-no-shrink"
                    role="img"
                  >
                    <svg
                      aria-hidden="true"
                      className=""
                      data-autoscale={false}
                      data-scale={16}
                      data-test="arrow-down"
                      fill="currentColor"
                      height="100%"
                      style={{}}
                      viewBox="0, 0, 32, 32"
                      width="100%"
                    />
                  </div>
                </Icon>
              </span>
            </button>
            <Portal
              containerInfo={
                <div
                  data-tippy-root=""
                  id="tippy-1"
                  style="z-index: 9999;"
                >
                  
                </div>
              }
            />
          </Tippy>
        </ForwardRef(TippyWrapper)>
      </LazyTippy>
    </Popover>
  </div>
</Select>
`;

exports[`Select snapshot should match snapshot before and after opening select dropdown 1`] = `
<Select
  id="test-id"
  label="test"
>
  <div
    className="md-select-wrapper"
    id="test-id"
    style={
      {
        "--local-width": "100%",
      }
    }
  >
    <label
      id="test-ID"
      onClick={[Function]}
    >
      <Text>
        <p
          className="md-text-wrapper"
          data-type="body-primary"
        >
          test
        </p>
      </Text>
    </label>
    <HiddenSelect
      label="test"
      state={
        {
          "close": [Function],
          "collection": ListCollection {
            "firstKey": "$.0",
            "iterable": {
              Symbol(Symbol.iterator): [Function],
            },
            "keyMap": Map {
              "$.0" => {
                "aria-label": undefined,
                "childNodes": {
                  Symbol(Symbol.iterator): [Function],
                },
                "hasChildNodes": false,
                "index": 0,
                "key": "$.0",
                "level": 0,
                "nextKey": "$.1",
                "parentKey": null,
                "prevKey": undefined,
                "props": {
                  "children": "Item 1",
                },
                "rendered": "Item 1",
                "shouldInvalidate": undefined,
                "textValue": "Item 1",
                "type": "item",
                "value": undefined,
                "wrapper": undefined,
              },
              "$.1" => {
                "aria-label": undefined,
                "childNodes": {
                  Symbol(Symbol.iterator): [Function],
                },
                "hasChildNodes": false,
                "index": 1,
                "key": "$.1",
                "level": 0,
                "nextKey": undefined,
                "parentKey": null,
                "prevKey": "$.0",
                "props": {
                  "children": "Item 2",
                },
                "rendered": "Item 2",
                "shouldInvalidate": undefined,
                "textValue": "Item 2",
                "type": "item",
                "value": undefined,
                "wrapper": undefined,
              },
            },
            "lastKey": "$.1",
          },
          "disabledKeys": Set {},
          "focusStrategy": null,
          "isFocused": false,
          "isOpen": false,
          "open": [Function],
          "selectedItem": null,
          "selectedKey": null,
          "selectionManager": SelectionManager {
            "_isSelectAll": null,
            "allowsCellSelection": false,
            "collection": ListCollection {
              "firstKey": "$.0",
              "iterable": {
                Symbol(Symbol.iterator): [Function],
              },
              "keyMap": Map {
                "$.0" => {
                  "aria-label": undefined,
                  "childNodes": {
                    Symbol(Symbol.iterator): [Function],
                  },
                  "hasChildNodes": false,
                  "index": 0,
                  "key": "$.0",
                  "level": 0,
                  "nextKey": "$.1",
                  "parentKey": null,
                  "prevKey": undefined,
                  "props": {
                    "children": "Item 1",
                  },
                  "rendered": "Item 1",
                  "shouldInvalidate": undefined,
                  "textValue": "Item 1",
                  "type": "item",
                  "value": undefined,
                  "wrapper": undefined,
                },
                "$.1" => {
                  "aria-label": undefined,
                  "childNodes": {
                    Symbol(Symbol.iterator): [Function],
                  },
                  "hasChildNodes": false,
                  "index": 1,
                  "key": "$.1",
                  "level": 0,
                  "nextKey": undefined,
                  "parentKey": null,
                  "prevKey": "$.0",
                  "props": {
                    "children": "Item 2",
                  },
                  "rendered": "Item 2",
                  "shouldInvalidate": undefined,
                  "textValue": "Item 2",
                  "type": "item",
                  "value": undefined,
                  "wrapper": undefined,
                },
              },
              "lastKey": "$.1",
            },
            "state": {
              "childFocusStrategy": null,
              "disabledKeys": Set {},
              "disallowEmptySelection": true,
              "focusedKey": null,
              "isFocused": false,
              "selectedKeys": Set {},
              "selectionMode": "single",
              "setFocused": [Function],
              "setFocusedKey": [Function],
              "setSelectedKeys": [Function],
            },
          },
          "setFocused": [Function],
          "setSelectedKey": [Function],
          "toggle": [Function],
        }
      }
      triggerRef={
        {
          "current": <button
            aria-controls="test-id"
            aria-expanded="false"
            aria-haspopup="listbox"
            aria-labelledby="test-ID test-ID"
            class="md-select-dropdown-input"
            id="test-ID"
            role="combobox"
            type="button"
          >
            <span
              class="md-select-selected-item-wrapper"
              id="test-ID"
            />
            <span
              aria-hidden="true"
              class="md-select-icon-wrapper"
            >
              <div
                aria-hidden="true"
                class="md-icon-wrapper md-icon-auto-scales md-icon-scales md-icon-no-shrink"
                role="img"
              >
                <svg
                  aria-hidden="true"
                  class=""
                  data-autoscale="false"
                  data-scale="16"
                  data-test="arrow-down"
                  fill="currentColor"
                  height="100%"
                  viewBox="0, 0, 32, 32"
                  width="100%"
                />
              </div>
            </span>
          </button>,
        }
      }
    >
      <div
        aria-hidden={true}
        style={
          {
            "border": 0,
            "clip": "rect(0 0 0 0)",
            "clipPath": "inset(50%)",
            "height": 1,
            "margin": "0 -1px -1px 0",
            "overflow": "hidden",
            "padding": 0,
            "position": "absolute",
            "whiteSpace": "nowrap",
            "width": 1,
          }
        }
      >
        <input
          onFocus={[Function]}
          style={
            {
              "fontSize": 16,
            }
          }
          tabIndex={-1}
          type="text"
        />
        <label>
          test
          <select
            onChange={[Function]}
            size={2}
            tabIndex={-1}
            value=""
          >
            <option />
            <option
              key="$.0"
              value="$.0"
            >
              Item 1
            </option>
            <option
              key="$.1"
              value="$.1"
            >
              Item 2
            </option>
          </select>
        </label>
      </div>
    </HiddenSelect>
    <Popover
      className="md-select-popover"
      hideOnEsc={false}
      interactive={true}
      onClickOutside={[Function]}
      onHide={[Function]}
      onKeyDown={[Function]}
      placement="bottom"
      role={null}
      setInstance={[Function]}
      showArrow={false}
      strategy="absolute"
      style={
        {
          "maxHeight": "none",
        }
      }
      trigger="manual"
      triggerComponent={
        <button
          aria-activedescendant={null}
          aria-controls="test-id"
          aria-expanded={false}
          aria-haspopup="listbox"
          aria-labelledby="test-ID test-ID"
          className="md-select-dropdown-input"
          id="test-ID"
          onBlur={[Function]}
          onClick={[Function]}
          onDragStart={[Function]}
          onFocus={[Function]}
          onKeyDown={[Function]}
          onKeyUp={[Function]}
          onMouseDown={[Function]}
          onMouseEnter={[Function]}
          onMouseLeave={[Function]}
          onMouseUp={[Function]}
          onTouchCancel={[Function]}
          onTouchEnd={[Function]}
          onTouchMove={[Function]}
          onTouchStart={[Function]}
          role="combobox"
          type="button"
        >
          <span
            className="md-select-selected-item-wrapper"
            id="test-ID"
          />
          <span
            aria-hidden="true"
            className="md-select-icon-wrapper"
          >
            <Icon
              name="arrow-down"
              scale={16}
              weight="bold"
            />
          </span>
        </button>
      }
    >
      <LazyTippy
        animation={false}
        appendTo="parent"
        hideOnClick={false}
        interactive={true}
        offset={
          [
            0,
            5,
          ]
        }
        onClickOutside={[Function]}
        onHidden={[Function]}
        onHide={[Function]}
        placement="bottom"
        plugins={
          [
            {
              "fn": [Function],
              "name": "addBackdropPlugin",
            },
          ]
        }
        popperOptions={
          {
            "modifiers": [
              {
                "enabled": false,
                "name": "arrow",
                "options": {
                  "element": "#arrow1",
                  "padding": 5,
                },
              },
              {
                "name": "preventOverflow",
                "options": {
                  "altAxis": true,
                  "boundariesElement": "scrollParent",
                  "padding": 8,
                },
              },
            ],
            "strategy": "absolute",
          }
        }
        render={[Function]}
        setInstance={[Function]}
        trigger="manual"
      >
        <ForwardRef(TippyWrapper)
          animation={false}
          appendTo="parent"
          hideOnClick={false}
          interactive={true}
          offset={
            [
              0,
              5,
            ]
          }
          onClickOutside={[Function]}
          onHidden={[Function]}
          onHide={[Function]}
          placement="bottom"
          plugins={
            [
              {
                "fn": [Function],
              },
              {
                "fn": [Function],
              },
              {
                "fn": [Function],
              },
              {
                "fn": [Function],
                "name": "addBackdropPlugin",
              },
            ]
          }
          popperOptions={
            {
              "modifiers": [
                {
                  "enabled": false,
                  "name": "arrow",
                  "options": {
                    "element": "#arrow1",
                    "padding": 5,
                  },
                },
                {
                  "name": "preventOverflow",
                  "options": {
                    "altAxis": true,
                    "boundariesElement": "scrollParent",
                    "padding": 8,
                  },
                },
              ],
              "strategy": "absolute",
            }
          }
          render={[Function]}
          trigger="manual"
        >
          <Tippy
            animation={false}
            appendTo="parent"
            hideOnClick={false}
            interactive={true}
            offset={
              [
                0,
                5,
              ]
            }
            onClickOutside={[Function]}
            onHidden={[Function]}
            onHide={[Function]}
            placement="bottom"
            plugins={
              [
                {
                  "fn": [Function],
                },
                {
                  "fn": [Function],
                },
                {
                  "fn": [Function],
                },
                {
                  "fn": [Function],
                  "name": "addBackdropPlugin",
                },
              ]
            }
            popperOptions={
              {
                "modifiers": [
                  {
                    "enabled": false,
                    "name": "arrow",
                    "options": {
                      "element": "#arrow1",
                      "padding": 5,
                    },
                  },
                  {
                    "name": "preventOverflow",
                    "options": {
                      "altAxis": true,
                      "boundariesElement": "scrollParent",
                      "padding": 8,
                    },
                  },
                ],
                "strategy": "absolute",
              }
            }
            render={[Function]}
            trigger="manual"
          >
            <button
              aria-activedescendant={null}
              aria-controls="test-id"
              aria-expanded={false}
              aria-haspopup="listbox"
              aria-labelledby="test-ID test-ID"
              className="md-select-dropdown-input"
              id="test-ID"
              onBlur={[Function]}
              onClick={[Function]}
              onDragStart={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              onMouseDown={[Function]}
              onMouseEnter={[Function]}
              onMouseLeave={[Function]}
              onMouseUp={[Function]}
              onTouchCancel={[Function]}
              onTouchEnd={[Function]}
              onTouchMove={[Function]}
              onTouchStart={[Function]}
              role="combobox"
              type="button"
            >
              <span
                className="md-select-selected-item-wrapper"
                id="test-ID"
              />
              <span
                aria-hidden="true"
                className="md-select-icon-wrapper"
              >
                <Icon
                  name="arrow-down"
                  scale={16}
                  weight="bold"
                >
                  <div
                    aria-hidden="true"
                    className="md-icon-wrapper md-icon-auto-scales md-icon-scales md-icon-no-shrink"
                    role="img"
                  >
                    <svg
                      aria-hidden="true"
                      className=""
                      data-autoscale={false}
                      data-scale={16}
                      data-test="arrow-down"
                      fill="currentColor"
                      height="100%"
                      style={{}}
                      viewBox="0, 0, 32, 32"
                      width="100%"
                    />
                  </div>
                </Icon>
              </span>
            </button>
            <Portal
              containerInfo={
                <div
                  data-tippy-root=""
                  id="tippy-12"
                  style="z-index: 9999;"
                >
                  
                </div>
              }
            />
          </Tippy>
        </ForwardRef(TippyWrapper)>
      </LazyTippy>
    </Popover>
  </div>
</Select>
`;

exports[`Select snapshot should match snapshot before and after opening select dropdown 2`] = `
<Select
  id="test-id"
  label="test"
>
  <div
    className="md-select-wrapper"
    id="test-id"
    style={
      {
        "--local-width": "100%",
      }
    }
  >
    <label
      id="test-ID"
      onClick={[Function]}
    >
      <Text>
        <p
          className="md-text-wrapper"
          data-type="body-primary"
        >
          test
        </p>
      </Text>
    </label>
    <HiddenSelect
      label="test"
      state={
        {
          "close": [Function],
          "collection": ListCollection {
            "firstKey": "$.0",
            "iterable": {
              Symbol(Symbol.iterator): [Function],
            },
            "keyMap": Map {
              "$.0" => {
                "aria-label": undefined,
                "childNodes": {
                  Symbol(Symbol.iterator): [Function],
                },
                "hasChildNodes": false,
                "index": 0,
                "key": "$.0",
                "level": 0,
                "nextKey": "$.1",
                "parentKey": null,
                "prevKey": undefined,
                "props": {
                  "children": "Item 1",
                },
                "rendered": "Item 1",
                "shouldInvalidate": undefined,
                "textValue": "Item 1",
                "type": "item",
                "value": undefined,
                "wrapper": undefined,
              },
              "$.1" => {
                "aria-label": undefined,
                "childNodes": {
                  Symbol(Symbol.iterator): [Function],
                },
                "hasChildNodes": false,
                "index": 1,
                "key": "$.1",
                "level": 0,
                "nextKey": undefined,
                "parentKey": null,
                "prevKey": "$.0",
                "props": {
                  "children": "Item 2",
                },
                "rendered": "Item 2",
                "shouldInvalidate": undefined,
                "textValue": "Item 2",
                "type": "item",
                "value": undefined,
                "wrapper": undefined,
              },
            },
            "lastKey": "$.1",
          },
          "disabledKeys": Set {},
          "focusStrategy": "first",
          "isFocused": false,
          "isOpen": true,
          "open": [Function],
          "selectedItem": null,
          "selectedKey": null,
          "selectionManager": SelectionManager {
            "_isSelectAll": null,
            "allowsCellSelection": false,
            "collection": ListCollection {
              "firstKey": "$.0",
              "iterable": {
                Symbol(Symbol.iterator): [Function],
              },
              "keyMap": Map {
                "$.0" => {
                  "aria-label": undefined,
                  "childNodes": {
                    Symbol(Symbol.iterator): [Function],
                  },
                  "hasChildNodes": false,
                  "index": 0,
                  "key": "$.0",
                  "level": 0,
                  "nextKey": "$.1",
                  "parentKey": null,
                  "prevKey": undefined,
                  "props": {
                    "children": "Item 1",
                  },
                  "rendered": "Item 1",
                  "shouldInvalidate": undefined,
                  "textValue": "Item 1",
                  "type": "item",
                  "value": undefined,
                  "wrapper": undefined,
                },
                "$.1" => {
                  "aria-label": undefined,
                  "childNodes": {
                    Symbol(Symbol.iterator): [Function],
                  },
                  "hasChildNodes": false,
                  "index": 1,
                  "key": "$.1",
                  "level": 0,
                  "nextKey": undefined,
                  "parentKey": null,
                  "prevKey": "$.0",
                  "props": {
                    "children": "Item 2",
                  },
                  "rendered": "Item 2",
                  "shouldInvalidate": undefined,
                  "textValue": "Item 2",
                  "type": "item",
                  "value": undefined,
                  "wrapper": undefined,
                },
              },
              "lastKey": "$.1",
            },
            "state": {
              "childFocusStrategy": "first",
              "disabledKeys": Set {},
              "disallowEmptySelection": true,
              "focusedKey": "$.0",
              "isFocused": true,
              "selectedKeys": Set {},
              "selectionMode": "single",
              "setFocused": [Function],
              "setFocusedKey": [Function],
              "setSelectedKeys": [Function],
            },
          },
          "setFocused": [Function],
          "setSelectedKey": [Function],
          "toggle": [Function],
        }
      }
      triggerRef={
        {
          "current": <button
            aria-activedescendant="test-ID-option-$.0"
            aria-controls="test-id"
            aria-expanded="true"
            aria-haspopup="listbox"
            aria-labelledby="test-ID test-ID"
            class="md-select-dropdown-input md-select-open"
            id="test-ID"
            role="combobox"
            type="button"
          >
            <span
              class="md-select-selected-item-wrapper"
              id="test-ID"
            />
            <span
              aria-hidden="true"
              class="md-select-icon-wrapper"
            >
              <div
                aria-hidden="true"
                class="md-icon-wrapper md-icon-auto-scales md-icon-scales md-icon-no-shrink"
                role="img"
              >
                <svg
                  aria-hidden="true"
                  class=""
                  data-autoscale="false"
                  data-scale="16"
                  data-test="arrow-up"
                  fill="currentColor"
                  height="100%"
                  viewBox="0, 0, 32, 32"
                  width="100%"
                />
              </div>
            </span>
          </button>,
        }
      }
    >
      <div
        aria-hidden={true}
        style={
          {
            "border": 0,
            "clip": "rect(0 0 0 0)",
            "clipPath": "inset(50%)",
            "height": 1,
            "margin": "0 -1px -1px 0",
            "overflow": "hidden",
            "padding": 0,
            "position": "absolute",
            "whiteSpace": "nowrap",
            "width": 1,
          }
        }
      >
        <input
          onFocus={[Function]}
          style={
            {
              "fontSize": 16,
            }
          }
          tabIndex={-1}
          type="text"
        />
        <label>
          test
          <select
            onChange={[Function]}
            size={2}
            tabIndex={-1}
            value=""
          >
            <option />
            <option
              key="$.0"
              value="$.0"
            >
              Item 1
            </option>
            <option
              key="$.1"
              value="$.1"
            >
              Item 2
            </option>
          </select>
        </label>
      </div>
    </HiddenSelect>
    <Popover
      className="md-select-popover"
      hideOnEsc={false}
      interactive={true}
      onClickOutside={[Function]}
      onHide={[Function]}
      onKeyDown={[Function]}
      placement="bottom"
      role={null}
      setInstance={[Function]}
      showArrow={false}
      strategy="absolute"
      style={
        {
          "maxHeight": "none",
        }
      }
      trigger="manual"
      triggerComponent={
        <button
          aria-activedescendant="test-ID-option-$.0"
          aria-controls="test-id"
          aria-expanded={true}
          aria-haspopup="listbox"
          aria-labelledby="test-ID test-ID"
          className="md-select-dropdown-input md-select-open"
          id="test-ID"
          onBlur={[Function]}
          onClick={[Function]}
          onDragStart={[Function]}
          onFocus={[Function]}
          onKeyDown={[Function]}
          onKeyUp={[Function]}
          onMouseDown={[Function]}
          onMouseEnter={[Function]}
          onMouseLeave={[Function]}
          onMouseUp={[Function]}
          onTouchCancel={[Function]}
          onTouchEnd={[Function]}
          onTouchMove={[Function]}
          onTouchStart={[Function]}
          role="combobox"
          type="button"
        >
          <span
            className="md-select-selected-item-wrapper"
            id="test-ID"
          />
          <span
            aria-hidden="true"
            className="md-select-icon-wrapper"
          >
            <Icon
              name="arrow-up"
              scale={16}
              weight="bold"
            />
          </span>
        </button>
      }
    >
      <LazyTippy
        animation={false}
        appendTo="parent"
        hideOnClick={false}
        interactive={true}
        offset={
          [
            0,
            5,
          ]
        }
        onClickOutside={[Function]}
        onHidden={[Function]}
        onHide={[Function]}
        placement="bottom"
        plugins={
          [
            {
              "fn": [Function],
              "name": "addBackdropPlugin",
            },
          ]
        }
        popperOptions={
          {
            "modifiers": [
              {
                "enabled": false,
                "name": "arrow",
                "options": {
                  "element": "#arrow1",
                  "padding": 5,
                },
              },
              {
                "name": "preventOverflow",
                "options": {
                  "altAxis": true,
                  "boundariesElement": "scrollParent",
                  "padding": 8,
                },
              },
            ],
            "strategy": "absolute",
          }
        }
        render={[Function]}
        setInstance={[Function]}
        trigger="manual"
      >
        <ForwardRef(TippyWrapper)
          animation={false}
          appendTo="parent"
          hideOnClick={false}
          interactive={true}
          offset={
            [
              0,
              5,
            ]
          }
          onClickOutside={[Function]}
          onHidden={[Function]}
          onHide={[Function]}
          placement="bottom"
          plugins={
            [
              {
                "fn": [Function],
              },
              {
                "fn": [Function],
              },
              {
                "fn": [Function],
              },
              {
                "fn": [Function],
                "name": "addBackdropPlugin",
              },
            ]
          }
          popperOptions={
            {
              "modifiers": [
                {
                  "enabled": false,
                  "name": "arrow",
                  "options": {
                    "element": "#arrow1",
                    "padding": 5,
                  },
                },
                {
                  "name": "preventOverflow",
                  "options": {
                    "altAxis": true,
                    "boundariesElement": "scrollParent",
                    "padding": 8,
                  },
                },
              ],
              "strategy": "absolute",
            }
          }
          render={[Function]}
          trigger="manual"
        >
          <Tippy
            animation={false}
            appendTo="parent"
            hideOnClick={false}
            interactive={true}
            offset={
              [
                0,
                5,
              ]
            }
            onClickOutside={[Function]}
            onHidden={[Function]}
            onHide={[Function]}
            placement="bottom"
            plugins={
              [
                {
                  "fn": [Function],
                },
                {
                  "fn": [Function],
                },
                {
                  "fn": [Function],
                },
                {
                  "fn": [Function],
                  "name": "addBackdropPlugin",
                },
              ]
            }
            popperOptions={
              {
                "modifiers": [
                  {
                    "enabled": false,
                    "name": "arrow",
                    "options": {
                      "element": "#arrow1",
                      "padding": 5,
                    },
                  },
                  {
                    "name": "preventOverflow",
                    "options": {
                      "altAxis": true,
                      "boundariesElement": "scrollParent",
                      "padding": 8,
                    },
                  },
                ],
                "strategy": "absolute",
              }
            }
            render={[Function]}
            trigger="manual"
          >
            <button
              aria-activedescendant="test-ID-option-$.0"
              aria-controls="test-id"
              aria-expanded={true}
              aria-haspopup="listbox"
              aria-labelledby="test-ID test-ID"
              className="md-select-dropdown-input md-select-open"
              id="test-ID"
              onBlur={[Function]}
              onClick={[Function]}
              onDragStart={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              onMouseDown={[Function]}
              onMouseEnter={[Function]}
              onMouseLeave={[Function]}
              onMouseUp={[Function]}
              onTouchCancel={[Function]}
              onTouchEnd={[Function]}
              onTouchMove={[Function]}
              onTouchStart={[Function]}
              role="combobox"
              type="button"
            >
              <span
                className="md-select-selected-item-wrapper"
                id="test-ID"
              />
              <span
                aria-hidden="true"
                className="md-select-icon-wrapper"
              >
                <Icon
                  name="arrow-up"
                  scale={16}
                  weight="bold"
                >
                  <div
                    aria-hidden="true"
                    className="md-icon-wrapper md-icon-auto-scales md-icon-scales md-icon-no-shrink"
                    role="img"
                  >
                    <svg
                      aria-hidden="true"
                      className=""
                      data-autoscale={false}
                      data-scale={16}
                      data-test="arrow-up"
                      fill="currentColor"
                      height="100%"
                      style={{}}
                      viewBox="0, 0, 32, 32"
                      width="100%"
                    />
                  </div>
                </Icon>
              </span>
            </button>
            <Portal
              containerInfo={
                <div
                  data-tippy-root=""
                  id="tippy-12"
                  style="z-index: 9999; position: absolute; left: 0px; top: 0px; margin: 0px; transform: translate(0px, 0px);"
                >
                  <span
                    data-focus-scope-start="true"
                    hidden=""
                  />
                  <div
                    aria-labelledby="test-ID"
                    class="md-select-popover md-modal-container-wrapper"
                    data-arrow-orientation="vertical"
                    data-color="primary"
                    data-elevation="3"
                    data-padded="true"
                    data-placement="bottom"
                    data-round="50"
                    style="max-height: none;"
                  >
                    <ul
                      aria-labelledby="test-ID"
                      class="md-select-menu-listbox md-menu-list-background-wrapper"
                      data-color="primary"
                      id="test-ID"
                      role="listbox"
                      tabindex="-1"
                    >
                      <li
                        aria-disabled="false"
                        aria-selected="false"
                        class="md-list-item-base-wrapper"
                        data-allow-text-select="false"
                        data-disabled="false"
                        data-interactive="true"
                        data-key="$.0"
                        data-padded="true"
                        data-shape="rectangle"
                        data-size="40"
                        id="test-ID-option-$.0"
                        role="option"
                        tabindex="0"
                      >
                        <div
                          data-position="fill"
                          title="Item 1"
                        >
                          Item 1
                        </div>
                      </li>
                      <li
                        aria-disabled="false"
                        aria-selected="false"
                        class="md-list-item-base-wrapper"
                        data-allow-text-select="false"
                        data-disabled="false"
                        data-interactive="true"
                        data-key="$.1"
                        data-padded="true"
                        data-shape="rectangle"
                        data-size="40"
                        id="test-ID-option-$.1"
                        role="option"
                        tabindex="-1"
                      >
                        <div
                          data-position="fill"
                          title="Item 2"
                        >
                          Item 2
                        </div>
                      </li>
                    </ul>
                  </div>
                  <span
                    data-focus-scope-end="true"
                    hidden=""
                  />
                </div>
              }
            >
              <ModalContainer
                aria-labelledby="test-ID"
                ariaModal={true}
                arrowId="arrow1"
                className="md-select-popover"
                elevation={3}
                focusLockProps={
                  {
                    "autoFocus": true,
                    "restoreFocus": true,
                  }
                }
                isPadded={true}
                onKeyDown={[Function]}
                placement="bottom"
                role={null}
                round={50}
                showArrow={false}
                style={
                  {
                    "maxHeight": "none",
                  }
                }
              >
                <FocusScope
                  autoFocus={true}
                  contain={true}
                  restoreFocus={true}
                >
                  <span
                    data-focus-scope-start={true}
                    hidden={true}
                  />
                  <div
                    aria-labelledby="test-ID"
                    className="md-select-popover md-modal-container-wrapper"
                    data-arrow-orientation="vertical"
                    data-color="primary"
                    data-elevation={3}
                    data-padded={true}
                    data-placement="bottom"
                    data-round={50}
                    onKeyDown={[Function]}
                    role={null}
                    style={
                      {
                        "maxHeight": "none",
                      }
                    }
                  >
                    <ListBoxBase
                      aria-labelledby="test-ID"
                      autoFocus="first"
                      className="md-select-menu-listbox"
                      disallowEmptySelection={true}
                      id="test-ID"
                      onBlur={[Function]}
                      shouldFocusOnHover={true}
                      shouldSelectOnPressUp={true}
                      state={
                        {
                          "close": [Function],
                          "collection": ListCollection {
                            "firstKey": "$.0",
                            "iterable": {
                              Symbol(Symbol.iterator): [Function],
                            },
                            "keyMap": Map {
                              "$.0" => {
                                "aria-label": undefined,
                                "childNodes": {
                                  Symbol(Symbol.iterator): [Function],
                                },
                                "hasChildNodes": false,
                                "index": 0,
                                "key": "$.0",
                                "level": 0,
                                "nextKey": "$.1",
                                "parentKey": null,
                                "prevKey": undefined,
                                "props": {
                                  "children": "Item 1",
                                },
                                "rendered": "Item 1",
                                "shouldInvalidate": undefined,
                                "textValue": "Item 1",
                                "type": "item",
                                "value": undefined,
                                "wrapper": undefined,
                              },
                              "$.1" => {
                                "aria-label": undefined,
                                "childNodes": {
                                  Symbol(Symbol.iterator): [Function],
                                },
                                "hasChildNodes": false,
                                "index": 1,
                                "key": "$.1",
                                "level": 0,
                                "nextKey": undefined,
                                "parentKey": null,
                                "prevKey": "$.0",
                                "props": {
                                  "children": "Item 2",
                                },
                                "rendered": "Item 2",
                                "shouldInvalidate": undefined,
                                "textValue": "Item 2",
                                "type": "item",
                                "value": undefined,
                                "wrapper": undefined,
                              },
                            },
                            "lastKey": "$.1",
                          },
                          "disabledKeys": Set {},
                          "focusStrategy": "first",
                          "isFocused": false,
                          "isOpen": true,
                          "open": [Function],
                          "selectedItem": null,
                          "selectedKey": null,
                          "selectionManager": SelectionManager {
                            "_isSelectAll": null,
                            "allowsCellSelection": false,
                            "collection": ListCollection {
                              "firstKey": "$.0",
                              "iterable": {
                                Symbol(Symbol.iterator): [Function],
                              },
                              "keyMap": Map {
                                "$.0" => {
                                  "aria-label": undefined,
                                  "childNodes": {
                                    Symbol(Symbol.iterator): [Function],
                                  },
                                  "hasChildNodes": false,
                                  "index": 0,
                                  "key": "$.0",
                                  "level": 0,
                                  "nextKey": "$.1",
                                  "parentKey": null,
                                  "prevKey": undefined,
                                  "props": {
                                    "children": "Item 1",
                                  },
                                  "rendered": "Item 1",
                                  "shouldInvalidate": undefined,
                                  "textValue": "Item 1",
                                  "type": "item",
                                  "value": undefined,
                                  "wrapper": undefined,
                                },
                                "$.1" => {
                                  "aria-label": undefined,
                                  "childNodes": {
                                    Symbol(Symbol.iterator): [Function],
                                  },
                                  "hasChildNodes": false,
                                  "index": 1,
                                  "key": "$.1",
                                  "level": 0,
                                  "nextKey": undefined,
                                  "parentKey": null,
                                  "prevKey": "$.0",
                                  "props": {
                                    "children": "Item 2",
                                  },
                                  "rendered": "Item 2",
                                  "shouldInvalidate": undefined,
                                  "textValue": "Item 2",
                                  "type": "item",
                                  "value": undefined,
                                  "wrapper": undefined,
                                },
                              },
                              "lastKey": "$.1",
                            },
                            "state": {
                              "childFocusStrategy": "first",
                              "disabledKeys": Set {},
                              "disallowEmptySelection": true,
                              "focusedKey": "$.0",
                              "isFocused": true,
                              "selectedKeys": Set {},
                              "selectionMode": "single",
                              "setFocused": [Function],
                              "setFocusedKey": [Function],
                              "setSelectedKeys": [Function],
                            },
                          },
                          "setFocused": [Function],
                          "setSelectedKey": [Function],
                          "toggle": [Function],
                        }
                      }
                    >
                      <MenuListBackground
                        aria-labelledby="test-ID"
                        className="md-select-menu-listbox"
                        color="primary"
                        id="test-ID"
                        onBlur={[Function]}
                        onFocus={[Function]}
                        onKeyDown={[Function]}
                        onKeyDownCapture={[Function]}
                        onMouseDown={[Function]}
                        role="listbox"
                        tabIndex={-1}
                      >
                        <FocusRing>
                          <FocusRing
                            focusClass="md-focus-ring-wrapper children"
                            focusRingClass="md-focus-ring-wrapper children"
                          >
                            <ul
                              aria-labelledby="test-ID"
                              className="md-select-menu-listbox md-menu-list-background-wrapper"
                              data-color="primary"
                              id="test-ID"
                              onBlur={[Function]}
                              onFocus={[Function]}
                              onKeyDown={[Function]}
                              onKeyDownCapture={[Function]}
                              onMouseDown={[Function]}
                              role="listbox"
                              tabIndex={-1}
                            >
                              <ListBoxItem
                                item={
                                  {
                                    "aria-label": undefined,
                                    "childNodes": {
                                      Symbol(Symbol.iterator): [Function],
                                    },
                                    "hasChildNodes": false,
                                    "index": 0,
                                    "key": "$.0",
                                    "level": 0,
                                    "nextKey": "$.1",
                                    "parentKey": null,
                                    "prevKey": undefined,
                                    "props": {
                                      "children": "Item 1",
                                    },
                                    "rendered": "Item 1",
                                    "shouldInvalidate": undefined,
                                    "textValue": "Item 1",
                                    "type": "item",
                                    "value": undefined,
                                    "wrapper": undefined,
                                  }
                                }
                                key="$.0"
                              >
                                <ListItemBase
                                  aria-describedby={null}
                                  aria-disabled={false}
                                  aria-labelledby={null}
                                  aria-selected={false}
                                  data-key="$.0"
                                  id="test-ID-option-$.0"
                                  isDisabled={false}
                                  isPadded={true}
                                  key="$.0"
                                  onClick={[Function]}
                                  onDragStart={[Function]}
                                  onFocus={[Function]}
                                  onKeyDown={[Function]}
                                  onKeyUp={[Function]}
                                  onMouseDown={[Function]}
                                  onMouseEnter={[Function]}
                                  onMouseLeave={[Function]}
                                  onMouseUp={[Function]}
                                  onTouchCancel={[Function]}
                                  onTouchEnd={[Function]}
                                  onTouchMove={[Function]}
                                  onTouchStart={[Function]}
                                  role="option"
                                  tabIndex={0}
                                >
                                  <FocusRing
                                    isInset={false}
                                  >
                                    <FocusRing
                                      focusClass="md-focus-ring-wrapper children"
                                      focusRingClass="md-focus-ring-wrapper children"
                                      isInset={false}
                                    >
                                      <li
                                        aria-describedby={null}
                                        aria-disabled={false}
                                        aria-labelledby={null}
                                        aria-selected={false}
                                        className="md-list-item-base-wrapper"
                                        data-allow-text-select={false}
                                        data-disabled={false}
                                        data-interactive={true}
                                        data-key="$.0"
                                        data-padded={true}
                                        data-shape="rectangle"
                                        data-size={40}
                                        id="test-ID-option-$.0"
                                        onBlur={[Function]}
                                        onClick={[Function]}
                                        onDragStart={[Function]}
                                        onFocus={[Function]}
                                        onKeyDown={[Function]}
                                        onKeyUp={[Function]}
                                        onMouseDown={[Function]}
                                        onMouseEnter={[Function]}
                                        onMouseLeave={[Function]}
                                        onMouseUp={[Function]}
                                        onPointerDown={[Function]}
                                        onTouchCancel={[Function]}
                                        onTouchEnd={[Function]}
                                        onTouchMove={[Function]}
                                        onTouchStart={[Function]}
                                        role="option"
                                        tabIndex={0}
                                      >
                                        <ListItemBaseSection
                                          position="fill"
                                          title="Item 1"
                                        >
                                          <div
                                            data-position="fill"
                                            title="Item 1"
                                          >
                                            Item 1
                                          </div>
                                        </ListItemBaseSection>
                                      </li>
                                    </FocusRing>
                                  </FocusRing>
                                </ListItemBase>
                              </ListBoxItem>
                              <ListBoxItem
                                item={
                                  {
                                    "aria-label": undefined,
                                    "childNodes": {
                                      Symbol(Symbol.iterator): [Function],
                                    },
                                    "hasChildNodes": false,
                                    "index": 1,
                                    "key": "$.1",
                                    "level": 0,
                                    "nextKey": undefined,
                                    "parentKey": null,
                                    "prevKey": "$.0",
                                    "props": {
                                      "children": "Item 2",
                                    },
                                    "rendered": "Item 2",
                                    "shouldInvalidate": undefined,
                                    "textValue": "Item 2",
                                    "type": "item",
                                    "value": undefined,
                                    "wrapper": undefined,
                                  }
                                }
                                key="$.1"
                              >
                                <ListItemBase
                                  aria-describedby={null}
                                  aria-disabled={false}
                                  aria-labelledby={null}
                                  aria-selected={false}
                                  data-key="$.1"
                                  id="test-ID-option-$.1"
                                  isDisabled={false}
                                  isPadded={true}
                                  key="$.1"
                                  onClick={[Function]}
                                  onDragStart={[Function]}
                                  onFocus={[Function]}
                                  onKeyDown={[Function]}
                                  onKeyUp={[Function]}
                                  onMouseDown={[Function]}
                                  onMouseEnter={[Function]}
                                  onMouseLeave={[Function]}
                                  onMouseUp={[Function]}
                                  onTouchCancel={[Function]}
                                  onTouchEnd={[Function]}
                                  onTouchMove={[Function]}
                                  onTouchStart={[Function]}
                                  role="option"
                                  tabIndex={-1}
                                >
                                  <FocusRing
                                    isInset={false}
                                  >
                                    <FocusRing
                                      focusClass="md-focus-ring-wrapper children"
                                      focusRingClass="md-focus-ring-wrapper children"
                                      isInset={false}
                                    >
                                      <li
                                        aria-describedby={null}
                                        aria-disabled={false}
                                        aria-labelledby={null}
                                        aria-selected={false}
                                        className="md-list-item-base-wrapper"
                                        data-allow-text-select={false}
                                        data-disabled={false}
                                        data-interactive={true}
                                        data-key="$.1"
                                        data-padded={true}
                                        data-shape="rectangle"
                                        data-size={40}
                                        id="test-ID-option-$.1"
                                        onBlur={[Function]}
                                        onClick={[Function]}
                                        onDragStart={[Function]}
                                        onFocus={[Function]}
                                        onKeyDown={[Function]}
                                        onKeyUp={[Function]}
                                        onMouseDown={[Function]}
                                        onMouseEnter={[Function]}
                                        onMouseLeave={[Function]}
                                        onMouseUp={[Function]}
                                        onPointerDown={[Function]}
                                        onTouchCancel={[Function]}
                                        onTouchEnd={[Function]}
                                        onTouchMove={[Function]}
                                        onTouchStart={[Function]}
                                        role="option"
                                        tabIndex={-1}
                                      >
                                        <ListItemBaseSection
                                          position="fill"
                                          title="Item 2"
                                        >
                                          <div
                                            data-position="fill"
                                            title="Item 2"
                                          >
                                            Item 2
                                          </div>
                                        </ListItemBaseSection>
                                      </li>
                                    </FocusRing>
                                  </FocusRing>
                                </ListItemBase>
                              </ListBoxItem>
                            </ul>
                          </FocusRing>
                        </FocusRing>
                      </MenuListBackground>
                    </ListBoxBase>
                  </div>
                  <span
                    data-focus-scope-end={true}
                    hidden={true}
                  />
                </FocusScope>
              </ModalContainer>
            </Portal>
          </Tippy>
        </ForwardRef(TippyWrapper)>
      </LazyTippy>
    </Popover>
  </div>
</Select>
`;

exports[`Select snapshot should match snapshot with border 1`] = `
<Select
  id="test-id"
  label="test"
  showBorder={false}
>
  <div
    className="md-select-wrapper"
    id="test-id"
    style={
      {
        "--local-width": "100%",
      }
    }
  >
    <label
      id="test-ID"
      onClick={[Function]}
    >
      <Text>
        <p
          className="md-text-wrapper"
          data-type="body-primary"
        >
          test
        </p>
      </Text>
    </label>
    <HiddenSelect
      label="test"
      state={
        {
          "close": [Function],
          "collection": ListCollection {
            "firstKey": "$.0",
            "iterable": {
              Symbol(Symbol.iterator): [Function],
            },
            "keyMap": Map {
              "$.0" => {
                "aria-label": undefined,
                "childNodes": {
                  Symbol(Symbol.iterator): [Function],
                },
                "hasChildNodes": false,
                "index": 0,
                "key": "$.0",
                "level": 0,
                "nextKey": "$.1",
                "parentKey": null,
                "prevKey": undefined,
                "props": {
                  "children": "Item 1",
                },
                "rendered": "Item 1",
                "shouldInvalidate": undefined,
                "textValue": "Item 1",
                "type": "item",
                "value": undefined,
                "wrapper": undefined,
              },
              "$.1" => {
                "aria-label": undefined,
                "childNodes": {
                  Symbol(Symbol.iterator): [Function],
                },
                "hasChildNodes": false,
                "index": 1,
                "key": "$.1",
                "level": 0,
                "nextKey": undefined,
                "parentKey": null,
                "prevKey": "$.0",
                "props": {
                  "children": "Item 2",
                },
                "rendered": "Item 2",
                "shouldInvalidate": undefined,
                "textValue": "Item 2",
                "type": "item",
                "value": undefined,
                "wrapper": undefined,
              },
            },
            "lastKey": "$.1",
          },
          "disabledKeys": Set {},
          "focusStrategy": null,
          "isFocused": false,
          "isOpen": false,
          "open": [Function],
          "selectedItem": null,
          "selectedKey": null,
          "selectionManager": SelectionManager {
            "_isSelectAll": null,
            "allowsCellSelection": false,
            "collection": ListCollection {
              "firstKey": "$.0",
              "iterable": {
                Symbol(Symbol.iterator): [Function],
              },
              "keyMap": Map {
                "$.0" => {
                  "aria-label": undefined,
                  "childNodes": {
                    Symbol(Symbol.iterator): [Function],
                  },
                  "hasChildNodes": false,
                  "index": 0,
                  "key": "$.0",
                  "level": 0,
                  "nextKey": "$.1",
                  "parentKey": null,
                  "prevKey": undefined,
                  "props": {
                    "children": "Item 1",
                  },
                  "rendered": "Item 1",
                  "shouldInvalidate": undefined,
                  "textValue": "Item 1",
                  "type": "item",
                  "value": undefined,
                  "wrapper": undefined,
                },
                "$.1" => {
                  "aria-label": undefined,
                  "childNodes": {
                    Symbol(Symbol.iterator): [Function],
                  },
                  "hasChildNodes": false,
                  "index": 1,
                  "key": "$.1",
                  "level": 0,
                  "nextKey": undefined,
                  "parentKey": null,
                  "prevKey": "$.0",
                  "props": {
                    "children": "Item 2",
                  },
                  "rendered": "Item 2",
                  "shouldInvalidate": undefined,
                  "textValue": "Item 2",
                  "type": "item",
                  "value": undefined,
                  "wrapper": undefined,
                },
              },
              "lastKey": "$.1",
            },
            "state": {
              "childFocusStrategy": null,
              "disabledKeys": Set {},
              "disallowEmptySelection": true,
              "focusedKey": null,
              "isFocused": false,
              "selectedKeys": Set {},
              "selectionMode": "single",
              "setFocused": [Function],
              "setFocusedKey": [Function],
              "setSelectedKeys": [Function],
            },
          },
          "setFocused": [Function],
          "setSelectedKey": [Function],
          "toggle": [Function],
        }
      }
      triggerRef={
        {
          "current": <button
            aria-controls="test-id"
            aria-expanded="false"
            aria-haspopup="listbox"
            aria-labelledby="test-ID test-ID"
            class="md-select-dropdown-input borderLess"
            id="test-ID"
            role="combobox"
            type="button"
          >
            <span
              class="md-select-selected-item-wrapper"
              id="test-ID"
            />
            <span
              aria-hidden="true"
              class="md-select-icon-wrapper"
            >
              <div
                aria-hidden="true"
                class="md-icon-wrapper md-icon-auto-scales md-icon-scales md-icon-no-shrink"
                role="img"
              >
                <svg
                  aria-hidden="true"
                  class=""
                  data-autoscale="false"
                  data-scale="16"
                  data-test="arrow-down"
                  fill="currentColor"
                  height="100%"
                  viewBox="0, 0, 32, 32"
                  width="100%"
                />
              </div>
            </span>
          </button>,
        }
      }
    >
      <div
        aria-hidden={true}
        style={
          {
            "border": 0,
            "clip": "rect(0 0 0 0)",
            "clipPath": "inset(50%)",
            "height": 1,
            "margin": "0 -1px -1px 0",
            "overflow": "hidden",
            "padding": 0,
            "position": "absolute",
            "whiteSpace": "nowrap",
            "width": 1,
          }
        }
      >
        <input
          onFocus={[Function]}
          style={
            {
              "fontSize": 16,
            }
          }
          tabIndex={-1}
          type="text"
        />
        <label>
          test
          <select
            onChange={[Function]}
            size={2}
            tabIndex={-1}
            value=""
          >
            <option />
            <option
              key="$.0"
              value="$.0"
            >
              Item 1
            </option>
            <option
              key="$.1"
              value="$.1"
            >
              Item 2
            </option>
          </select>
        </label>
      </div>
    </HiddenSelect>
    <Popover
      className="md-select-popover"
      hideOnEsc={false}
      interactive={true}
      onClickOutside={[Function]}
      onHide={[Function]}
      onKeyDown={[Function]}
      placement="bottom"
      role={null}
      setInstance={[Function]}
      showArrow={false}
      strategy="absolute"
      style={
        {
          "maxHeight": "none",
        }
      }
      trigger="manual"
      triggerComponent={
        <button
          aria-activedescendant={null}
          aria-controls="test-id"
          aria-expanded={false}
          aria-haspopup="listbox"
          aria-labelledby="test-ID test-ID"
          className="md-select-dropdown-input borderLess"
          id="test-ID"
          onBlur={[Function]}
          onClick={[Function]}
          onDragStart={[Function]}
          onFocus={[Function]}
          onKeyDown={[Function]}
          onKeyUp={[Function]}
          onMouseDown={[Function]}
          onMouseEnter={[Function]}
          onMouseLeave={[Function]}
          onMouseUp={[Function]}
          onTouchCancel={[Function]}
          onTouchEnd={[Function]}
          onTouchMove={[Function]}
          onTouchStart={[Function]}
          role="combobox"
          type="button"
        >
          <span
            className="md-select-selected-item-wrapper"
            id="test-ID"
          />
          <span
            aria-hidden="true"
            className="md-select-icon-wrapper"
          >
            <Icon
              name="arrow-down"
              scale={16}
              weight="bold"
            />
          </span>
        </button>
      }
    >
      <LazyTippy
        animation={false}
        appendTo="parent"
        hideOnClick={false}
        interactive={true}
        offset={
          [
            0,
            5,
          ]
        }
        onClickOutside={[Function]}
        onHidden={[Function]}
        onHide={[Function]}
        placement="bottom"
        plugins={
          [
            {
              "fn": [Function],
              "name": "addBackdropPlugin",
            },
          ]
        }
        popperOptions={
          {
            "modifiers": [
              {
                "enabled": false,
                "name": "arrow",
                "options": {
                  "element": "#arrow1",
                  "padding": 5,
                },
              },
              {
                "name": "preventOverflow",
                "options": {
                  "altAxis": true,
                  "boundariesElement": "scrollParent",
                  "padding": 8,
                },
              },
            ],
            "strategy": "absolute",
          }
        }
        render={[Function]}
        setInstance={[Function]}
        trigger="manual"
      >
        <ForwardRef(TippyWrapper)
          animation={false}
          appendTo="parent"
          hideOnClick={false}
          interactive={true}
          offset={
            [
              0,
              5,
            ]
          }
          onClickOutside={[Function]}
          onHidden={[Function]}
          onHide={[Function]}
          placement="bottom"
          plugins={
            [
              {
                "fn": [Function],
              },
              {
                "fn": [Function],
              },
              {
                "fn": [Function],
              },
              {
                "fn": [Function],
                "name": "addBackdropPlugin",
              },
            ]
          }
          popperOptions={
            {
              "modifiers": [
                {
                  "enabled": false,
                  "name": "arrow",
                  "options": {
                    "element": "#arrow1",
                    "padding": 5,
                  },
                },
                {
                  "name": "preventOverflow",
                  "options": {
                    "altAxis": true,
                    "boundariesElement": "scrollParent",
                    "padding": 8,
                  },
                },
              ],
              "strategy": "absolute",
            }
          }
          render={[Function]}
          trigger="manual"
        >
          <Tippy
            animation={false}
            appendTo="parent"
            hideOnClick={false}
            interactive={true}
            offset={
              [
                0,
                5,
              ]
            }
            onClickOutside={[Function]}
            onHidden={[Function]}
            onHide={[Function]}
            placement="bottom"
            plugins={
              [
                {
                  "fn": [Function],
                },
                {
                  "fn": [Function],
                },
                {
                  "fn": [Function],
                },
                {
                  "fn": [Function],
                  "name": "addBackdropPlugin",
                },
              ]
            }
            popperOptions={
              {
                "modifiers": [
                  {
                    "enabled": false,
                    "name": "arrow",
                    "options": {
                      "element": "#arrow1",
                      "padding": 5,
                    },
                  },
                  {
                    "name": "preventOverflow",
                    "options": {
                      "altAxis": true,
                      "boundariesElement": "scrollParent",
                      "padding": 8,
                    },
                  },
                ],
                "strategy": "absolute",
              }
            }
            render={[Function]}
            trigger="manual"
          >
            <button
              aria-activedescendant={null}
              aria-controls="test-id"
              aria-expanded={false}
              aria-haspopup="listbox"
              aria-labelledby="test-ID test-ID"
              className="md-select-dropdown-input borderLess"
              id="test-ID"
              onBlur={[Function]}
              onClick={[Function]}
              onDragStart={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              onMouseDown={[Function]}
              onMouseEnter={[Function]}
              onMouseLeave={[Function]}
              onMouseUp={[Function]}
              onTouchCancel={[Function]}
              onTouchEnd={[Function]}
              onTouchMove={[Function]}
              onTouchStart={[Function]}
              role="combobox"
              type="button"
            >
              <span
                className="md-select-selected-item-wrapper"
                id="test-ID"
              />
              <span
                aria-hidden="true"
                className="md-select-icon-wrapper"
              >
                <Icon
                  name="arrow-down"
                  scale={16}
                  weight="bold"
                >
                  <div
                    aria-hidden="true"
                    className="md-icon-wrapper md-icon-auto-scales md-icon-scales md-icon-no-shrink"
                    role="img"
                  >
                    <svg
                      aria-hidden="true"
                      className=""
                      data-autoscale={false}
                      data-scale={16}
                      data-test="arrow-down"
                      fill="currentColor"
                      height="100%"
                      style={{}}
                      viewBox="0, 0, 32, 32"
                      width="100%"
                    />
                  </div>
                </Icon>
              </span>
            </button>
            <Portal
              containerInfo={
                <div
                  data-tippy-root=""
                  id="tippy-7"
                  style="z-index: 9999;"
                >
                  
                </div>
              }
            />
          </Tippy>
        </ForwardRef(TippyWrapper)>
      </LazyTippy>
    </Popover>
  </div>
</Select>
`;

exports[`Select snapshot should match snapshot with className 1`] = `
<Select
  className="example-class"
  id="test-id"
  label="test"
>
  <div
    className="example-class md-select-wrapper"
    id="test-id"
    style={
      {
        "--local-width": "100%",
      }
    }
  >
    <label
      id="test-ID"
      onClick={[Function]}
    >
      <Text>
        <p
          className="md-text-wrapper"
          data-type="body-primary"
        >
          test
        </p>
      </Text>
    </label>
    <HiddenSelect
      label="test"
      state={
        {
          "close": [Function],
          "collection": ListCollection {
            "firstKey": "$.0",
            "iterable": {
              Symbol(Symbol.iterator): [Function],
            },
            "keyMap": Map {
              "$.0" => {
                "aria-label": undefined,
                "childNodes": {
                  Symbol(Symbol.iterator): [Function],
                },
                "hasChildNodes": false,
                "index": 0,
                "key": "$.0",
                "level": 0,
                "nextKey": "$.1",
                "parentKey": null,
                "prevKey": undefined,
                "props": {
                  "children": "Item 1",
                },
                "rendered": "Item 1",
                "shouldInvalidate": undefined,
                "textValue": "Item 1",
                "type": "item",
                "value": undefined,
                "wrapper": undefined,
              },
              "$.1" => {
                "aria-label": undefined,
                "childNodes": {
                  Symbol(Symbol.iterator): [Function],
                },
                "hasChildNodes": false,
                "index": 1,
                "key": "$.1",
                "level": 0,
                "nextKey": undefined,
                "parentKey": null,
                "prevKey": "$.0",
                "props": {
                  "children": "Item 2",
                },
                "rendered": "Item 2",
                "shouldInvalidate": undefined,
                "textValue": "Item 2",
                "type": "item",
                "value": undefined,
                "wrapper": undefined,
              },
            },
            "lastKey": "$.1",
          },
          "disabledKeys": Set {},
          "focusStrategy": null,
          "isFocused": false,
          "isOpen": false,
          "open": [Function],
          "selectedItem": null,
          "selectedKey": null,
          "selectionManager": SelectionManager {
            "_isSelectAll": null,
            "allowsCellSelection": false,
            "collection": ListCollection {
              "firstKey": "$.0",
              "iterable": {
                Symbol(Symbol.iterator): [Function],
              },
              "keyMap": Map {
                "$.0" => {
                  "aria-label": undefined,
                  "childNodes": {
                    Symbol(Symbol.iterator): [Function],
                  },
                  "hasChildNodes": false,
                  "index": 0,
                  "key": "$.0",
                  "level": 0,
                  "nextKey": "$.1",
                  "parentKey": null,
                  "prevKey": undefined,
                  "props": {
                    "children": "Item 1",
                  },
                  "rendered": "Item 1",
                  "shouldInvalidate": undefined,
                  "textValue": "Item 1",
                  "type": "item",
                  "value": undefined,
                  "wrapper": undefined,
                },
                "$.1" => {
                  "aria-label": undefined,
                  "childNodes": {
                    Symbol(Symbol.iterator): [Function],
                  },
                  "hasChildNodes": false,
                  "index": 1,
                  "key": "$.1",
                  "level": 0,
                  "nextKey": undefined,
                  "parentKey": null,
                  "prevKey": "$.0",
                  "props": {
                    "children": "Item 2",
                  },
                  "rendered": "Item 2",
                  "shouldInvalidate": undefined,
                  "textValue": "Item 2",
                  "type": "item",
                  "value": undefined,
                  "wrapper": undefined,
                },
              },
              "lastKey": "$.1",
            },
            "state": {
              "childFocusStrategy": null,
              "disabledKeys": Set {},
              "disallowEmptySelection": true,
              "focusedKey": null,
              "isFocused": false,
              "selectedKeys": Set {},
              "selectionMode": "single",
              "setFocused": [Function],
              "setFocusedKey": [Function],
              "setSelectedKeys": [Function],
            },
          },
          "setFocused": [Function],
          "setSelectedKey": [Function],
          "toggle": [Function],
        }
      }
      triggerRef={
        {
          "current": <button
            aria-controls="test-id"
            aria-expanded="false"
            aria-haspopup="listbox"
            aria-labelledby="test-ID test-ID"
            class="md-select-dropdown-input"
            id="test-ID"
            role="combobox"
            type="button"
          >
            <span
              class="md-select-selected-item-wrapper"
              id="test-ID"
            />
            <span
              aria-hidden="true"
              class="md-select-icon-wrapper"
            >
              <div
                aria-hidden="true"
                class="md-icon-wrapper md-icon-auto-scales md-icon-scales md-icon-no-shrink"
                role="img"
              >
                <svg
                  aria-hidden="true"
                  class=""
                  data-autoscale="false"
                  data-scale="16"
                  data-test="arrow-down"
                  fill="currentColor"
                  height="100%"
                  viewBox="0, 0, 32, 32"
                  width="100%"
                />
              </div>
            </span>
          </button>,
        }
      }
    >
      <div
        aria-hidden={true}
        style={
          {
            "border": 0,
            "clip": "rect(0 0 0 0)",
            "clipPath": "inset(50%)",
            "height": 1,
            "margin": "0 -1px -1px 0",
            "overflow": "hidden",
            "padding": 0,
            "position": "absolute",
            "whiteSpace": "nowrap",
            "width": 1,
          }
        }
      >
        <input
          onFocus={[Function]}
          style={
            {
              "fontSize": 16,
            }
          }
          tabIndex={-1}
          type="text"
        />
        <label>
          test
          <select
            onChange={[Function]}
            size={2}
            tabIndex={-1}
            value=""
          >
            <option />
            <option
              key="$.0"
              value="$.0"
            >
              Item 1
            </option>
            <option
              key="$.1"
              value="$.1"
            >
              Item 2
            </option>
          </select>
        </label>
      </div>
    </HiddenSelect>
    <Popover
      className="md-select-popover"
      hideOnEsc={false}
      interactive={true}
      onClickOutside={[Function]}
      onHide={[Function]}
      onKeyDown={[Function]}
      placement="bottom"
      role={null}
      setInstance={[Function]}
      showArrow={false}
      strategy="absolute"
      style={
        {
          "maxHeight": "none",
        }
      }
      trigger="manual"
      triggerComponent={
        <button
          aria-activedescendant={null}
          aria-controls="test-id"
          aria-expanded={false}
          aria-haspopup="listbox"
          aria-labelledby="test-ID test-ID"
          className="md-select-dropdown-input"
          id="test-ID"
          onBlur={[Function]}
          onClick={[Function]}
          onDragStart={[Function]}
          onFocus={[Function]}
          onKeyDown={[Function]}
          onKeyUp={[Function]}
          onMouseDown={[Function]}
          onMouseEnter={[Function]}
          onMouseLeave={[Function]}
          onMouseUp={[Function]}
          onTouchCancel={[Function]}
          onTouchEnd={[Function]}
          onTouchMove={[Function]}
          onTouchStart={[Function]}
          role="combobox"
          type="button"
        >
          <span
            className="md-select-selected-item-wrapper"
            id="test-ID"
          />
          <span
            aria-hidden="true"
            className="md-select-icon-wrapper"
          >
            <Icon
              name="arrow-down"
              scale={16}
              weight="bold"
            />
          </span>
        </button>
      }
    >
      <LazyTippy
        animation={false}
        appendTo="parent"
        hideOnClick={false}
        interactive={true}
        offset={
          [
            0,
            5,
          ]
        }
        onClickOutside={[Function]}
        onHidden={[Function]}
        onHide={[Function]}
        placement="bottom"
        plugins={
          [
            {
              "fn": [Function],
              "name": "addBackdropPlugin",
            },
          ]
        }
        popperOptions={
          {
            "modifiers": [
              {
                "enabled": false,
                "name": "arrow",
                "options": {
                  "element": "#arrow1",
                  "padding": 5,
                },
              },
              {
                "name": "preventOverflow",
                "options": {
                  "altAxis": true,
                  "boundariesElement": "scrollParent",
                  "padding": 8,
                },
              },
            ],
            "strategy": "absolute",
          }
        }
        render={[Function]}
        setInstance={[Function]}
        trigger="manual"
      >
        <ForwardRef(TippyWrapper)
          animation={false}
          appendTo="parent"
          hideOnClick={false}
          interactive={true}
          offset={
            [
              0,
              5,
            ]
          }
          onClickOutside={[Function]}
          onHidden={[Function]}
          onHide={[Function]}
          placement="bottom"
          plugins={
            [
              {
                "fn": [Function],
              },
              {
                "fn": [Function],
              },
              {
                "fn": [Function],
              },
              {
                "fn": [Function],
                "name": "addBackdropPlugin",
              },
            ]
          }
          popperOptions={
            {
              "modifiers": [
                {
                  "enabled": false,
                  "name": "arrow",
                  "options": {
                    "element": "#arrow1",
                    "padding": 5,
                  },
                },
                {
                  "name": "preventOverflow",
                  "options": {
                    "altAxis": true,
                    "boundariesElement": "scrollParent",
                    "padding": 8,
                  },
                },
              ],
              "strategy": "absolute",
            }
          }
          render={[Function]}
          trigger="manual"
        >
          <Tippy
            animation={false}
            appendTo="parent"
            hideOnClick={false}
            interactive={true}
            offset={
              [
                0,
                5,
              ]
            }
            onClickOutside={[Function]}
            onHidden={[Function]}
            onHide={[Function]}
            placement="bottom"
            plugins={
              [
                {
                  "fn": [Function],
                },
                {
                  "fn": [Function],
                },
                {
                  "fn": [Function],
                },
                {
                  "fn": [Function],
                  "name": "addBackdropPlugin",
                },
              ]
            }
            popperOptions={
              {
                "modifiers": [
                  {
                    "enabled": false,
                    "name": "arrow",
                    "options": {
                      "element": "#arrow1",
                      "padding": 5,
                    },
                  },
                  {
                    "name": "preventOverflow",
                    "options": {
                      "altAxis": true,
                      "boundariesElement": "scrollParent",
                      "padding": 8,
                    },
                  },
                ],
                "strategy": "absolute",
              }
            }
            render={[Function]}
            trigger="manual"
          >
            <button
              aria-activedescendant={null}
              aria-controls="test-id"
              aria-expanded={false}
              aria-haspopup="listbox"
              aria-labelledby="test-ID test-ID"
              className="md-select-dropdown-input"
              id="test-ID"
              onBlur={[Function]}
              onClick={[Function]}
              onDragStart={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              onMouseDown={[Function]}
              onMouseEnter={[Function]}
              onMouseLeave={[Function]}
              onMouseUp={[Function]}
              onTouchCancel={[Function]}
              onTouchEnd={[Function]}
              onTouchMove={[Function]}
              onTouchStart={[Function]}
              role="combobox"
              type="button"
            >
              <span
                className="md-select-selected-item-wrapper"
                id="test-ID"
              />
              <span
                aria-hidden="true"
                className="md-select-icon-wrapper"
              >
                <Icon
                  name="arrow-down"
                  scale={16}
                  weight="bold"
                >
                  <div
                    aria-hidden="true"
                    className="md-icon-wrapper md-icon-auto-scales md-icon-scales md-icon-no-shrink"
                    role="img"
                  >
                    <svg
                      aria-hidden="true"
                      className=""
                      data-autoscale={false}
                      data-scale={16}
                      data-test="arrow-down"
                      fill="currentColor"
                      height="100%"
                      style={{}}
                      viewBox="0, 0, 32, 32"
                      width="100%"
                    />
                  </div>
                </Icon>
              </span>
            </button>
            <Portal
              containerInfo={
                <div
                  data-tippy-root=""
                  id="tippy-2"
                  style="z-index: 9999;"
                >
                  
                </div>
              }
            />
          </Tippy>
        </ForwardRef(TippyWrapper)>
      </LazyTippy>
    </Popover>
  </div>
</Select>
`;

exports[`Select snapshot should match snapshot with direction 1`] = `
<Select
  direction="top"
  id="test-id"
  label="test"
>
  <div
    className="md-select-wrapper"
    id="test-id"
    style={
      {
        "--local-width": "100%",
      }
    }
  >
    <label
      id="test-ID"
      onClick={[Function]}
    >
      <Text>
        <p
          className="md-text-wrapper"
          data-type="body-primary"
        >
          test
        </p>
      </Text>
    </label>
    <HiddenSelect
      label="test"
      state={
        {
          "close": [Function],
          "collection": ListCollection {
            "firstKey": "$.0",
            "iterable": {
              Symbol(Symbol.iterator): [Function],
            },
            "keyMap": Map {
              "$.0" => {
                "aria-label": undefined,
                "childNodes": {
                  Symbol(Symbol.iterator): [Function],
                },
                "hasChildNodes": false,
                "index": 0,
                "key": "$.0",
                "level": 0,
                "nextKey": "$.1",
                "parentKey": null,
                "prevKey": undefined,
                "props": {
                  "children": "Item 1",
                },
                "rendered": "Item 1",
                "shouldInvalidate": undefined,
                "textValue": "Item 1",
                "type": "item",
                "value": undefined,
                "wrapper": undefined,
              },
              "$.1" => {
                "aria-label": undefined,
                "childNodes": {
                  Symbol(Symbol.iterator): [Function],
                },
                "hasChildNodes": false,
                "index": 1,
                "key": "$.1",
                "level": 0,
                "nextKey": undefined,
                "parentKey": null,
                "prevKey": "$.0",
                "props": {
                  "children": "Item 2",
                },
                "rendered": "Item 2",
                "shouldInvalidate": undefined,
                "textValue": "Item 2",
                "type": "item",
                "value": undefined,
                "wrapper": undefined,
              },
            },
            "lastKey": "$.1",
          },
          "disabledKeys": Set {},
          "focusStrategy": null,
          "isFocused": false,
          "isOpen": false,
          "open": [Function],
          "selectedItem": null,
          "selectedKey": null,
          "selectionManager": SelectionManager {
            "_isSelectAll": null,
            "allowsCellSelection": false,
            "collection": ListCollection {
              "firstKey": "$.0",
              "iterable": {
                Symbol(Symbol.iterator): [Function],
              },
              "keyMap": Map {
                "$.0" => {
                  "aria-label": undefined,
                  "childNodes": {
                    Symbol(Symbol.iterator): [Function],
                  },
                  "hasChildNodes": false,
                  "index": 0,
                  "key": "$.0",
                  "level": 0,
                  "nextKey": "$.1",
                  "parentKey": null,
                  "prevKey": undefined,
                  "props": {
                    "children": "Item 1",
                  },
                  "rendered": "Item 1",
                  "shouldInvalidate": undefined,
                  "textValue": "Item 1",
                  "type": "item",
                  "value": undefined,
                  "wrapper": undefined,
                },
                "$.1" => {
                  "aria-label": undefined,
                  "childNodes": {
                    Symbol(Symbol.iterator): [Function],
                  },
                  "hasChildNodes": false,
                  "index": 1,
                  "key": "$.1",
                  "level": 0,
                  "nextKey": undefined,
                  "parentKey": null,
                  "prevKey": "$.0",
                  "props": {
                    "children": "Item 2",
                  },
                  "rendered": "Item 2",
                  "shouldInvalidate": undefined,
                  "textValue": "Item 2",
                  "type": "item",
                  "value": undefined,
                  "wrapper": undefined,
                },
              },
              "lastKey": "$.1",
            },
            "state": {
              "childFocusStrategy": null,
              "disabledKeys": Set {},
              "disallowEmptySelection": true,
              "focusedKey": null,
              "isFocused": false,
              "selectedKeys": Set {},
              "selectionMode": "single",
              "setFocused": [Function],
              "setFocusedKey": [Function],
              "setSelectedKeys": [Function],
            },
          },
          "setFocused": [Function],
          "setSelectedKey": [Function],
          "toggle": [Function],
        }
      }
      triggerRef={
        {
          "current": <button
            aria-controls="test-id"
            aria-expanded="false"
            aria-haspopup="listbox"
            aria-labelledby="test-ID test-ID"
            class="md-select-dropdown-input"
            id="test-ID"
            role="combobox"
            type="button"
          >
            <span
              class="md-select-selected-item-wrapper"
              id="test-ID"
            />
            <span
              aria-hidden="true"
              class="md-select-icon-wrapper"
            >
              <div
                aria-hidden="true"
                class="md-icon-wrapper md-icon-auto-scales md-icon-scales md-icon-no-shrink"
                role="img"
              >
                <svg
                  aria-hidden="true"
                  class=""
                  data-autoscale="false"
                  data-scale="16"
                  data-test="arrow-down"
                  fill="currentColor"
                  height="100%"
                  viewBox="0, 0, 32, 32"
                  width="100%"
                />
              </div>
            </span>
          </button>,
        }
      }
    >
      <div
        aria-hidden={true}
        style={
          {
            "border": 0,
            "clip": "rect(0 0 0 0)",
            "clipPath": "inset(50%)",
            "height": 1,
            "margin": "0 -1px -1px 0",
            "overflow": "hidden",
            "padding": 0,
            "position": "absolute",
            "whiteSpace": "nowrap",
            "width": 1,
          }
        }
      >
        <input
          onFocus={[Function]}
          style={
            {
              "fontSize": 16,
            }
          }
          tabIndex={-1}
          type="text"
        />
        <label>
          test
          <select
            onChange={[Function]}
            size={2}
            tabIndex={-1}
            value=""
          >
            <option />
            <option
              key="$.0"
              value="$.0"
            >
              Item 1
            </option>
            <option
              key="$.1"
              value="$.1"
            >
              Item 2
            </option>
          </select>
        </label>
      </div>
    </HiddenSelect>
    <Popover
      className="md-select-popover"
      hideOnEsc={false}
      interactive={true}
      onClickOutside={[Function]}
      onHide={[Function]}
      onKeyDown={[Function]}
      placement="top"
      role={null}
      setInstance={[Function]}
      showArrow={false}
      strategy="absolute"
      style={
        {
          "maxHeight": "none",
        }
      }
      trigger="manual"
      triggerComponent={
        <button
          aria-activedescendant={null}
          aria-controls="test-id"
          aria-expanded={false}
          aria-haspopup="listbox"
          aria-labelledby="test-ID test-ID"
          className="md-select-dropdown-input"
          id="test-ID"
          onBlur={[Function]}
          onClick={[Function]}
          onDragStart={[Function]}
          onFocus={[Function]}
          onKeyDown={[Function]}
          onKeyUp={[Function]}
          onMouseDown={[Function]}
          onMouseEnter={[Function]}
          onMouseLeave={[Function]}
          onMouseUp={[Function]}
          onTouchCancel={[Function]}
          onTouchEnd={[Function]}
          onTouchMove={[Function]}
          onTouchStart={[Function]}
          role="combobox"
          type="button"
        >
          <span
            className="md-select-selected-item-wrapper"
            id="test-ID"
          />
          <span
            aria-hidden="true"
            className="md-select-icon-wrapper"
          >
            <Icon
              name="arrow-down"
              scale={16}
              weight="bold"
            />
          </span>
        </button>
      }
    >
      <LazyTippy
        animation={false}
        appendTo="parent"
        hideOnClick={false}
        interactive={true}
        offset={
          [
            0,
            5,
          ]
        }
        onClickOutside={[Function]}
        onHidden={[Function]}
        onHide={[Function]}
        placement="top"
        plugins={
          [
            {
              "fn": [Function],
              "name": "addBackdropPlugin",
            },
          ]
        }
        popperOptions={
          {
            "modifiers": [
              {
                "enabled": false,
                "name": "arrow",
                "options": {
                  "element": "#arrow1",
                  "padding": 5,
                },
              },
              {
                "name": "preventOverflow",
                "options": {
                  "altAxis": true,
                  "boundariesElement": "scrollParent",
                  "padding": 8,
                },
              },
            ],
            "strategy": "absolute",
          }
        }
        render={[Function]}
        setInstance={[Function]}
        trigger="manual"
      >
        <ForwardRef(TippyWrapper)
          animation={false}
          appendTo="parent"
          hideOnClick={false}
          interactive={true}
          offset={
            [
              0,
              5,
            ]
          }
          onClickOutside={[Function]}
          onHidden={[Function]}
          onHide={[Function]}
          placement="top"
          plugins={
            [
              {
                "fn": [Function],
              },
              {
                "fn": [Function],
              },
              {
                "fn": [Function],
              },
              {
                "fn": [Function],
                "name": "addBackdropPlugin",
              },
            ]
          }
          popperOptions={
            {
              "modifiers": [
                {
                  "enabled": false,
                  "name": "arrow",
                  "options": {
                    "element": "#arrow1",
                    "padding": 5,
                  },
                },
                {
                  "name": "preventOverflow",
                  "options": {
                    "altAxis": true,
                    "boundariesElement": "scrollParent",
                    "padding": 8,
                  },
                },
              ],
              "strategy": "absolute",
            }
          }
          render={[Function]}
          trigger="manual"
        >
          <Tippy
            animation={false}
            appendTo="parent"
            hideOnClick={false}
            interactive={true}
            offset={
              [
                0,
                5,
              ]
            }
            onClickOutside={[Function]}
            onHidden={[Function]}
            onHide={[Function]}
            placement="top"
            plugins={
              [
                {
                  "fn": [Function],
                },
                {
                  "fn": [Function],
                },
                {
                  "fn": [Function],
                },
                {
                  "fn": [Function],
                  "name": "addBackdropPlugin",
                },
              ]
            }
            popperOptions={
              {
                "modifiers": [
                  {
                    "enabled": false,
                    "name": "arrow",
                    "options": {
                      "element": "#arrow1",
                      "padding": 5,
                    },
                  },
                  {
                    "name": "preventOverflow",
                    "options": {
                      "altAxis": true,
                      "boundariesElement": "scrollParent",
                      "padding": 8,
                    },
                  },
                ],
                "strategy": "absolute",
              }
            }
            render={[Function]}
            trigger="manual"
          >
            <button
              aria-activedescendant={null}
              aria-controls="test-id"
              aria-expanded={false}
              aria-haspopup="listbox"
              aria-labelledby="test-ID test-ID"
              className="md-select-dropdown-input"
              id="test-ID"
              onBlur={[Function]}
              onClick={[Function]}
              onDragStart={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              onMouseDown={[Function]}
              onMouseEnter={[Function]}
              onMouseLeave={[Function]}
              onMouseUp={[Function]}
              onTouchCancel={[Function]}
              onTouchEnd={[Function]}
              onTouchMove={[Function]}
              onTouchStart={[Function]}
              role="combobox"
              type="button"
            >
              <span
                className="md-select-selected-item-wrapper"
                id="test-ID"
              />
              <span
                aria-hidden="true"
                className="md-select-icon-wrapper"
              >
                <Icon
                  name="arrow-down"
                  scale={16}
                  weight="bold"
                >
                  <div
                    aria-hidden="true"
                    className="md-icon-wrapper md-icon-auto-scales md-icon-scales md-icon-no-shrink"
                    role="img"
                  >
                    <svg
                      aria-hidden="true"
                      className=""
                      data-autoscale={false}
                      data-scale={16}
                      data-test="arrow-down"
                      fill="currentColor"
                      height="100%"
                      style={{}}
                      viewBox="0, 0, 32, 32"
                      width="100%"
                    />
                  </div>
                </Icon>
              </span>
            </button>
            <Portal
              containerInfo={
                <div
                  data-tippy-root=""
                  id="tippy-6"
                  style="z-index: 9999;"
                >
                  
                </div>
              }
            />
          </Tippy>
        </ForwardRef(TippyWrapper)>
      </LazyTippy>
    </Popover>
  </div>
</Select>
`;

exports[`Select snapshot should match snapshot with disabled option 1`] = `
<Select
  disabledKeys={
    [
      "$.0",
    ]
  }
  id="test-id"
  isOpen={true}
  label="test"
>
  <div
    className="md-select-wrapper"
    id="test-id"
    style={
      {
        "--local-width": "100%",
      }
    }
  >
    <label
      id="test-ID"
      onClick={[Function]}
    >
      <Text>
        <p
          className="md-text-wrapper"
          data-type="body-primary"
        >
          test
        </p>
      </Text>
    </label>
    <HiddenSelect
      label="test"
      state={
        {
          "close": [Function],
          "collection": ListCollection {
            "firstKey": "$.0",
            "iterable": {
              Symbol(Symbol.iterator): [Function],
            },
            "keyMap": Map {
              "$.0" => {
                "aria-label": undefined,
                "childNodes": {
                  Symbol(Symbol.iterator): [Function],
                },
                "hasChildNodes": false,
                "index": 0,
                "key": "$.0",
                "level": 0,
                "nextKey": "$.1",
                "parentKey": null,
                "prevKey": undefined,
                "props": {
                  "children": "Item 1",
                },
                "rendered": "Item 1",
                "shouldInvalidate": undefined,
                "textValue": "Item 1",
                "type": "item",
                "value": undefined,
                "wrapper": undefined,
              },
              "$.1" => {
                "aria-label": undefined,
                "childNodes": {
                  Symbol(Symbol.iterator): [Function],
                },
                "hasChildNodes": false,
                "index": 1,
                "key": "$.1",
                "level": 0,
                "nextKey": undefined,
                "parentKey": null,
                "prevKey": "$.0",
                "props": {
                  "children": "Item 2",
                },
                "rendered": "Item 2",
                "shouldInvalidate": undefined,
                "textValue": "Item 2",
                "type": "item",
                "value": undefined,
                "wrapper": undefined,
              },
            },
            "lastKey": "$.1",
          },
          "disabledKeys": Set {
            "$.0",
          },
          "focusStrategy": null,
          "isFocused": false,
          "isOpen": true,
          "open": [Function],
          "selectedItem": null,
          "selectedKey": null,
          "selectionManager": SelectionManager {
            "_isSelectAll": null,
            "allowsCellSelection": false,
            "collection": ListCollection {
              "firstKey": "$.0",
              "iterable": {
                Symbol(Symbol.iterator): [Function],
              },
              "keyMap": Map {
                "$.0" => {
                  "aria-label": undefined,
                  "childNodes": {
                    Symbol(Symbol.iterator): [Function],
                  },
                  "hasChildNodes": false,
                  "index": 0,
                  "key": "$.0",
                  "level": 0,
                  "nextKey": "$.1",
                  "parentKey": null,
                  "prevKey": undefined,
                  "props": {
                    "children": "Item 1",
                  },
                  "rendered": "Item 1",
                  "shouldInvalidate": undefined,
                  "textValue": "Item 1",
                  "type": "item",
                  "value": undefined,
                  "wrapper": undefined,
                },
                "$.1" => {
                  "aria-label": undefined,
                  "childNodes": {
                    Symbol(Symbol.iterator): [Function],
                  },
                  "hasChildNodes": false,
                  "index": 1,
                  "key": "$.1",
                  "level": 0,
                  "nextKey": undefined,
                  "parentKey": null,
                  "prevKey": "$.0",
                  "props": {
                    "children": "Item 2",
                  },
                  "rendered": "Item 2",
                  "shouldInvalidate": undefined,
                  "textValue": "Item 2",
                  "type": "item",
                  "value": undefined,
                  "wrapper": undefined,
                },
              },
              "lastKey": "$.1",
            },
            "state": {
              "childFocusStrategy": "first",
              "disabledKeys": Set {
                "$.0",
              },
              "disallowEmptySelection": true,
              "focusedKey": "$.1",
              "isFocused": true,
              "selectedKeys": Set {},
              "selectionMode": "single",
              "setFocused": [Function],
              "setFocusedKey": [Function],
              "setSelectedKeys": [Function],
            },
          },
          "setFocused": [Function],
          "setSelectedKey": [Function],
          "toggle": [Function],
        }
      }
      triggerRef={
        {
          "current": <button
            aria-activedescendant="test-ID-option-$.1"
            aria-controls="test-id"
            aria-expanded="true"
            aria-haspopup="listbox"
            aria-labelledby="test-ID test-ID"
            class="md-select-dropdown-input md-select-open"
            id="test-ID"
            role="combobox"
            type="button"
          >
            <span
              class="md-select-selected-item-wrapper"
              id="test-ID"
            />
            <span
              aria-hidden="true"
              class="md-select-icon-wrapper"
            >
              <div
                aria-hidden="true"
                class="md-icon-wrapper md-icon-auto-scales md-icon-scales md-icon-no-shrink"
                role="img"
              >
                <svg
                  aria-hidden="true"
                  class=""
                  data-autoscale="false"
                  data-scale="16"
                  data-test="arrow-up"
                  fill="currentColor"
                  height="100%"
                  viewBox="0, 0, 32, 32"
                  width="100%"
                />
              </div>
            </span>
          </button>,
        }
      }
    >
      <div
        aria-hidden={true}
        style={
          {
            "border": 0,
            "clip": "rect(0 0 0 0)",
            "clipPath": "inset(50%)",
            "height": 1,
            "margin": "0 -1px -1px 0",
            "overflow": "hidden",
            "padding": 0,
            "position": "absolute",
            "whiteSpace": "nowrap",
            "width": 1,
          }
        }
      >
        <input
          onFocus={[Function]}
          style={
            {
              "fontSize": 16,
            }
          }
          tabIndex={-1}
          type="text"
        />
        <label>
          test
          <select
            onChange={[Function]}
            size={2}
            tabIndex={-1}
            value=""
          >
            <option />
            <option
              key="$.0"
              value="$.0"
            >
              Item 1
            </option>
            <option
              key="$.1"
              value="$.1"
            >
              Item 2
            </option>
          </select>
        </label>
      </div>
    </HiddenSelect>
    <Popover
      className="md-select-popover"
      hideOnEsc={false}
      interactive={true}
      onClickOutside={[Function]}
      onHide={[Function]}
      onKeyDown={[Function]}
      placement="bottom"
      role={null}
      setInstance={[Function]}
      showArrow={false}
      strategy="absolute"
      style={
        {
          "maxHeight": "none",
        }
      }
      trigger="manual"
      triggerComponent={
        <button
          aria-activedescendant="test-ID-option-$.1"
          aria-controls="test-id"
          aria-expanded={true}
          aria-haspopup="listbox"
          aria-labelledby="test-ID test-ID"
          className="md-select-dropdown-input md-select-open"
          id="test-ID"
          onBlur={[Function]}
          onClick={[Function]}
          onDragStart={[Function]}
          onFocus={[Function]}
          onKeyDown={[Function]}
          onKeyUp={[Function]}
          onMouseDown={[Function]}
          onMouseEnter={[Function]}
          onMouseLeave={[Function]}
          onMouseUp={[Function]}
          onTouchCancel={[Function]}
          onTouchEnd={[Function]}
          onTouchMove={[Function]}
          onTouchStart={[Function]}
          role="combobox"
          type="button"
        >
          <span
            className="md-select-selected-item-wrapper"
            id="test-ID"
          />
          <span
            aria-hidden="true"
            className="md-select-icon-wrapper"
          >
            <Icon
              name="arrow-up"
              scale={16}
              weight="bold"
            />
          </span>
        </button>
      }
    >
      <LazyTippy
        animation={false}
        appendTo="parent"
        hideOnClick={false}
        interactive={true}
        offset={
          [
            0,
            5,
          ]
        }
        onClickOutside={[Function]}
        onHidden={[Function]}
        onHide={[Function]}
        placement="bottom"
        plugins={
          [
            {
              "fn": [Function],
              "name": "addBackdropPlugin",
            },
          ]
        }
        popperOptions={
          {
            "modifiers": [
              {
                "enabled": false,
                "name": "arrow",
                "options": {
                  "element": "#arrow1",
                  "padding": 5,
                },
              },
              {
                "name": "preventOverflow",
                "options": {
                  "altAxis": true,
                  "boundariesElement": "scrollParent",
                  "padding": 8,
                },
              },
            ],
            "strategy": "absolute",
          }
        }
        render={[Function]}
        setInstance={[Function]}
        trigger="manual"
      >
        <ForwardRef(TippyWrapper)
          animation={false}
          appendTo="parent"
          hideOnClick={false}
          interactive={true}
          offset={
            [
              0,
              5,
            ]
          }
          onClickOutside={[Function]}
          onHidden={[Function]}
          onHide={[Function]}
          placement="bottom"
          plugins={
            [
              {
                "fn": [Function],
              },
              {
                "fn": [Function],
              },
              {
                "fn": [Function],
              },
              {
                "fn": [Function],
                "name": "addBackdropPlugin",
              },
            ]
          }
          popperOptions={
            {
              "modifiers": [
                {
                  "enabled": false,
                  "name": "arrow",
                  "options": {
                    "element": "#arrow1",
                    "padding": 5,
                  },
                },
                {
                  "name": "preventOverflow",
                  "options": {
                    "altAxis": true,
                    "boundariesElement": "scrollParent",
                    "padding": 8,
                  },
                },
              ],
              "strategy": "absolute",
            }
          }
          render={[Function]}
          trigger="manual"
        >
          <Tippy
            animation={false}
            appendTo="parent"
            hideOnClick={false}
            interactive={true}
            offset={
              [
                0,
                5,
              ]
            }
            onClickOutside={[Function]}
            onHidden={[Function]}
            onHide={[Function]}
            placement="bottom"
            plugins={
              [
                {
                  "fn": [Function],
                },
                {
                  "fn": [Function],
                },
                {
                  "fn": [Function],
                },
                {
                  "fn": [Function],
                  "name": "addBackdropPlugin",
                },
              ]
            }
            popperOptions={
              {
                "modifiers": [
                  {
                    "enabled": false,
                    "name": "arrow",
                    "options": {
                      "element": "#arrow1",
                      "padding": 5,
                    },
                  },
                  {
                    "name": "preventOverflow",
                    "options": {
                      "altAxis": true,
                      "boundariesElement": "scrollParent",
                      "padding": 8,
                    },
                  },
                ],
                "strategy": "absolute",
              }
            }
            render={[Function]}
            trigger="manual"
          >
            <button
              aria-activedescendant="test-ID-option-$.1"
              aria-controls="test-id"
              aria-expanded={true}
              aria-haspopup="listbox"
              aria-labelledby="test-ID test-ID"
              className="md-select-dropdown-input md-select-open"
              id="test-ID"
              onBlur={[Function]}
              onClick={[Function]}
              onDragStart={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              onMouseDown={[Function]}
              onMouseEnter={[Function]}
              onMouseLeave={[Function]}
              onMouseUp={[Function]}
              onTouchCancel={[Function]}
              onTouchEnd={[Function]}
              onTouchMove={[Function]}
              onTouchStart={[Function]}
              role="combobox"
              type="button"
            >
              <span
                className="md-select-selected-item-wrapper"
                id="test-ID"
              />
              <span
                aria-hidden="true"
                className="md-select-icon-wrapper"
              >
                <Icon
                  name="arrow-up"
                  scale={16}
                  weight="bold"
                >
                  <div
                    aria-hidden="true"
                    className="md-icon-wrapper md-icon-auto-scales md-icon-scales md-icon-no-shrink"
                    role="img"
                  >
                    <svg
                      aria-hidden="true"
                      className=""
                      data-autoscale={false}
                      data-scale={16}
                      data-test="arrow-up"
                      fill="currentColor"
                      height="100%"
                      style={{}}
                      viewBox="0, 0, 32, 32"
                      width="100%"
                    />
                  </div>
                </Icon>
              </span>
            </button>
            <Portal
              containerInfo={
                <div
                  data-tippy-root=""
                  id="tippy-9"
                  style="z-index: 9999; position: absolute; left: 0px; top: 0px; margin: 0px; transform: translate(0px, 0px);"
                >
                  <span
                    data-focus-scope-start="true"
                    hidden=""
                  />
                  <div
                    aria-labelledby="test-ID"
                    class="md-select-popover md-modal-container-wrapper"
                    data-arrow-orientation="vertical"
                    data-color="primary"
                    data-elevation="3"
                    data-padded="true"
                    data-placement="bottom"
                    data-round="50"
                    style="max-height: none;"
                  >
                    <ul
                      aria-labelledby="test-ID"
                      class="md-select-menu-listbox md-menu-list-background-wrapper"
                      data-color="primary"
                      id="test-ID"
                      role="listbox"
                      tabindex="-1"
                    >
                      <li
                        aria-disabled="true"
                        aria-selected="false"
                        class="md-list-item-base-wrapper"
                        data-allow-text-select="false"
                        data-disabled="true"
                        data-interactive="true"
                        data-key="$.0"
                        data-padded="true"
                        data-shape="rectangle"
                        data-size="40"
                        id="test-ID-option-$.0"
                        role="option"
                        tabindex="-1"
                      >
                        <div
                          data-position="fill"
                          title="Item 1"
                        >
                          Item 1
                        </div>
                      </li>
                      <li
                        aria-disabled="false"
                        aria-selected="false"
                        class="md-list-item-base-wrapper"
                        data-allow-text-select="false"
                        data-disabled="false"
                        data-interactive="true"
                        data-key="$.1"
                        data-padded="true"
                        data-shape="rectangle"
                        data-size="40"
                        id="test-ID-option-$.1"
                        role="option"
                        tabindex="0"
                      >
                        <div
                          data-position="fill"
                          title="Item 2"
                        >
                          Item 2
                        </div>
                      </li>
                    </ul>
                  </div>
                  <span
                    data-focus-scope-end="true"
                    hidden=""
                  />
                </div>
              }
            >
              <ModalContainer
                aria-labelledby="test-ID"
                ariaModal={true}
                arrowId="arrow1"
                className="md-select-popover"
                elevation={3}
                focusLockProps={
                  {
                    "autoFocus": true,
                    "restoreFocus": true,
                  }
                }
                isPadded={true}
                onKeyDown={[Function]}
                placement="bottom"
                role={null}
                round={50}
                showArrow={false}
                style={
                  {
                    "maxHeight": "none",
                  }
                }
              >
                <FocusScope
                  autoFocus={true}
                  contain={true}
                  restoreFocus={true}
                >
                  <span
                    data-focus-scope-start={true}
                    hidden={true}
                  />
                  <div
                    aria-labelledby="test-ID"
                    className="md-select-popover md-modal-container-wrapper"
                    data-arrow-orientation="vertical"
                    data-color="primary"
                    data-elevation={3}
                    data-padded={true}
                    data-placement="bottom"
                    data-round={50}
                    onKeyDown={[Function]}
                    role={null}
                    style={
                      {
                        "maxHeight": "none",
                      }
                    }
                  >
                    <ListBoxBase
                      aria-labelledby="test-ID"
                      autoFocus="first"
                      className="md-select-menu-listbox"
                      disallowEmptySelection={true}
                      id="test-ID"
                      onBlur={[Function]}
                      shouldFocusOnHover={true}
                      shouldSelectOnPressUp={true}
                      state={
                        {
                          "close": [Function],
                          "collection": ListCollection {
                            "firstKey": "$.0",
                            "iterable": {
                              Symbol(Symbol.iterator): [Function],
                            },
                            "keyMap": Map {
                              "$.0" => {
                                "aria-label": undefined,
                                "childNodes": {
                                  Symbol(Symbol.iterator): [Function],
                                },
                                "hasChildNodes": false,
                                "index": 0,
                                "key": "$.0",
                                "level": 0,
                                "nextKey": "$.1",
                                "parentKey": null,
                                "prevKey": undefined,
                                "props": {
                                  "children": "Item 1",
                                },
                                "rendered": "Item 1",
                                "shouldInvalidate": undefined,
                                "textValue": "Item 1",
                                "type": "item",
                                "value": undefined,
                                "wrapper": undefined,
                              },
                              "$.1" => {
                                "aria-label": undefined,
                                "childNodes": {
                                  Symbol(Symbol.iterator): [Function],
                                },
                                "hasChildNodes": false,
                                "index": 1,
                                "key": "$.1",
                                "level": 0,
                                "nextKey": undefined,
                                "parentKey": null,
                                "prevKey": "$.0",
                                "props": {
                                  "children": "Item 2",
                                },
                                "rendered": "Item 2",
                                "shouldInvalidate": undefined,
                                "textValue": "Item 2",
                                "type": "item",
                                "value": undefined,
                                "wrapper": undefined,
                              },
                            },
                            "lastKey": "$.1",
                          },
                          "disabledKeys": Set {
                            "$.0",
                          },
                          "focusStrategy": null,
                          "isFocused": false,
                          "isOpen": true,
                          "open": [Function],
                          "selectedItem": null,
                          "selectedKey": null,
                          "selectionManager": SelectionManager {
                            "_isSelectAll": null,
                            "allowsCellSelection": false,
                            "collection": ListCollection {
                              "firstKey": "$.0",
                              "iterable": {
                                Symbol(Symbol.iterator): [Function],
                              },
                              "keyMap": Map {
                                "$.0" => {
                                  "aria-label": undefined,
                                  "childNodes": {
                                    Symbol(Symbol.iterator): [Function],
                                  },
                                  "hasChildNodes": false,
                                  "index": 0,
                                  "key": "$.0",
                                  "level": 0,
                                  "nextKey": "$.1",
                                  "parentKey": null,
                                  "prevKey": undefined,
                                  "props": {
                                    "children": "Item 1",
                                  },
                                  "rendered": "Item 1",
                                  "shouldInvalidate": undefined,
                                  "textValue": "Item 1",
                                  "type": "item",
                                  "value": undefined,
                                  "wrapper": undefined,
                                },
                                "$.1" => {
                                  "aria-label": undefined,
                                  "childNodes": {
                                    Symbol(Symbol.iterator): [Function],
                                  },
                                  "hasChildNodes": false,
                                  "index": 1,
                                  "key": "$.1",
                                  "level": 0,
                                  "nextKey": undefined,
                                  "parentKey": null,
                                  "prevKey": "$.0",
                                  "props": {
                                    "children": "Item 2",
                                  },
                                  "rendered": "Item 2",
                                  "shouldInvalidate": undefined,
                                  "textValue": "Item 2",
                                  "type": "item",
                                  "value": undefined,
                                  "wrapper": undefined,
                                },
                              },
                              "lastKey": "$.1",
                            },
                            "state": {
                              "childFocusStrategy": "first",
                              "disabledKeys": Set {
                                "$.0",
                              },
                              "disallowEmptySelection": true,
                              "focusedKey": "$.1",
                              "isFocused": true,
                              "selectedKeys": Set {},
                              "selectionMode": "single",
                              "setFocused": [Function],
                              "setFocusedKey": [Function],
                              "setSelectedKeys": [Function],
                            },
                          },
                          "setFocused": [Function],
                          "setSelectedKey": [Function],
                          "toggle": [Function],
                        }
                      }
                    >
                      <MenuListBackground
                        aria-labelledby="test-ID"
                        className="md-select-menu-listbox"
                        color="primary"
                        id="test-ID"
                        onBlur={[Function]}
                        onFocus={[Function]}
                        onKeyDown={[Function]}
                        onKeyDownCapture={[Function]}
                        onMouseDown={[Function]}
                        role="listbox"
                        tabIndex={-1}
                      >
                        <FocusRing>
                          <FocusRing
                            focusClass="md-focus-ring-wrapper children"
                            focusRingClass="md-focus-ring-wrapper children"
                          >
                            <ul
                              aria-labelledby="test-ID"
                              className="md-select-menu-listbox md-menu-list-background-wrapper"
                              data-color="primary"
                              id="test-ID"
                              onBlur={[Function]}
                              onFocus={[Function]}
                              onKeyDown={[Function]}
                              onKeyDownCapture={[Function]}
                              onMouseDown={[Function]}
                              role="listbox"
                              tabIndex={-1}
                            >
                              <ListBoxItem
                                item={
                                  {
                                    "aria-label": undefined,
                                    "childNodes": {
                                      Symbol(Symbol.iterator): [Function],
                                    },
                                    "hasChildNodes": false,
                                    "index": 0,
                                    "key": "$.0",
                                    "level": 0,
                                    "nextKey": "$.1",
                                    "parentKey": null,
                                    "prevKey": undefined,
                                    "props": {
                                      "children": "Item 1",
                                    },
                                    "rendered": "Item 1",
                                    "shouldInvalidate": undefined,
                                    "textValue": "Item 1",
                                    "type": "item",
                                    "value": undefined,
                                    "wrapper": undefined,
                                  }
                                }
                                key="$.0"
                              >
                                <ListItemBase
                                  aria-describedby={null}
                                  aria-disabled={true}
                                  aria-labelledby={null}
                                  aria-selected={false}
                                  data-key="$.0"
                                  id="test-ID-option-$.0"
                                  isDisabled={true}
                                  isPadded={true}
                                  key="$.0"
                                  onClick={[Function]}
                                  onDragStart={[Function]}
                                  onFocus={[Function]}
                                  onKeyDown={[Function]}
                                  onKeyUp={[Function]}
                                  onMouseDown={[Function]}
                                  onMouseEnter={[Function]}
                                  onMouseLeave={[Function]}
                                  onMouseUp={[Function]}
                                  onTouchCancel={[Function]}
                                  onTouchEnd={[Function]}
                                  onTouchMove={[Function]}
                                  onTouchStart={[Function]}
                                  role="option"
                                  tabIndex={-1}
                                >
                                  <FocusRing
                                    isInset={false}
                                  >
                                    <FocusRing
                                      focusClass="md-focus-ring-wrapper children"
                                      focusRingClass="md-focus-ring-wrapper children"
                                      isInset={false}
                                    >
                                      <li
                                        aria-describedby={null}
                                        aria-disabled={true}
                                        aria-labelledby={null}
                                        aria-selected={false}
                                        className="md-list-item-base-wrapper"
                                        data-allow-text-select={false}
                                        data-disabled={true}
                                        data-interactive={true}
                                        data-key="$.0"
                                        data-padded={true}
                                        data-shape="rectangle"
                                        data-size={40}
                                        id="test-ID-option-$.0"
                                        onBlur={[Function]}
                                        onClick={[Function]}
                                        onDragStart={[Function]}
                                        onFocus={[Function]}
                                        onKeyDown={[Function]}
                                        onKeyUp={[Function]}
                                        onMouseDown={[Function]}
                                        onMouseEnter={[Function]}
                                        onMouseLeave={[Function]}
                                        onMouseUp={[Function]}
                                        onPointerDown={[Function]}
                                        onTouchCancel={[Function]}
                                        onTouchEnd={[Function]}
                                        onTouchMove={[Function]}
                                        onTouchStart={[Function]}
                                        role="option"
                                        tabIndex={-1}
                                      >
                                        <ListItemBaseSection
                                          position="fill"
                                          title="Item 1"
                                        >
                                          <div
                                            data-position="fill"
                                            title="Item 1"
                                          >
                                            Item 1
                                          </div>
                                        </ListItemBaseSection>
                                      </li>
                                    </FocusRing>
                                  </FocusRing>
                                </ListItemBase>
                              </ListBoxItem>
                              <ListBoxItem
                                item={
                                  {
                                    "aria-label": undefined,
                                    "childNodes": {
                                      Symbol(Symbol.iterator): [Function],
                                    },
                                    "hasChildNodes": false,
                                    "index": 1,
                                    "key": "$.1",
                                    "level": 0,
                                    "nextKey": undefined,
                                    "parentKey": null,
                                    "prevKey": "$.0",
                                    "props": {
                                      "children": "Item 2",
                                    },
                                    "rendered": "Item 2",
                                    "shouldInvalidate": undefined,
                                    "textValue": "Item 2",
                                    "type": "item",
                                    "value": undefined,
                                    "wrapper": undefined,
                                  }
                                }
                                key="$.1"
                              >
                                <ListItemBase
                                  aria-describedby={null}
                                  aria-disabled={false}
                                  aria-labelledby={null}
                                  aria-selected={false}
                                  data-key="$.1"
                                  id="test-ID-option-$.1"
                                  isDisabled={false}
                                  isPadded={true}
                                  key="$.1"
                                  onClick={[Function]}
                                  onDragStart={[Function]}
                                  onFocus={[Function]}
                                  onKeyDown={[Function]}
                                  onKeyUp={[Function]}
                                  onMouseDown={[Function]}
                                  onMouseEnter={[Function]}
                                  onMouseLeave={[Function]}
                                  onMouseUp={[Function]}
                                  onTouchCancel={[Function]}
                                  onTouchEnd={[Function]}
                                  onTouchMove={[Function]}
                                  onTouchStart={[Function]}
                                  role="option"
                                  tabIndex={0}
                                >
                                  <FocusRing
                                    isInset={false}
                                  >
                                    <FocusRing
                                      focusClass="md-focus-ring-wrapper children"
                                      focusRingClass="md-focus-ring-wrapper children"
                                      isInset={false}
                                    >
                                      <li
                                        aria-describedby={null}
                                        aria-disabled={false}
                                        aria-labelledby={null}
                                        aria-selected={false}
                                        className="md-list-item-base-wrapper"
                                        data-allow-text-select={false}
                                        data-disabled={false}
                                        data-interactive={true}
                                        data-key="$.1"
                                        data-padded={true}
                                        data-shape="rectangle"
                                        data-size={40}
                                        id="test-ID-option-$.1"
                                        onBlur={[Function]}
                                        onClick={[Function]}
                                        onDragStart={[Function]}
                                        onFocus={[Function]}
                                        onKeyDown={[Function]}
                                        onKeyUp={[Function]}
                                        onMouseDown={[Function]}
                                        onMouseEnter={[Function]}
                                        onMouseLeave={[Function]}
                                        onMouseUp={[Function]}
                                        onPointerDown={[Function]}
                                        onTouchCancel={[Function]}
                                        onTouchEnd={[Function]}
                                        onTouchMove={[Function]}
                                        onTouchStart={[Function]}
                                        role="option"
                                        tabIndex={0}
                                      >
                                        <ListItemBaseSection
                                          position="fill"
                                          title="Item 2"
                                        >
                                          <div
                                            data-position="fill"
                                            title="Item 2"
                                          >
                                            Item 2
                                          </div>
                                        </ListItemBaseSection>
                                      </li>
                                    </FocusRing>
                                  </FocusRing>
                                </ListItemBase>
                              </ListBoxItem>
                            </ul>
                          </FocusRing>
                        </FocusRing>
                      </MenuListBackground>
                    </ListBoxBase>
                  </div>
                  <span
                    data-focus-scope-end={true}
                    hidden={true}
                  />
                </FocusScope>
              </ModalContainer>
            </Portal>
          </Tippy>
        </ForwardRef(TippyWrapper)>
      </LazyTippy>
    </Popover>
  </div>
</Select>
`;

exports[`Select snapshot should match snapshot with id 1`] = `
<Select
  id="example-id"
  label="test"
>
  <div
    className="md-select-wrapper"
    id="example-id"
    style={
      {
        "--local-width": "100%",
      }
    }
  >
    <label
      id="test-ID"
      onClick={[Function]}
    >
      <Text>
        <p
          className="md-text-wrapper"
          data-type="body-primary"
        >
          test
        </p>
      </Text>
    </label>
    <HiddenSelect
      label="test"
      state={
        {
          "close": [Function],
          "collection": ListCollection {
            "firstKey": "$.0",
            "iterable": {
              Symbol(Symbol.iterator): [Function],
            },
            "keyMap": Map {
              "$.0" => {
                "aria-label": undefined,
                "childNodes": {
                  Symbol(Symbol.iterator): [Function],
                },
                "hasChildNodes": false,
                "index": 0,
                "key": "$.0",
                "level": 0,
                "nextKey": "$.1",
                "parentKey": null,
                "prevKey": undefined,
                "props": {
                  "children": "Item 1",
                },
                "rendered": "Item 1",
                "shouldInvalidate": undefined,
                "textValue": "Item 1",
                "type": "item",
                "value": undefined,
                "wrapper": undefined,
              },
              "$.1" => {
                "aria-label": undefined,
                "childNodes": {
                  Symbol(Symbol.iterator): [Function],
                },
                "hasChildNodes": false,
                "index": 1,
                "key": "$.1",
                "level": 0,
                "nextKey": undefined,
                "parentKey": null,
                "prevKey": "$.0",
                "props": {
                  "children": "Item 2",
                },
                "rendered": "Item 2",
                "shouldInvalidate": undefined,
                "textValue": "Item 2",
                "type": "item",
                "value": undefined,
                "wrapper": undefined,
              },
            },
            "lastKey": "$.1",
          },
          "disabledKeys": Set {},
          "focusStrategy": null,
          "isFocused": false,
          "isOpen": false,
          "open": [Function],
          "selectedItem": null,
          "selectedKey": null,
          "selectionManager": SelectionManager {
            "_isSelectAll": null,
            "allowsCellSelection": false,
            "collection": ListCollection {
              "firstKey": "$.0",
              "iterable": {
                Symbol(Symbol.iterator): [Function],
              },
              "keyMap": Map {
                "$.0" => {
                  "aria-label": undefined,
                  "childNodes": {
                    Symbol(Symbol.iterator): [Function],
                  },
                  "hasChildNodes": false,
                  "index": 0,
                  "key": "$.0",
                  "level": 0,
                  "nextKey": "$.1",
                  "parentKey": null,
                  "prevKey": undefined,
                  "props": {
                    "children": "Item 1",
                  },
                  "rendered": "Item 1",
                  "shouldInvalidate": undefined,
                  "textValue": "Item 1",
                  "type": "item",
                  "value": undefined,
                  "wrapper": undefined,
                },
                "$.1" => {
                  "aria-label": undefined,
                  "childNodes": {
                    Symbol(Symbol.iterator): [Function],
                  },
                  "hasChildNodes": false,
                  "index": 1,
                  "key": "$.1",
                  "level": 0,
                  "nextKey": undefined,
                  "parentKey": null,
                  "prevKey": "$.0",
                  "props": {
                    "children": "Item 2",
                  },
                  "rendered": "Item 2",
                  "shouldInvalidate": undefined,
                  "textValue": "Item 2",
                  "type": "item",
                  "value": undefined,
                  "wrapper": undefined,
                },
              },
              "lastKey": "$.1",
            },
            "state": {
              "childFocusStrategy": null,
              "disabledKeys": Set {},
              "disallowEmptySelection": true,
              "focusedKey": null,
              "isFocused": false,
              "selectedKeys": Set {},
              "selectionMode": "single",
              "setFocused": [Function],
              "setFocusedKey": [Function],
              "setSelectedKeys": [Function],
            },
          },
          "setFocused": [Function],
          "setSelectedKey": [Function],
          "toggle": [Function],
        }
      }
      triggerRef={
        {
          "current": <button
            aria-controls="example-id"
            aria-expanded="false"
            aria-haspopup="listbox"
            aria-labelledby="test-ID test-ID"
            class="md-select-dropdown-input"
            id="example-id"
            role="combobox"
            type="button"
          >
            <span
              class="md-select-selected-item-wrapper"
              id="test-ID"
            />
            <span
              aria-hidden="true"
              class="md-select-icon-wrapper"
            >
              <div
                aria-hidden="true"
                class="md-icon-wrapper md-icon-auto-scales md-icon-scales md-icon-no-shrink"
                role="img"
              >
                <svg
                  aria-hidden="true"
                  class=""
                  data-autoscale="false"
                  data-scale="16"
                  data-test="arrow-down"
                  fill="currentColor"
                  height="100%"
                  viewBox="0, 0, 32, 32"
                  width="100%"
                />
              </div>
            </span>
          </button>,
        }
      }
    >
      <div
        aria-hidden={true}
        style={
          {
            "border": 0,
            "clip": "rect(0 0 0 0)",
            "clipPath": "inset(50%)",
            "height": 1,
            "margin": "0 -1px -1px 0",
            "overflow": "hidden",
            "padding": 0,
            "position": "absolute",
            "whiteSpace": "nowrap",
            "width": 1,
          }
        }
      >
        <input
          onFocus={[Function]}
          style={
            {
              "fontSize": 16,
            }
          }
          tabIndex={-1}
          type="text"
        />
        <label>
          test
          <select
            onChange={[Function]}
            size={2}
            tabIndex={-1}
            value=""
          >
            <option />
            <option
              key="$.0"
              value="$.0"
            >
              Item 1
            </option>
            <option
              key="$.1"
              value="$.1"
            >
              Item 2
            </option>
          </select>
        </label>
      </div>
    </HiddenSelect>
    <Popover
      className="md-select-popover"
      hideOnEsc={false}
      interactive={true}
      onClickOutside={[Function]}
      onHide={[Function]}
      onKeyDown={[Function]}
      placement="bottom"
      role={null}
      setInstance={[Function]}
      showArrow={false}
      strategy="absolute"
      style={
        {
          "maxHeight": "none",
        }
      }
      trigger="manual"
      triggerComponent={
        <button
          aria-activedescendant={null}
          aria-controls="example-id"
          aria-expanded={false}
          aria-haspopup="listbox"
          aria-labelledby="test-ID test-ID"
          className="md-select-dropdown-input"
          id="example-id"
          onBlur={[Function]}
          onClick={[Function]}
          onDragStart={[Function]}
          onFocus={[Function]}
          onKeyDown={[Function]}
          onKeyUp={[Function]}
          onMouseDown={[Function]}
          onMouseEnter={[Function]}
          onMouseLeave={[Function]}
          onMouseUp={[Function]}
          onTouchCancel={[Function]}
          onTouchEnd={[Function]}
          onTouchMove={[Function]}
          onTouchStart={[Function]}
          role="combobox"
          type="button"
        >
          <span
            className="md-select-selected-item-wrapper"
            id="test-ID"
          />
          <span
            aria-hidden="true"
            className="md-select-icon-wrapper"
          >
            <Icon
              name="arrow-down"
              scale={16}
              weight="bold"
            />
          </span>
        </button>
      }
    >
      <LazyTippy
        animation={false}
        appendTo="parent"
        hideOnClick={false}
        interactive={true}
        offset={
          [
            0,
            5,
          ]
        }
        onClickOutside={[Function]}
        onHidden={[Function]}
        onHide={[Function]}
        placement="bottom"
        plugins={
          [
            {
              "fn": [Function],
              "name": "addBackdropPlugin",
            },
          ]
        }
        popperOptions={
          {
            "modifiers": [
              {
                "enabled": false,
                "name": "arrow",
                "options": {
                  "element": "#arrow1",
                  "padding": 5,
                },
              },
              {
                "name": "preventOverflow",
                "options": {
                  "altAxis": true,
                  "boundariesElement": "scrollParent",
                  "padding": 8,
                },
              },
            ],
            "strategy": "absolute",
          }
        }
        render={[Function]}
        setInstance={[Function]}
        trigger="manual"
      >
        <ForwardRef(TippyWrapper)
          animation={false}
          appendTo="parent"
          hideOnClick={false}
          interactive={true}
          offset={
            [
              0,
              5,
            ]
          }
          onClickOutside={[Function]}
          onHidden={[Function]}
          onHide={[Function]}
          placement="bottom"
          plugins={
            [
              {
                "fn": [Function],
              },
              {
                "fn": [Function],
              },
              {
                "fn": [Function],
              },
              {
                "fn": [Function],
                "name": "addBackdropPlugin",
              },
            ]
          }
          popperOptions={
            {
              "modifiers": [
                {
                  "enabled": false,
                  "name": "arrow",
                  "options": {
                    "element": "#arrow1",
                    "padding": 5,
                  },
                },
                {
                  "name": "preventOverflow",
                  "options": {
                    "altAxis": true,
                    "boundariesElement": "scrollParent",
                    "padding": 8,
                  },
                },
              ],
              "strategy": "absolute",
            }
          }
          render={[Function]}
          trigger="manual"
        >
          <Tippy
            animation={false}
            appendTo="parent"
            hideOnClick={false}
            interactive={true}
            offset={
              [
                0,
                5,
              ]
            }
            onClickOutside={[Function]}
            onHidden={[Function]}
            onHide={[Function]}
            placement="bottom"
            plugins={
              [
                {
                  "fn": [Function],
                },
                {
                  "fn": [Function],
                },
                {
                  "fn": [Function],
                },
                {
                  "fn": [Function],
                  "name": "addBackdropPlugin",
                },
              ]
            }
            popperOptions={
              {
                "modifiers": [
                  {
                    "enabled": false,
                    "name": "arrow",
                    "options": {
                      "element": "#arrow1",
                      "padding": 5,
                    },
                  },
                  {
                    "name": "preventOverflow",
                    "options": {
                      "altAxis": true,
                      "boundariesElement": "scrollParent",
                      "padding": 8,
                    },
                  },
                ],
                "strategy": "absolute",
              }
            }
            render={[Function]}
            trigger="manual"
          >
            <button
              aria-activedescendant={null}
              aria-controls="example-id"
              aria-expanded={false}
              aria-haspopup="listbox"
              aria-labelledby="test-ID test-ID"
              className="md-select-dropdown-input"
              id="example-id"
              onBlur={[Function]}
              onClick={[Function]}
              onDragStart={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              onMouseDown={[Function]}
              onMouseEnter={[Function]}
              onMouseLeave={[Function]}
              onMouseUp={[Function]}
              onTouchCancel={[Function]}
              onTouchEnd={[Function]}
              onTouchMove={[Function]}
              onTouchStart={[Function]}
              role="combobox"
              type="button"
            >
              <span
                className="md-select-selected-item-wrapper"
                id="test-ID"
              />
              <span
                aria-hidden="true"
                className="md-select-icon-wrapper"
              >
                <Icon
                  name="arrow-down"
                  scale={16}
                  weight="bold"
                >
                  <div
                    aria-hidden="true"
                    className="md-icon-wrapper md-icon-auto-scales md-icon-scales md-icon-no-shrink"
                    role="img"
                  >
                    <svg
                      aria-hidden="true"
                      className=""
                      data-autoscale={false}
                      data-scale={16}
                      data-test="arrow-down"
                      fill="currentColor"
                      height="100%"
                      style={{}}
                      viewBox="0, 0, 32, 32"
                      width="100%"
                    />
                  </div>
                </Icon>
              </span>
            </button>
            <Portal
              containerInfo={
                <div
                  data-tippy-root=""
                  id="tippy-3"
                  style="z-index: 9999;"
                >
                  
                </div>
              }
            />
          </Tippy>
        </ForwardRef(TippyWrapper)>
      </LazyTippy>
    </Popover>
  </div>
</Select>
`;

exports[`Select snapshot should match snapshot with isInForm = false 1`] = `
<Select
  isInForm={false}
  label="test"
>
  <div
    className="md-select-wrapper"
    style={
      {
        "--local-width": "100%",
      }
    }
  >
    <label
      id="test-ID"
      onClick={[Function]}
    >
      <Text>
        <p
          className="md-text-wrapper"
          data-type="body-primary"
        >
          test
        </p>
      </Text>
    </label>
    <Popover
      className="md-select-popover"
      hideOnEsc={false}
      interactive={true}
      onClickOutside={[Function]}
      onHide={[Function]}
      onKeyDown={[Function]}
      placement="bottom"
      role={null}
      setInstance={[Function]}
      showArrow={false}
      strategy="absolute"
      style={
        {
          "maxHeight": "none",
        }
      }
      trigger="manual"
      triggerComponent={
        <button
          aria-activedescendant={null}
          aria-expanded={false}
          aria-haspopup="listbox"
          aria-labelledby="test-ID test-ID"
          className="md-select-dropdown-input"
          id="test-ID"
          onBlur={[Function]}
          onClick={[Function]}
          onDragStart={[Function]}
          onFocus={[Function]}
          onKeyDown={[Function]}
          onKeyUp={[Function]}
          onMouseDown={[Function]}
          onMouseEnter={[Function]}
          onMouseLeave={[Function]}
          onMouseUp={[Function]}
          onTouchCancel={[Function]}
          onTouchEnd={[Function]}
          onTouchMove={[Function]}
          onTouchStart={[Function]}
          role="combobox"
          type="button"
        >
          <span
            className="md-select-selected-item-wrapper"
            id="test-ID"
          />
          <span
            aria-hidden="true"
            className="md-select-icon-wrapper"
          >
            <Icon
              name="arrow-down"
              scale={16}
              weight="bold"
            />
          </span>
        </button>
      }
    >
      <LazyTippy
        animation={false}
        appendTo="parent"
        hideOnClick={false}
        interactive={true}
        offset={
          [
            0,
            5,
          ]
        }
        onClickOutside={[Function]}
        onHidden={[Function]}
        onHide={[Function]}
        placement="bottom"
        plugins={
          [
            {
              "fn": [Function],
              "name": "addBackdropPlugin",
            },
          ]
        }
        popperOptions={
          {
            "modifiers": [
              {
                "enabled": false,
                "name": "arrow",
                "options": {
                  "element": "#arrow1",
                  "padding": 5,
                },
              },
              {
                "name": "preventOverflow",
                "options": {
                  "altAxis": true,
                  "boundariesElement": "scrollParent",
                  "padding": 8,
                },
              },
            ],
            "strategy": "absolute",
          }
        }
        render={[Function]}
        setInstance={[Function]}
        trigger="manual"
      >
        <ForwardRef(TippyWrapper)
          animation={false}
          appendTo="parent"
          hideOnClick={false}
          interactive={true}
          offset={
            [
              0,
              5,
            ]
          }
          onClickOutside={[Function]}
          onHidden={[Function]}
          onHide={[Function]}
          placement="bottom"
          plugins={
            [
              {
                "fn": [Function],
              },
              {
                "fn": [Function],
              },
              {
                "fn": [Function],
              },
              {
                "fn": [Function],
                "name": "addBackdropPlugin",
              },
            ]
          }
          popperOptions={
            {
              "modifiers": [
                {
                  "enabled": false,
                  "name": "arrow",
                  "options": {
                    "element": "#arrow1",
                    "padding": 5,
                  },
                },
                {
                  "name": "preventOverflow",
                  "options": {
                    "altAxis": true,
                    "boundariesElement": "scrollParent",
                    "padding": 8,
                  },
                },
              ],
              "strategy": "absolute",
            }
          }
          render={[Function]}
          trigger="manual"
        >
          <Tippy
            animation={false}
            appendTo="parent"
            hideOnClick={false}
            interactive={true}
            offset={
              [
                0,
                5,
              ]
            }
            onClickOutside={[Function]}
            onHidden={[Function]}
            onHide={[Function]}
            placement="bottom"
            plugins={
              [
                {
                  "fn": [Function],
                },
                {
                  "fn": [Function],
                },
                {
                  "fn": [Function],
                },
                {
                  "fn": [Function],
                  "name": "addBackdropPlugin",
                },
              ]
            }
            popperOptions={
              {
                "modifiers": [
                  {
                    "enabled": false,
                    "name": "arrow",
                    "options": {
                      "element": "#arrow1",
                      "padding": 5,
                    },
                  },
                  {
                    "name": "preventOverflow",
                    "options": {
                      "altAxis": true,
                      "boundariesElement": "scrollParent",
                      "padding": 8,
                    },
                  },
                ],
                "strategy": "absolute",
              }
            }
            render={[Function]}
            trigger="manual"
          >
            <button
              aria-activedescendant={null}
              aria-expanded={false}
              aria-haspopup="listbox"
              aria-labelledby="test-ID test-ID"
              className="md-select-dropdown-input"
              id="test-ID"
              onBlur={[Function]}
              onClick={[Function]}
              onDragStart={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              onMouseDown={[Function]}
              onMouseEnter={[Function]}
              onMouseLeave={[Function]}
              onMouseUp={[Function]}
              onTouchCancel={[Function]}
              onTouchEnd={[Function]}
              onTouchMove={[Function]}
              onTouchStart={[Function]}
              role="combobox"
              type="button"
            >
              <span
                className="md-select-selected-item-wrapper"
                id="test-ID"
              />
              <span
                aria-hidden="true"
                className="md-select-icon-wrapper"
              >
                <Icon
                  name="arrow-down"
                  scale={16}
                  weight="bold"
                >
                  <div
                    aria-hidden="true"
                    className="md-icon-wrapper md-icon-auto-scales md-icon-scales md-icon-no-shrink"
                    role="img"
                  >
                    <svg
                      aria-hidden="true"
                      className=""
                      data-autoscale={false}
                      data-scale={16}
                      data-test="arrow-down"
                      fill="currentColor"
                      height="100%"
                      style={{}}
                      viewBox="0, 0, 32, 32"
                      width="100%"
                    />
                  </div>
                </Icon>
              </span>
            </button>
            <Portal
              containerInfo={
                <div
                  data-tippy-root=""
                  id="tippy-15"
                  style="z-index: 9999;"
                >
                  
                </div>
              }
            />
          </Tippy>
        </ForwardRef(TippyWrapper)>
      </LazyTippy>
    </Popover>
  </div>
</Select>
`;

exports[`Select snapshot should match snapshot with listbox opened 1`] = `
<Select
  id="test-id"
  isOpen={true}
  label="test"
>
  <div
    className="md-select-wrapper"
    id="test-id"
    style={
      {
        "--local-width": "100%",
      }
    }
  >
    <label
      id="test-ID"
      onClick={[Function]}
    >
      <Text>
        <p
          className="md-text-wrapper"
          data-type="body-primary"
        >
          test
        </p>
      </Text>
    </label>
    <HiddenSelect
      label="test"
      state={
        {
          "close": [Function],
          "collection": ListCollection {
            "firstKey": "$.0",
            "iterable": {
              Symbol(Symbol.iterator): [Function],
            },
            "keyMap": Map {
              "$.0" => {
                "aria-label": undefined,
                "childNodes": {
                  Symbol(Symbol.iterator): [Function],
                },
                "hasChildNodes": false,
                "index": 0,
                "key": "$.0",
                "level": 0,
                "nextKey": "$.1",
                "parentKey": null,
                "prevKey": undefined,
                "props": {
                  "children": "Item 1",
                },
                "rendered": "Item 1",
                "shouldInvalidate": undefined,
                "textValue": "Item 1",
                "type": "item",
                "value": undefined,
                "wrapper": undefined,
              },
              "$.1" => {
                "aria-label": undefined,
                "childNodes": {
                  Symbol(Symbol.iterator): [Function],
                },
                "hasChildNodes": false,
                "index": 1,
                "key": "$.1",
                "level": 0,
                "nextKey": undefined,
                "parentKey": null,
                "prevKey": "$.0",
                "props": {
                  "children": "Item 2",
                },
                "rendered": "Item 2",
                "shouldInvalidate": undefined,
                "textValue": "Item 2",
                "type": "item",
                "value": undefined,
                "wrapper": undefined,
              },
            },
            "lastKey": "$.1",
          },
          "disabledKeys": Set {},
          "focusStrategy": null,
          "isFocused": false,
          "isOpen": true,
          "open": [Function],
          "selectedItem": null,
          "selectedKey": null,
          "selectionManager": SelectionManager {
            "_isSelectAll": null,
            "allowsCellSelection": false,
            "collection": ListCollection {
              "firstKey": "$.0",
              "iterable": {
                Symbol(Symbol.iterator): [Function],
              },
              "keyMap": Map {
                "$.0" => {
                  "aria-label": undefined,
                  "childNodes": {
                    Symbol(Symbol.iterator): [Function],
                  },
                  "hasChildNodes": false,
                  "index": 0,
                  "key": "$.0",
                  "level": 0,
                  "nextKey": "$.1",
                  "parentKey": null,
                  "prevKey": undefined,
                  "props": {
                    "children": "Item 1",
                  },
                  "rendered": "Item 1",
                  "shouldInvalidate": undefined,
                  "textValue": "Item 1",
                  "type": "item",
                  "value": undefined,
                  "wrapper": undefined,
                },
                "$.1" => {
                  "aria-label": undefined,
                  "childNodes": {
                    Symbol(Symbol.iterator): [Function],
                  },
                  "hasChildNodes": false,
                  "index": 1,
                  "key": "$.1",
                  "level": 0,
                  "nextKey": undefined,
                  "parentKey": null,
                  "prevKey": "$.0",
                  "props": {
                    "children": "Item 2",
                  },
                  "rendered": "Item 2",
                  "shouldInvalidate": undefined,
                  "textValue": "Item 2",
                  "type": "item",
                  "value": undefined,
                  "wrapper": undefined,
                },
              },
              "lastKey": "$.1",
            },
            "state": {
              "childFocusStrategy": "first",
              "disabledKeys": Set {},
              "disallowEmptySelection": true,
              "focusedKey": "$.0",
              "isFocused": true,
              "selectedKeys": Set {},
              "selectionMode": "single",
              "setFocused": [Function],
              "setFocusedKey": [Function],
              "setSelectedKeys": [Function],
            },
          },
          "setFocused": [Function],
          "setSelectedKey": [Function],
          "toggle": [Function],
        }
      }
      triggerRef={
        {
          "current": <button
            aria-activedescendant="test-ID-option-$.0"
            aria-controls="test-id"
            aria-expanded="true"
            aria-haspopup="listbox"
            aria-labelledby="test-ID test-ID"
            class="md-select-dropdown-input md-select-open"
            id="test-ID"
            role="combobox"
            type="button"
          >
            <span
              class="md-select-selected-item-wrapper"
              id="test-ID"
            />
            <span
              aria-hidden="true"
              class="md-select-icon-wrapper"
            >
              <div
                aria-hidden="true"
                class="md-icon-wrapper md-icon-auto-scales md-icon-scales md-icon-no-shrink"
                role="img"
              >
                <svg
                  aria-hidden="true"
                  class=""
                  data-autoscale="false"
                  data-scale="16"
                  data-test="arrow-up"
                  fill="currentColor"
                  height="100%"
                  viewBox="0, 0, 32, 32"
                  width="100%"
                />
              </div>
            </span>
          </button>,
        }
      }
    >
      <div
        aria-hidden={true}
        style={
          {
            "border": 0,
            "clip": "rect(0 0 0 0)",
            "clipPath": "inset(50%)",
            "height": 1,
            "margin": "0 -1px -1px 0",
            "overflow": "hidden",
            "padding": 0,
            "position": "absolute",
            "whiteSpace": "nowrap",
            "width": 1,
          }
        }
      >
        <input
          onFocus={[Function]}
          style={
            {
              "fontSize": 16,
            }
          }
          tabIndex={-1}
          type="text"
        />
        <label>
          test
          <select
            onChange={[Function]}
            size={2}
            tabIndex={-1}
            value=""
          >
            <option />
            <option
              key="$.0"
              value="$.0"
            >
              Item 1
            </option>
            <option
              key="$.1"
              value="$.1"
            >
              Item 2
            </option>
          </select>
        </label>
      </div>
    </HiddenSelect>
    <Popover
      className="md-select-popover"
      hideOnEsc={false}
      interactive={true}
      onClickOutside={[Function]}
      onHide={[Function]}
      onKeyDown={[Function]}
      placement="bottom"
      role={null}
      setInstance={[Function]}
      showArrow={false}
      strategy="absolute"
      style={
        {
          "maxHeight": "none",
        }
      }
      trigger="manual"
      triggerComponent={
        <button
          aria-activedescendant="test-ID-option-$.0"
          aria-controls="test-id"
          aria-expanded={true}
          aria-haspopup="listbox"
          aria-labelledby="test-ID test-ID"
          className="md-select-dropdown-input md-select-open"
          id="test-ID"
          onBlur={[Function]}
          onClick={[Function]}
          onDragStart={[Function]}
          onFocus={[Function]}
          onKeyDown={[Function]}
          onKeyUp={[Function]}
          onMouseDown={[Function]}
          onMouseEnter={[Function]}
          onMouseLeave={[Function]}
          onMouseUp={[Function]}
          onTouchCancel={[Function]}
          onTouchEnd={[Function]}
          onTouchMove={[Function]}
          onTouchStart={[Function]}
          role="combobox"
          type="button"
        >
          <span
            className="md-select-selected-item-wrapper"
            id="test-ID"
          />
          <span
            aria-hidden="true"
            className="md-select-icon-wrapper"
          >
            <Icon
              name="arrow-up"
              scale={16}
              weight="bold"
            />
          </span>
        </button>
      }
    >
      <LazyTippy
        animation={false}
        appendTo="parent"
        hideOnClick={false}
        interactive={true}
        offset={
          [
            0,
            5,
          ]
        }
        onClickOutside={[Function]}
        onHidden={[Function]}
        onHide={[Function]}
        placement="bottom"
        plugins={
          [
            {
              "fn": [Function],
              "name": "addBackdropPlugin",
            },
          ]
        }
        popperOptions={
          {
            "modifiers": [
              {
                "enabled": false,
                "name": "arrow",
                "options": {
                  "element": "#arrow1",
                  "padding": 5,
                },
              },
              {
                "name": "preventOverflow",
                "options": {
                  "altAxis": true,
                  "boundariesElement": "scrollParent",
                  "padding": 8,
                },
              },
            ],
            "strategy": "absolute",
          }
        }
        render={[Function]}
        setInstance={[Function]}
        trigger="manual"
      >
        <ForwardRef(TippyWrapper)
          animation={false}
          appendTo="parent"
          hideOnClick={false}
          interactive={true}
          offset={
            [
              0,
              5,
            ]
          }
          onClickOutside={[Function]}
          onHidden={[Function]}
          onHide={[Function]}
          placement="bottom"
          plugins={
            [
              {
                "fn": [Function],
              },
              {
                "fn": [Function],
              },
              {
                "fn": [Function],
              },
              {
                "fn": [Function],
                "name": "addBackdropPlugin",
              },
            ]
          }
          popperOptions={
            {
              "modifiers": [
                {
                  "enabled": false,
                  "name": "arrow",
                  "options": {
                    "element": "#arrow1",
                    "padding": 5,
                  },
                },
                {
                  "name": "preventOverflow",
                  "options": {
                    "altAxis": true,
                    "boundariesElement": "scrollParent",
                    "padding": 8,
                  },
                },
              ],
              "strategy": "absolute",
            }
          }
          render={[Function]}
          trigger="manual"
        >
          <Tippy
            animation={false}
            appendTo="parent"
            hideOnClick={false}
            interactive={true}
            offset={
              [
                0,
                5,
              ]
            }
            onClickOutside={[Function]}
            onHidden={[Function]}
            onHide={[Function]}
            placement="bottom"
            plugins={
              [
                {
                  "fn": [Function],
                },
                {
                  "fn": [Function],
                },
                {
                  "fn": [Function],
                },
                {
                  "fn": [Function],
                  "name": "addBackdropPlugin",
                },
              ]
            }
            popperOptions={
              {
                "modifiers": [
                  {
                    "enabled": false,
                    "name": "arrow",
                    "options": {
                      "element": "#arrow1",
                      "padding": 5,
                    },
                  },
                  {
                    "name": "preventOverflow",
                    "options": {
                      "altAxis": true,
                      "boundariesElement": "scrollParent",
                      "padding": 8,
                    },
                  },
                ],
                "strategy": "absolute",
              }
            }
            render={[Function]}
            trigger="manual"
          >
            <button
              aria-activedescendant="test-ID-option-$.0"
              aria-controls="test-id"
              aria-expanded={true}
              aria-haspopup="listbox"
              aria-labelledby="test-ID test-ID"
              className="md-select-dropdown-input md-select-open"
              id="test-ID"
              onBlur={[Function]}
              onClick={[Function]}
              onDragStart={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              onMouseDown={[Function]}
              onMouseEnter={[Function]}
              onMouseLeave={[Function]}
              onMouseUp={[Function]}
              onTouchCancel={[Function]}
              onTouchEnd={[Function]}
              onTouchMove={[Function]}
              onTouchStart={[Function]}
              role="combobox"
              type="button"
            >
              <span
                className="md-select-selected-item-wrapper"
                id="test-ID"
              />
              <span
                aria-hidden="true"
                className="md-select-icon-wrapper"
              >
                <Icon
                  name="arrow-up"
                  scale={16}
                  weight="bold"
                >
                  <div
                    aria-hidden="true"
                    className="md-icon-wrapper md-icon-auto-scales md-icon-scales md-icon-no-shrink"
                    role="img"
                  >
                    <svg
                      aria-hidden="true"
                      className=""
                      data-autoscale={false}
                      data-scale={16}
                      data-test="arrow-up"
                      fill="currentColor"
                      height="100%"
                      style={{}}
                      viewBox="0, 0, 32, 32"
                      width="100%"
                    />
                  </div>
                </Icon>
              </span>
            </button>
            <Portal
              containerInfo={
                <div
                  data-tippy-root=""
                  id="tippy-8"
                  style="z-index: 9999; position: absolute; left: 0px; top: 0px; margin: 0px; transform: translate(0px, 0px);"
                >
                  <span
                    data-focus-scope-start="true"
                    hidden=""
                  />
                  <div
                    aria-labelledby="test-ID"
                    class="md-select-popover md-modal-container-wrapper"
                    data-arrow-orientation="vertical"
                    data-color="primary"
                    data-elevation="3"
                    data-padded="true"
                    data-placement="bottom"
                    data-round="50"
                    style="max-height: none;"
                  >
                    <ul
                      aria-labelledby="test-ID"
                      class="md-select-menu-listbox md-menu-list-background-wrapper"
                      data-color="primary"
                      id="test-ID"
                      role="listbox"
                      tabindex="-1"
                    >
                      <li
                        aria-disabled="false"
                        aria-selected="false"
                        class="md-list-item-base-wrapper"
                        data-allow-text-select="false"
                        data-disabled="false"
                        data-interactive="true"
                        data-key="$.0"
                        data-padded="true"
                        data-shape="rectangle"
                        data-size="40"
                        id="test-ID-option-$.0"
                        role="option"
                        tabindex="0"
                      >
                        <div
                          data-position="fill"
                          title="Item 1"
                        >
                          Item 1
                        </div>
                      </li>
                      <li
                        aria-disabled="false"
                        aria-selected="false"
                        class="md-list-item-base-wrapper"
                        data-allow-text-select="false"
                        data-disabled="false"
                        data-interactive="true"
                        data-key="$.1"
                        data-padded="true"
                        data-shape="rectangle"
                        data-size="40"
                        id="test-ID-option-$.1"
                        role="option"
                        tabindex="-1"
                      >
                        <div
                          data-position="fill"
                          title="Item 2"
                        >
                          Item 2
                        </div>
                      </li>
                    </ul>
                  </div>
                  <span
                    data-focus-scope-end="true"
                    hidden=""
                  />
                </div>
              }
            >
              <ModalContainer
                aria-labelledby="test-ID"
                ariaModal={true}
                arrowId="arrow1"
                className="md-select-popover"
                elevation={3}
                focusLockProps={
                  {
                    "autoFocus": true,
                    "restoreFocus": true,
                  }
                }
                isPadded={true}
                onKeyDown={[Function]}
                placement="bottom"
                role={null}
                round={50}
                showArrow={false}
                style={
                  {
                    "maxHeight": "none",
                  }
                }
              >
                <FocusScope
                  autoFocus={true}
                  contain={true}
                  restoreFocus={true}
                >
                  <span
                    data-focus-scope-start={true}
                    hidden={true}
                  />
                  <div
                    aria-labelledby="test-ID"
                    className="md-select-popover md-modal-container-wrapper"
                    data-arrow-orientation="vertical"
                    data-color="primary"
                    data-elevation={3}
                    data-padded={true}
                    data-placement="bottom"
                    data-round={50}
                    onKeyDown={[Function]}
                    role={null}
                    style={
                      {
                        "maxHeight": "none",
                      }
                    }
                  >
                    <ListBoxBase
                      aria-labelledby="test-ID"
                      autoFocus="first"
                      className="md-select-menu-listbox"
                      disallowEmptySelection={true}
                      id="test-ID"
                      onBlur={[Function]}
                      shouldFocusOnHover={true}
                      shouldSelectOnPressUp={true}
                      state={
                        {
                          "close": [Function],
                          "collection": ListCollection {
                            "firstKey": "$.0",
                            "iterable": {
                              Symbol(Symbol.iterator): [Function],
                            },
                            "keyMap": Map {
                              "$.0" => {
                                "aria-label": undefined,
                                "childNodes": {
                                  Symbol(Symbol.iterator): [Function],
                                },
                                "hasChildNodes": false,
                                "index": 0,
                                "key": "$.0",
                                "level": 0,
                                "nextKey": "$.1",
                                "parentKey": null,
                                "prevKey": undefined,
                                "props": {
                                  "children": "Item 1",
                                },
                                "rendered": "Item 1",
                                "shouldInvalidate": undefined,
                                "textValue": "Item 1",
                                "type": "item",
                                "value": undefined,
                                "wrapper": undefined,
                              },
                              "$.1" => {
                                "aria-label": undefined,
                                "childNodes": {
                                  Symbol(Symbol.iterator): [Function],
                                },
                                "hasChildNodes": false,
                                "index": 1,
                                "key": "$.1",
                                "level": 0,
                                "nextKey": undefined,
                                "parentKey": null,
                                "prevKey": "$.0",
                                "props": {
                                  "children": "Item 2",
                                },
                                "rendered": "Item 2",
                                "shouldInvalidate": undefined,
                                "textValue": "Item 2",
                                "type": "item",
                                "value": undefined,
                                "wrapper": undefined,
                              },
                            },
                            "lastKey": "$.1",
                          },
                          "disabledKeys": Set {},
                          "focusStrategy": null,
                          "isFocused": false,
                          "isOpen": true,
                          "open": [Function],
                          "selectedItem": null,
                          "selectedKey": null,
                          "selectionManager": SelectionManager {
                            "_isSelectAll": null,
                            "allowsCellSelection": false,
                            "collection": ListCollection {
                              "firstKey": "$.0",
                              "iterable": {
                                Symbol(Symbol.iterator): [Function],
                              },
                              "keyMap": Map {
                                "$.0" => {
                                  "aria-label": undefined,
                                  "childNodes": {
                                    Symbol(Symbol.iterator): [Function],
                                  },
                                  "hasChildNodes": false,
                                  "index": 0,
                                  "key": "$.0",
                                  "level": 0,
                                  "nextKey": "$.1",
                                  "parentKey": null,
                                  "prevKey": undefined,
                                  "props": {
                                    "children": "Item 1",
                                  },
                                  "rendered": "Item 1",
                                  "shouldInvalidate": undefined,
                                  "textValue": "Item 1",
                                  "type": "item",
                                  "value": undefined,
                                  "wrapper": undefined,
                                },
                                "$.1" => {
                                  "aria-label": undefined,
                                  "childNodes": {
                                    Symbol(Symbol.iterator): [Function],
                                  },
                                  "hasChildNodes": false,
                                  "index": 1,
                                  "key": "$.1",
                                  "level": 0,
                                  "nextKey": undefined,
                                  "parentKey": null,
                                  "prevKey": "$.0",
                                  "props": {
                                    "children": "Item 2",
                                  },
                                  "rendered": "Item 2",
                                  "shouldInvalidate": undefined,
                                  "textValue": "Item 2",
                                  "type": "item",
                                  "value": undefined,
                                  "wrapper": undefined,
                                },
                              },
                              "lastKey": "$.1",
                            },
                            "state": {
                              "childFocusStrategy": "first",
                              "disabledKeys": Set {},
                              "disallowEmptySelection": true,
                              "focusedKey": "$.0",
                              "isFocused": true,
                              "selectedKeys": Set {},
                              "selectionMode": "single",
                              "setFocused": [Function],
                              "setFocusedKey": [Function],
                              "setSelectedKeys": [Function],
                            },
                          },
                          "setFocused": [Function],
                          "setSelectedKey": [Function],
                          "toggle": [Function],
                        }
                      }
                    >
                      <MenuListBackground
                        aria-labelledby="test-ID"
                        className="md-select-menu-listbox"
                        color="primary"
                        id="test-ID"
                        onBlur={[Function]}
                        onFocus={[Function]}
                        onKeyDown={[Function]}
                        onKeyDownCapture={[Function]}
                        onMouseDown={[Function]}
                        role="listbox"
                        tabIndex={-1}
                      >
                        <FocusRing>
                          <FocusRing
                            focusClass="md-focus-ring-wrapper children"
                            focusRingClass="md-focus-ring-wrapper children"
                          >
                            <ul
                              aria-labelledby="test-ID"
                              className="md-select-menu-listbox md-menu-list-background-wrapper"
                              data-color="primary"
                              id="test-ID"
                              onBlur={[Function]}
                              onFocus={[Function]}
                              onKeyDown={[Function]}
                              onKeyDownCapture={[Function]}
                              onMouseDown={[Function]}
                              role="listbox"
                              tabIndex={-1}
                            >
                              <ListBoxItem
                                item={
                                  {
                                    "aria-label": undefined,
                                    "childNodes": {
                                      Symbol(Symbol.iterator): [Function],
                                    },
                                    "hasChildNodes": false,
                                    "index": 0,
                                    "key": "$.0",
                                    "level": 0,
                                    "nextKey": "$.1",
                                    "parentKey": null,
                                    "prevKey": undefined,
                                    "props": {
                                      "children": "Item 1",
                                    },
                                    "rendered": "Item 1",
                                    "shouldInvalidate": undefined,
                                    "textValue": "Item 1",
                                    "type": "item",
                                    "value": undefined,
                                    "wrapper": undefined,
                                  }
                                }
                                key="$.0"
                              >
                                <ListItemBase
                                  aria-describedby={null}
                                  aria-disabled={false}
                                  aria-labelledby={null}
                                  aria-selected={false}
                                  data-key="$.0"
                                  id="test-ID-option-$.0"
                                  isDisabled={false}
                                  isPadded={true}
                                  key="$.0"
                                  onClick={[Function]}
                                  onDragStart={[Function]}
                                  onFocus={[Function]}
                                  onKeyDown={[Function]}
                                  onKeyUp={[Function]}
                                  onMouseDown={[Function]}
                                  onMouseEnter={[Function]}
                                  onMouseLeave={[Function]}
                                  onMouseUp={[Function]}
                                  onTouchCancel={[Function]}
                                  onTouchEnd={[Function]}
                                  onTouchMove={[Function]}
                                  onTouchStart={[Function]}
                                  role="option"
                                  tabIndex={0}
                                >
                                  <FocusRing
                                    isInset={false}
                                  >
                                    <FocusRing
                                      focusClass="md-focus-ring-wrapper children"
                                      focusRingClass="md-focus-ring-wrapper children"
                                      isInset={false}
                                    >
                                      <li
                                        aria-describedby={null}
                                        aria-disabled={false}
                                        aria-labelledby={null}
                                        aria-selected={false}
                                        className="md-list-item-base-wrapper"
                                        data-allow-text-select={false}
                                        data-disabled={false}
                                        data-interactive={true}
                                        data-key="$.0"
                                        data-padded={true}
                                        data-shape="rectangle"
                                        data-size={40}
                                        id="test-ID-option-$.0"
                                        onBlur={[Function]}
                                        onClick={[Function]}
                                        onDragStart={[Function]}
                                        onFocus={[Function]}
                                        onKeyDown={[Function]}
                                        onKeyUp={[Function]}
                                        onMouseDown={[Function]}
                                        onMouseEnter={[Function]}
                                        onMouseLeave={[Function]}
                                        onMouseUp={[Function]}
                                        onPointerDown={[Function]}
                                        onTouchCancel={[Function]}
                                        onTouchEnd={[Function]}
                                        onTouchMove={[Function]}
                                        onTouchStart={[Function]}
                                        role="option"
                                        tabIndex={0}
                                      >
                                        <ListItemBaseSection
                                          position="fill"
                                          title="Item 1"
                                        >
                                          <div
                                            data-position="fill"
                                            title="Item 1"
                                          >
                                            Item 1
                                          </div>
                                        </ListItemBaseSection>
                                      </li>
                                    </FocusRing>
                                  </FocusRing>
                                </ListItemBase>
                              </ListBoxItem>
                              <ListBoxItem
                                item={
                                  {
                                    "aria-label": undefined,
                                    "childNodes": {
                                      Symbol(Symbol.iterator): [Function],
                                    },
                                    "hasChildNodes": false,
                                    "index": 1,
                                    "key": "$.1",
                                    "level": 0,
                                    "nextKey": undefined,
                                    "parentKey": null,
                                    "prevKey": "$.0",
                                    "props": {
                                      "children": "Item 2",
                                    },
                                    "rendered": "Item 2",
                                    "shouldInvalidate": undefined,
                                    "textValue": "Item 2",
                                    "type": "item",
                                    "value": undefined,
                                    "wrapper": undefined,
                                  }
                                }
                                key="$.1"
                              >
                                <ListItemBase
                                  aria-describedby={null}
                                  aria-disabled={false}
                                  aria-labelledby={null}
                                  aria-selected={false}
                                  data-key="$.1"
                                  id="test-ID-option-$.1"
                                  isDisabled={false}
                                  isPadded={true}
                                  key="$.1"
                                  onClick={[Function]}
                                  onDragStart={[Function]}
                                  onFocus={[Function]}
                                  onKeyDown={[Function]}
                                  onKeyUp={[Function]}
                                  onMouseDown={[Function]}
                                  onMouseEnter={[Function]}
                                  onMouseLeave={[Function]}
                                  onMouseUp={[Function]}
                                  onTouchCancel={[Function]}
                                  onTouchEnd={[Function]}
                                  onTouchMove={[Function]}
                                  onTouchStart={[Function]}
                                  role="option"
                                  tabIndex={-1}
                                >
                                  <FocusRing
                                    isInset={false}
                                  >
                                    <FocusRing
                                      focusClass="md-focus-ring-wrapper children"
                                      focusRingClass="md-focus-ring-wrapper children"
                                      isInset={false}
                                    >
                                      <li
                                        aria-describedby={null}
                                        aria-disabled={false}
                                        aria-labelledby={null}
                                        aria-selected={false}
                                        className="md-list-item-base-wrapper"
                                        data-allow-text-select={false}
                                        data-disabled={false}
                                        data-interactive={true}
                                        data-key="$.1"
                                        data-padded={true}
                                        data-shape="rectangle"
                                        data-size={40}
                                        id="test-ID-option-$.1"
                                        onBlur={[Function]}
                                        onClick={[Function]}
                                        onDragStart={[Function]}
                                        onFocus={[Function]}
                                        onKeyDown={[Function]}
                                        onKeyUp={[Function]}
                                        onMouseDown={[Function]}
                                        onMouseEnter={[Function]}
                                        onMouseLeave={[Function]}
                                        onMouseUp={[Function]}
                                        onPointerDown={[Function]}
                                        onTouchCancel={[Function]}
                                        onTouchEnd={[Function]}
                                        onTouchMove={[Function]}
                                        onTouchStart={[Function]}
                                        role="option"
                                        tabIndex={-1}
                                      >
                                        <ListItemBaseSection
                                          position="fill"
                                          title="Item 2"
                                        >
                                          <div
                                            data-position="fill"
                                            title="Item 2"
                                          >
                                            Item 2
                                          </div>
                                        </ListItemBaseSection>
                                      </li>
                                    </FocusRing>
                                  </FocusRing>
                                </ListItemBase>
                              </ListBoxItem>
                            </ul>
                          </FocusRing>
                        </FocusRing>
                      </MenuListBackground>
                    </ListBoxBase>
                  </div>
                  <span
                    data-focus-scope-end={true}
                    hidden={true}
                  />
                </FocusScope>
              </ModalContainer>
            </Portal>
          </Tippy>
        </ForwardRef(TippyWrapper)>
      </LazyTippy>
    </Popover>
  </div>
</Select>
`;

exports[`Select snapshot should match snapshot with listboxMaxHeight 1`] = `
<Select
  isOpen={true}
  label="test"
  listboxMaxHeight="50px"
>
  <div
    className="md-select-wrapper"
    style={
      {
        "--local-width": "100%",
      }
    }
  >
    <label
      id="test-ID"
      onClick={[Function]}
    >
      <Text>
        <p
          className="md-text-wrapper"
          data-type="body-primary"
        >
          test
        </p>
      </Text>
    </label>
    <HiddenSelect
      label="test"
      state={
        {
          "close": [Function],
          "collection": ListCollection {
            "firstKey": "$.0",
            "iterable": {
              Symbol(Symbol.iterator): [Function],
            },
            "keyMap": Map {
              "$.0" => {
                "aria-label": undefined,
                "childNodes": {
                  Symbol(Symbol.iterator): [Function],
                },
                "hasChildNodes": false,
                "index": 0,
                "key": "$.0",
                "level": 0,
                "nextKey": "$.1",
                "parentKey": null,
                "prevKey": undefined,
                "props": {
                  "children": "Item 1",
                },
                "rendered": "Item 1",
                "shouldInvalidate": undefined,
                "textValue": "Item 1",
                "type": "item",
                "value": undefined,
                "wrapper": undefined,
              },
              "$.1" => {
                "aria-label": undefined,
                "childNodes": {
                  Symbol(Symbol.iterator): [Function],
                },
                "hasChildNodes": false,
                "index": 1,
                "key": "$.1",
                "level": 0,
                "nextKey": undefined,
                "parentKey": null,
                "prevKey": "$.0",
                "props": {
                  "children": "Item 2",
                },
                "rendered": "Item 2",
                "shouldInvalidate": undefined,
                "textValue": "Item 2",
                "type": "item",
                "value": undefined,
                "wrapper": undefined,
              },
            },
            "lastKey": "$.1",
          },
          "disabledKeys": Set {},
          "focusStrategy": null,
          "isFocused": false,
          "isOpen": true,
          "open": [Function],
          "selectedItem": null,
          "selectedKey": null,
          "selectionManager": SelectionManager {
            "_isSelectAll": null,
            "allowsCellSelection": false,
            "collection": ListCollection {
              "firstKey": "$.0",
              "iterable": {
                Symbol(Symbol.iterator): [Function],
              },
              "keyMap": Map {
                "$.0" => {
                  "aria-label": undefined,
                  "childNodes": {
                    Symbol(Symbol.iterator): [Function],
                  },
                  "hasChildNodes": false,
                  "index": 0,
                  "key": "$.0",
                  "level": 0,
                  "nextKey": "$.1",
                  "parentKey": null,
                  "prevKey": undefined,
                  "props": {
                    "children": "Item 1",
                  },
                  "rendered": "Item 1",
                  "shouldInvalidate": undefined,
                  "textValue": "Item 1",
                  "type": "item",
                  "value": undefined,
                  "wrapper": undefined,
                },
                "$.1" => {
                  "aria-label": undefined,
                  "childNodes": {
                    Symbol(Symbol.iterator): [Function],
                  },
                  "hasChildNodes": false,
                  "index": 1,
                  "key": "$.1",
                  "level": 0,
                  "nextKey": undefined,
                  "parentKey": null,
                  "prevKey": "$.0",
                  "props": {
                    "children": "Item 2",
                  },
                  "rendered": "Item 2",
                  "shouldInvalidate": undefined,
                  "textValue": "Item 2",
                  "type": "item",
                  "value": undefined,
                  "wrapper": undefined,
                },
              },
              "lastKey": "$.1",
            },
            "state": {
              "childFocusStrategy": "first",
              "disabledKeys": Set {},
              "disallowEmptySelection": true,
              "focusedKey": "$.0",
              "isFocused": true,
              "selectedKeys": Set {},
              "selectionMode": "single",
              "setFocused": [Function],
              "setFocusedKey": [Function],
              "setSelectedKeys": [Function],
            },
          },
          "setFocused": [Function],
          "setSelectedKey": [Function],
          "toggle": [Function],
        }
      }
      triggerRef={
        {
          "current": <button
            aria-activedescendant="test-ID-option-$.0"
            aria-expanded="true"
            aria-haspopup="listbox"
            aria-labelledby="test-ID test-ID"
            class="md-select-dropdown-input md-select-open"
            id="test-ID"
            role="combobox"
            type="button"
          >
            <span
              class="md-select-selected-item-wrapper"
              id="test-ID"
            />
            <span
              aria-hidden="true"
              class="md-select-icon-wrapper"
            >
              <div
                aria-hidden="true"
                class="md-icon-wrapper md-icon-auto-scales md-icon-scales md-icon-no-shrink"
                role="img"
              >
                <svg
                  aria-hidden="true"
                  class=""
                  data-autoscale="false"
                  data-scale="16"
                  data-test="arrow-up"
                  fill="currentColor"
                  height="100%"
                  viewBox="0, 0, 32, 32"
                  width="100%"
                />
              </div>
            </span>
          </button>,
        }
      }
    >
      <div
        aria-hidden={true}
        style={
          {
            "border": 0,
            "clip": "rect(0 0 0 0)",
            "clipPath": "inset(50%)",
            "height": 1,
            "margin": "0 -1px -1px 0",
            "overflow": "hidden",
            "padding": 0,
            "position": "absolute",
            "whiteSpace": "nowrap",
            "width": 1,
          }
        }
      >
        <input
          onFocus={[Function]}
          style={
            {
              "fontSize": 16,
            }
          }
          tabIndex={-1}
          type="text"
        />
        <label>
          test
          <select
            onChange={[Function]}
            size={2}
            tabIndex={-1}
            value=""
          >
            <option />
            <option
              key="$.0"
              value="$.0"
            >
              Item 1
            </option>
            <option
              key="$.1"
              value="$.1"
            >
              Item 2
            </option>
          </select>
        </label>
      </div>
    </HiddenSelect>
    <Popover
      className="md-select-popover"
      hideOnEsc={false}
      interactive={true}
      onClickOutside={[Function]}
      onHide={[Function]}
      onKeyDown={[Function]}
      placement="bottom"
      role={null}
      setInstance={[Function]}
      showArrow={false}
      strategy="absolute"
      style={
        {
          "maxHeight": "50px",
        }
      }
      trigger="manual"
      triggerComponent={
        <button
          aria-activedescendant="test-ID-option-$.0"
          aria-expanded={true}
          aria-haspopup="listbox"
          aria-labelledby="test-ID test-ID"
          className="md-select-dropdown-input md-select-open"
          id="test-ID"
          onBlur={[Function]}
          onClick={[Function]}
          onDragStart={[Function]}
          onFocus={[Function]}
          onKeyDown={[Function]}
          onKeyUp={[Function]}
          onMouseDown={[Function]}
          onMouseEnter={[Function]}
          onMouseLeave={[Function]}
          onMouseUp={[Function]}
          onTouchCancel={[Function]}
          onTouchEnd={[Function]}
          onTouchMove={[Function]}
          onTouchStart={[Function]}
          role="combobox"
          type="button"
        >
          <span
            className="md-select-selected-item-wrapper"
            id="test-ID"
          />
          <span
            aria-hidden="true"
            className="md-select-icon-wrapper"
          >
            <Icon
              name="arrow-up"
              scale={16}
              weight="bold"
            />
          </span>
        </button>
      }
    >
      <LazyTippy
        animation={false}
        appendTo="parent"
        hideOnClick={false}
        interactive={true}
        offset={
          [
            0,
            5,
          ]
        }
        onClickOutside={[Function]}
        onHidden={[Function]}
        onHide={[Function]}
        placement="bottom"
        plugins={
          [
            {
              "fn": [Function],
              "name": "addBackdropPlugin",
            },
          ]
        }
        popperOptions={
          {
            "modifiers": [
              {
                "enabled": false,
                "name": "arrow",
                "options": {
                  "element": "#arrow1",
                  "padding": 5,
                },
              },
              {
                "name": "preventOverflow",
                "options": {
                  "altAxis": true,
                  "boundariesElement": "scrollParent",
                  "padding": 8,
                },
              },
            ],
            "strategy": "absolute",
          }
        }
        render={[Function]}
        setInstance={[Function]}
        trigger="manual"
      >
        <ForwardRef(TippyWrapper)
          animation={false}
          appendTo="parent"
          hideOnClick={false}
          interactive={true}
          offset={
            [
              0,
              5,
            ]
          }
          onClickOutside={[Function]}
          onHidden={[Function]}
          onHide={[Function]}
          placement="bottom"
          plugins={
            [
              {
                "fn": [Function],
              },
              {
                "fn": [Function],
              },
              {
                "fn": [Function],
              },
              {
                "fn": [Function],
                "name": "addBackdropPlugin",
              },
            ]
          }
          popperOptions={
            {
              "modifiers": [
                {
                  "enabled": false,
                  "name": "arrow",
                  "options": {
                    "element": "#arrow1",
                    "padding": 5,
                  },
                },
                {
                  "name": "preventOverflow",
                  "options": {
                    "altAxis": true,
                    "boundariesElement": "scrollParent",
                    "padding": 8,
                  },
                },
              ],
              "strategy": "absolute",
            }
          }
          render={[Function]}
          trigger="manual"
        >
          <Tippy
            animation={false}
            appendTo="parent"
            hideOnClick={false}
            interactive={true}
            offset={
              [
                0,
                5,
              ]
            }
            onClickOutside={[Function]}
            onHidden={[Function]}
            onHide={[Function]}
            placement="bottom"
            plugins={
              [
                {
                  "fn": [Function],
                },
                {
                  "fn": [Function],
                },
                {
                  "fn": [Function],
                },
                {
                  "fn": [Function],
                  "name": "addBackdropPlugin",
                },
              ]
            }
            popperOptions={
              {
                "modifiers": [
                  {
                    "enabled": false,
                    "name": "arrow",
                    "options": {
                      "element": "#arrow1",
                      "padding": 5,
                    },
                  },
                  {
                    "name": "preventOverflow",
                    "options": {
                      "altAxis": true,
                      "boundariesElement": "scrollParent",
                      "padding": 8,
                    },
                  },
                ],
                "strategy": "absolute",
              }
            }
            render={[Function]}
            trigger="manual"
          >
            <button
              aria-activedescendant="test-ID-option-$.0"
              aria-expanded={true}
              aria-haspopup="listbox"
              aria-labelledby="test-ID test-ID"
              className="md-select-dropdown-input md-select-open"
              id="test-ID"
              onBlur={[Function]}
              onClick={[Function]}
              onDragStart={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              onMouseDown={[Function]}
              onMouseEnter={[Function]}
              onMouseLeave={[Function]}
              onMouseUp={[Function]}
              onTouchCancel={[Function]}
              onTouchEnd={[Function]}
              onTouchMove={[Function]}
              onTouchStart={[Function]}
              role="combobox"
              type="button"
            >
              <span
                className="md-select-selected-item-wrapper"
                id="test-ID"
              />
              <span
                aria-hidden="true"
                className="md-select-icon-wrapper"
              >
                <Icon
                  name="arrow-up"
                  scale={16}
                  weight="bold"
                >
                  <div
                    aria-hidden="true"
                    className="md-icon-wrapper md-icon-auto-scales md-icon-scales md-icon-no-shrink"
                    role="img"
                  >
                    <svg
                      aria-hidden="true"
                      className=""
                      data-autoscale={false}
                      data-scale={16}
                      data-test="arrow-up"
                      fill="currentColor"
                      height="100%"
                      style={{}}
                      viewBox="0, 0, 32, 32"
                      width="100%"
                    />
                  </div>
                </Icon>
              </span>
            </button>
            <Portal
              containerInfo={
                <div
                  data-tippy-root=""
                  id="tippy-14"
                  style="z-index: 9999; position: absolute; left: 0px; top: 0px; margin: 0px; transform: translate(0px, 0px);"
                >
                  <span
                    data-focus-scope-start="true"
                    hidden=""
                  />
                  <div
                    aria-labelledby="test-ID"
                    class="md-select-popover md-modal-container-wrapper"
                    data-arrow-orientation="vertical"
                    data-color="primary"
                    data-elevation="3"
                    data-padded="true"
                    data-placement="bottom"
                    data-round="50"
                    style="max-height: 50px;"
                  >
                    <ul
                      aria-labelledby="test-ID"
                      class="md-select-menu-listbox md-menu-list-background-wrapper"
                      data-color="primary"
                      id="test-ID"
                      role="listbox"
                      tabindex="-1"
                    >
                      <li
                        aria-disabled="false"
                        aria-selected="false"
                        class="md-list-item-base-wrapper"
                        data-allow-text-select="false"
                        data-disabled="false"
                        data-interactive="true"
                        data-key="$.0"
                        data-padded="true"
                        data-shape="rectangle"
                        data-size="40"
                        id="test-ID-option-$.0"
                        role="option"
                        tabindex="0"
                      >
                        <div
                          data-position="fill"
                          title="Item 1"
                        >
                          Item 1
                        </div>
                      </li>
                      <li
                        aria-disabled="false"
                        aria-selected="false"
                        class="md-list-item-base-wrapper"
                        data-allow-text-select="false"
                        data-disabled="false"
                        data-interactive="true"
                        data-key="$.1"
                        data-padded="true"
                        data-shape="rectangle"
                        data-size="40"
                        id="test-ID-option-$.1"
                        role="option"
                        tabindex="-1"
                      >
                        <div
                          data-position="fill"
                          title="Item 2"
                        >
                          Item 2
                        </div>
                      </li>
                    </ul>
                  </div>
                  <span
                    data-focus-scope-end="true"
                    hidden=""
                  />
                </div>
              }
            >
              <ModalContainer
                aria-labelledby="test-ID"
                ariaModal={true}
                arrowId="arrow1"
                className="md-select-popover"
                elevation={3}
                focusLockProps={
                  {
                    "autoFocus": true,
                    "restoreFocus": true,
                  }
                }
                isPadded={true}
                onKeyDown={[Function]}
                placement="bottom"
                role={null}
                round={50}
                showArrow={false}
                style={
                  {
                    "maxHeight": "50px",
                  }
                }
              >
                <FocusScope
                  autoFocus={true}
                  contain={true}
                  restoreFocus={true}
                >
                  <span
                    data-focus-scope-start={true}
                    hidden={true}
                  />
                  <div
                    aria-labelledby="test-ID"
                    className="md-select-popover md-modal-container-wrapper"
                    data-arrow-orientation="vertical"
                    data-color="primary"
                    data-elevation={3}
                    data-padded={true}
                    data-placement="bottom"
                    data-round={50}
                    onKeyDown={[Function]}
                    role={null}
                    style={
                      {
                        "maxHeight": "50px",
                      }
                    }
                  >
                    <ListBoxBase
                      aria-labelledby="test-ID"
                      autoFocus="first"
                      className="md-select-menu-listbox"
                      disallowEmptySelection={true}
                      id="test-ID"
                      onBlur={[Function]}
                      shouldFocusOnHover={true}
                      shouldSelectOnPressUp={true}
                      state={
                        {
                          "close": [Function],
                          "collection": ListCollection {
                            "firstKey": "$.0",
                            "iterable": {
                              Symbol(Symbol.iterator): [Function],
                            },
                            "keyMap": Map {
                              "$.0" => {
                                "aria-label": undefined,
                                "childNodes": {
                                  Symbol(Symbol.iterator): [Function],
                                },
                                "hasChildNodes": false,
                                "index": 0,
                                "key": "$.0",
                                "level": 0,
                                "nextKey": "$.1",
                                "parentKey": null,
                                "prevKey": undefined,
                                "props": {
                                  "children": "Item 1",
                                },
                                "rendered": "Item 1",
                                "shouldInvalidate": undefined,
                                "textValue": "Item 1",
                                "type": "item",
                                "value": undefined,
                                "wrapper": undefined,
                              },
                              "$.1" => {
                                "aria-label": undefined,
                                "childNodes": {
                                  Symbol(Symbol.iterator): [Function],
                                },
                                "hasChildNodes": false,
                                "index": 1,
                                "key": "$.1",
                                "level": 0,
                                "nextKey": undefined,
                                "parentKey": null,
                                "prevKey": "$.0",
                                "props": {
                                  "children": "Item 2",
                                },
                                "rendered": "Item 2",
                                "shouldInvalidate": undefined,
                                "textValue": "Item 2",
                                "type": "item",
                                "value": undefined,
                                "wrapper": undefined,
                              },
                            },
                            "lastKey": "$.1",
                          },
                          "disabledKeys": Set {},
                          "focusStrategy": null,
                          "isFocused": false,
                          "isOpen": true,
                          "open": [Function],
                          "selectedItem": null,
                          "selectedKey": null,
                          "selectionManager": SelectionManager {
                            "_isSelectAll": null,
                            "allowsCellSelection": false,
                            "collection": ListCollection {
                              "firstKey": "$.0",
                              "iterable": {
                                Symbol(Symbol.iterator): [Function],
                              },
                              "keyMap": Map {
                                "$.0" => {
                                  "aria-label": undefined,
                                  "childNodes": {
                                    Symbol(Symbol.iterator): [Function],
                                  },
                                  "hasChildNodes": false,
                                  "index": 0,
                                  "key": "$.0",
                                  "level": 0,
                                  "nextKey": "$.1",
                                  "parentKey": null,
                                  "prevKey": undefined,
                                  "props": {
                                    "children": "Item 1",
                                  },
                                  "rendered": "Item 1",
                                  "shouldInvalidate": undefined,
                                  "textValue": "Item 1",
                                  "type": "item",
                                  "value": undefined,
                                  "wrapper": undefined,
                                },
                                "$.1" => {
                                  "aria-label": undefined,
                                  "childNodes": {
                                    Symbol(Symbol.iterator): [Function],
                                  },
                                  "hasChildNodes": false,
                                  "index": 1,
                                  "key": "$.1",
                                  "level": 0,
                                  "nextKey": undefined,
                                  "parentKey": null,
                                  "prevKey": "$.0",
                                  "props": {
                                    "children": "Item 2",
                                  },
                                  "rendered": "Item 2",
                                  "shouldInvalidate": undefined,
                                  "textValue": "Item 2",
                                  "type": "item",
                                  "value": undefined,
                                  "wrapper": undefined,
                                },
                              },
                              "lastKey": "$.1",
                            },
                            "state": {
                              "childFocusStrategy": "first",
                              "disabledKeys": Set {},
                              "disallowEmptySelection": true,
                              "focusedKey": "$.0",
                              "isFocused": true,
                              "selectedKeys": Set {},
                              "selectionMode": "single",
                              "setFocused": [Function],
                              "setFocusedKey": [Function],
                              "setSelectedKeys": [Function],
                            },
                          },
                          "setFocused": [Function],
                          "setSelectedKey": [Function],
                          "toggle": [Function],
                        }
                      }
                    >
                      <MenuListBackground
                        aria-labelledby="test-ID"
                        className="md-select-menu-listbox"
                        color="primary"
                        id="test-ID"
                        onBlur={[Function]}
                        onFocus={[Function]}
                        onKeyDown={[Function]}
                        onKeyDownCapture={[Function]}
                        onMouseDown={[Function]}
                        role="listbox"
                        tabIndex={-1}
                      >
                        <FocusRing>
                          <FocusRing
                            focusClass="md-focus-ring-wrapper children"
                            focusRingClass="md-focus-ring-wrapper children"
                          >
                            <ul
                              aria-labelledby="test-ID"
                              className="md-select-menu-listbox md-menu-list-background-wrapper"
                              data-color="primary"
                              id="test-ID"
                              onBlur={[Function]}
                              onFocus={[Function]}
                              onKeyDown={[Function]}
                              onKeyDownCapture={[Function]}
                              onMouseDown={[Function]}
                              role="listbox"
                              tabIndex={-1}
                            >
                              <ListBoxItem
                                item={
                                  {
                                    "aria-label": undefined,
                                    "childNodes": {
                                      Symbol(Symbol.iterator): [Function],
                                    },
                                    "hasChildNodes": false,
                                    "index": 0,
                                    "key": "$.0",
                                    "level": 0,
                                    "nextKey": "$.1",
                                    "parentKey": null,
                                    "prevKey": undefined,
                                    "props": {
                                      "children": "Item 1",
                                    },
                                    "rendered": "Item 1",
                                    "shouldInvalidate": undefined,
                                    "textValue": "Item 1",
                                    "type": "item",
                                    "value": undefined,
                                    "wrapper": undefined,
                                  }
                                }
                                key="$.0"
                              >
                                <ListItemBase
                                  aria-describedby={null}
                                  aria-disabled={false}
                                  aria-labelledby={null}
                                  aria-selected={false}
                                  data-key="$.0"
                                  id="test-ID-option-$.0"
                                  isDisabled={false}
                                  isPadded={true}
                                  key="$.0"
                                  onClick={[Function]}
                                  onDragStart={[Function]}
                                  onFocus={[Function]}
                                  onKeyDown={[Function]}
                                  onKeyUp={[Function]}
                                  onMouseDown={[Function]}
                                  onMouseEnter={[Function]}
                                  onMouseLeave={[Function]}
                                  onMouseUp={[Function]}
                                  onTouchCancel={[Function]}
                                  onTouchEnd={[Function]}
                                  onTouchMove={[Function]}
                                  onTouchStart={[Function]}
                                  role="option"
                                  tabIndex={0}
                                >
                                  <FocusRing
                                    isInset={false}
                                  >
                                    <FocusRing
                                      focusClass="md-focus-ring-wrapper children"
                                      focusRingClass="md-focus-ring-wrapper children"
                                      isInset={false}
                                    >
                                      <li
                                        aria-describedby={null}
                                        aria-disabled={false}
                                        aria-labelledby={null}
                                        aria-selected={false}
                                        className="md-list-item-base-wrapper"
                                        data-allow-text-select={false}
                                        data-disabled={false}
                                        data-interactive={true}
                                        data-key="$.0"
                                        data-padded={true}
                                        data-shape="rectangle"
                                        data-size={40}
                                        id="test-ID-option-$.0"
                                        onBlur={[Function]}
                                        onClick={[Function]}
                                        onDragStart={[Function]}
                                        onFocus={[Function]}
                                        onKeyDown={[Function]}
                                        onKeyUp={[Function]}
                                        onMouseDown={[Function]}
                                        onMouseEnter={[Function]}
                                        onMouseLeave={[Function]}
                                        onMouseUp={[Function]}
                                        onPointerDown={[Function]}
                                        onTouchCancel={[Function]}
                                        onTouchEnd={[Function]}
                                        onTouchMove={[Function]}
                                        onTouchStart={[Function]}
                                        role="option"
                                        tabIndex={0}
                                      >
                                        <ListItemBaseSection
                                          position="fill"
                                          title="Item 1"
                                        >
                                          <div
                                            data-position="fill"
                                            title="Item 1"
                                          >
                                            Item 1
                                          </div>
                                        </ListItemBaseSection>
                                      </li>
                                    </FocusRing>
                                  </FocusRing>
                                </ListItemBase>
                              </ListBoxItem>
                              <ListBoxItem
                                item={
                                  {
                                    "aria-label": undefined,
                                    "childNodes": {
                                      Symbol(Symbol.iterator): [Function],
                                    },
                                    "hasChildNodes": false,
                                    "index": 1,
                                    "key": "$.1",
                                    "level": 0,
                                    "nextKey": undefined,
                                    "parentKey": null,
                                    "prevKey": "$.0",
                                    "props": {
                                      "children": "Item 2",
                                    },
                                    "rendered": "Item 2",
                                    "shouldInvalidate": undefined,
                                    "textValue": "Item 2",
                                    "type": "item",
                                    "value": undefined,
                                    "wrapper": undefined,
                                  }
                                }
                                key="$.1"
                              >
                                <ListItemBase
                                  aria-describedby={null}
                                  aria-disabled={false}
                                  aria-labelledby={null}
                                  aria-selected={false}
                                  data-key="$.1"
                                  id="test-ID-option-$.1"
                                  isDisabled={false}
                                  isPadded={true}
                                  key="$.1"
                                  onClick={[Function]}
                                  onDragStart={[Function]}
                                  onFocus={[Function]}
                                  onKeyDown={[Function]}
                                  onKeyUp={[Function]}
                                  onMouseDown={[Function]}
                                  onMouseEnter={[Function]}
                                  onMouseLeave={[Function]}
                                  onMouseUp={[Function]}
                                  onTouchCancel={[Function]}
                                  onTouchEnd={[Function]}
                                  onTouchMove={[Function]}
                                  onTouchStart={[Function]}
                                  role="option"
                                  tabIndex={-1}
                                >
                                  <FocusRing
                                    isInset={false}
                                  >
                                    <FocusRing
                                      focusClass="md-focus-ring-wrapper children"
                                      focusRingClass="md-focus-ring-wrapper children"
                                      isInset={false}
                                    >
                                      <li
                                        aria-describedby={null}
                                        aria-disabled={false}
                                        aria-labelledby={null}
                                        aria-selected={false}
                                        className="md-list-item-base-wrapper"
                                        data-allow-text-select={false}
                                        data-disabled={false}
                                        data-interactive={true}
                                        data-key="$.1"
                                        data-padded={true}
                                        data-shape="rectangle"
                                        data-size={40}
                                        id="test-ID-option-$.1"
                                        onBlur={[Function]}
                                        onClick={[Function]}
                                        onDragStart={[Function]}
                                        onFocus={[Function]}
                                        onKeyDown={[Function]}
                                        onKeyUp={[Function]}
                                        onMouseDown={[Function]}
                                        onMouseEnter={[Function]}
                                        onMouseLeave={[Function]}
                                        onMouseUp={[Function]}
                                        onPointerDown={[Function]}
                                        onTouchCancel={[Function]}
                                        onTouchEnd={[Function]}
                                        onTouchMove={[Function]}
                                        onTouchStart={[Function]}
                                        role="option"
                                        tabIndex={-1}
                                      >
                                        <ListItemBaseSection
                                          position="fill"
                                          title="Item 2"
                                        >
                                          <div
                                            data-position="fill"
                                            title="Item 2"
                                          >
                                            Item 2
                                          </div>
                                        </ListItemBaseSection>
                                      </li>
                                    </FocusRing>
                                  </FocusRing>
                                </ListItemBase>
                              </ListBoxItem>
                            </ul>
                          </FocusRing>
                        </FocusRing>
                      </MenuListBackground>
                    </ListBoxBase>
                  </div>
                  <span
                    data-focus-scope-end={true}
                    hidden={true}
                  />
                </FocusScope>
              </ModalContainer>
            </Portal>
          </Tippy>
        </ForwardRef(TippyWrapper)>
      </LazyTippy>
    </Popover>
  </div>
</Select>
`;

exports[`Select snapshot should match snapshot with listboxWidth 1`] = `
<Select
  isOpen={true}
  label="test"
  listboxWidth="200px"
>
  <div
    className="md-select-wrapper"
    style={
      {
        "--local-width": "200px",
      }
    }
  >
    <label
      id="test-ID"
      onClick={[Function]}
    >
      <Text>
        <p
          className="md-text-wrapper"
          data-type="body-primary"
        >
          test
        </p>
      </Text>
    </label>
    <HiddenSelect
      label="test"
      state={
        {
          "close": [Function],
          "collection": ListCollection {
            "firstKey": "$.0",
            "iterable": {
              Symbol(Symbol.iterator): [Function],
            },
            "keyMap": Map {
              "$.0" => {
                "aria-label": undefined,
                "childNodes": {
                  Symbol(Symbol.iterator): [Function],
                },
                "hasChildNodes": false,
                "index": 0,
                "key": "$.0",
                "level": 0,
                "nextKey": "$.1",
                "parentKey": null,
                "prevKey": undefined,
                "props": {
                  "children": "Item 1",
                },
                "rendered": "Item 1",
                "shouldInvalidate": undefined,
                "textValue": "Item 1",
                "type": "item",
                "value": undefined,
                "wrapper": undefined,
              },
              "$.1" => {
                "aria-label": undefined,
                "childNodes": {
                  Symbol(Symbol.iterator): [Function],
                },
                "hasChildNodes": false,
                "index": 1,
                "key": "$.1",
                "level": 0,
                "nextKey": undefined,
                "parentKey": null,
                "prevKey": "$.0",
                "props": {
                  "children": "Item 2",
                },
                "rendered": "Item 2",
                "shouldInvalidate": undefined,
                "textValue": "Item 2",
                "type": "item",
                "value": undefined,
                "wrapper": undefined,
              },
            },
            "lastKey": "$.1",
          },
          "disabledKeys": Set {},
          "focusStrategy": null,
          "isFocused": false,
          "isOpen": true,
          "open": [Function],
          "selectedItem": null,
          "selectedKey": null,
          "selectionManager": SelectionManager {
            "_isSelectAll": null,
            "allowsCellSelection": false,
            "collection": ListCollection {
              "firstKey": "$.0",
              "iterable": {
                Symbol(Symbol.iterator): [Function],
              },
              "keyMap": Map {
                "$.0" => {
                  "aria-label": undefined,
                  "childNodes": {
                    Symbol(Symbol.iterator): [Function],
                  },
                  "hasChildNodes": false,
                  "index": 0,
                  "key": "$.0",
                  "level": 0,
                  "nextKey": "$.1",
                  "parentKey": null,
                  "prevKey": undefined,
                  "props": {
                    "children": "Item 1",
                  },
                  "rendered": "Item 1",
                  "shouldInvalidate": undefined,
                  "textValue": "Item 1",
                  "type": "item",
                  "value": undefined,
                  "wrapper": undefined,
                },
                "$.1" => {
                  "aria-label": undefined,
                  "childNodes": {
                    Symbol(Symbol.iterator): [Function],
                  },
                  "hasChildNodes": false,
                  "index": 1,
                  "key": "$.1",
                  "level": 0,
                  "nextKey": undefined,
                  "parentKey": null,
                  "prevKey": "$.0",
                  "props": {
                    "children": "Item 2",
                  },
                  "rendered": "Item 2",
                  "shouldInvalidate": undefined,
                  "textValue": "Item 2",
                  "type": "item",
                  "value": undefined,
                  "wrapper": undefined,
                },
              },
              "lastKey": "$.1",
            },
            "state": {
              "childFocusStrategy": "first",
              "disabledKeys": Set {},
              "disallowEmptySelection": true,
              "focusedKey": "$.0",
              "isFocused": true,
              "selectedKeys": Set {},
              "selectionMode": "single",
              "setFocused": [Function],
              "setFocusedKey": [Function],
              "setSelectedKeys": [Function],
            },
          },
          "setFocused": [Function],
          "setSelectedKey": [Function],
          "toggle": [Function],
        }
      }
      triggerRef={
        {
          "current": <button
            aria-activedescendant="test-ID-option-$.0"
            aria-expanded="true"
            aria-haspopup="listbox"
            aria-labelledby="test-ID test-ID"
            class="md-select-dropdown-input md-select-open"
            id="test-ID"
            role="combobox"
            type="button"
          >
            <span
              class="md-select-selected-item-wrapper"
              id="test-ID"
            />
            <span
              aria-hidden="true"
              class="md-select-icon-wrapper"
            >
              <div
                aria-hidden="true"
                class="md-icon-wrapper md-icon-auto-scales md-icon-scales md-icon-no-shrink"
                role="img"
              >
                <svg
                  aria-hidden="true"
                  class=""
                  data-autoscale="false"
                  data-scale="16"
                  data-test="arrow-up"
                  fill="currentColor"
                  height="100%"
                  viewBox="0, 0, 32, 32"
                  width="100%"
                />
              </div>
            </span>
          </button>,
        }
      }
    >
      <div
        aria-hidden={true}
        style={
          {
            "border": 0,
            "clip": "rect(0 0 0 0)",
            "clipPath": "inset(50%)",
            "height": 1,
            "margin": "0 -1px -1px 0",
            "overflow": "hidden",
            "padding": 0,
            "position": "absolute",
            "whiteSpace": "nowrap",
            "width": 1,
          }
        }
      >
        <input
          onFocus={[Function]}
          style={
            {
              "fontSize": 16,
            }
          }
          tabIndex={-1}
          type="text"
        />
        <label>
          test
          <select
            onChange={[Function]}
            size={2}
            tabIndex={-1}
            value=""
          >
            <option />
            <option
              key="$.0"
              value="$.0"
            >
              Item 1
            </option>
            <option
              key="$.1"
              value="$.1"
            >
              Item 2
            </option>
          </select>
        </label>
      </div>
    </HiddenSelect>
    <Popover
      className="md-select-popover"
      hideOnEsc={false}
      interactive={true}
      onClickOutside={[Function]}
      onHide={[Function]}
      onKeyDown={[Function]}
      placement="bottom"
      role={null}
      setInstance={[Function]}
      showArrow={false}
      strategy="fixed"
      style={
        {
          "maxHeight": "none",
        }
      }
      trigger="manual"
      triggerComponent={
        <button
          aria-activedescendant="test-ID-option-$.0"
          aria-expanded={true}
          aria-haspopup="listbox"
          aria-labelledby="test-ID test-ID"
          className="md-select-dropdown-input md-select-open"
          id="test-ID"
          onBlur={[Function]}
          onClick={[Function]}
          onDragStart={[Function]}
          onFocus={[Function]}
          onKeyDown={[Function]}
          onKeyUp={[Function]}
          onMouseDown={[Function]}
          onMouseEnter={[Function]}
          onMouseLeave={[Function]}
          onMouseUp={[Function]}
          onTouchCancel={[Function]}
          onTouchEnd={[Function]}
          onTouchMove={[Function]}
          onTouchStart={[Function]}
          role="combobox"
          type="button"
        >
          <span
            className="md-select-selected-item-wrapper"
            id="test-ID"
          />
          <span
            aria-hidden="true"
            className="md-select-icon-wrapper"
          >
            <Icon
              name="arrow-up"
              scale={16}
              weight="bold"
            />
          </span>
        </button>
      }
    >
      <LazyTippy
        animation={false}
        appendTo="parent"
        hideOnClick={false}
        interactive={true}
        offset={
          [
            0,
            5,
          ]
        }
        onClickOutside={[Function]}
        onHidden={[Function]}
        onHide={[Function]}
        placement="bottom"
        plugins={
          [
            {
              "fn": [Function],
              "name": "addBackdropPlugin",
            },
          ]
        }
        popperOptions={
          {
            "modifiers": [
              {
                "enabled": false,
                "name": "arrow",
                "options": {
                  "element": "#arrow1",
                  "padding": 5,
                },
              },
              {
                "name": "preventOverflow",
                "options": {
                  "altAxis": true,
                  "boundariesElement": "scrollParent",
                  "padding": 8,
                },
              },
            ],
            "strategy": "fixed",
          }
        }
        render={[Function]}
        setInstance={[Function]}
        trigger="manual"
      >
        <ForwardRef(TippyWrapper)
          animation={false}
          appendTo="parent"
          hideOnClick={false}
          interactive={true}
          offset={
            [
              0,
              5,
            ]
          }
          onClickOutside={[Function]}
          onHidden={[Function]}
          onHide={[Function]}
          placement="bottom"
          plugins={
            [
              {
                "fn": [Function],
              },
              {
                "fn": [Function],
              },
              {
                "fn": [Function],
              },
              {
                "fn": [Function],
                "name": "addBackdropPlugin",
              },
            ]
          }
          popperOptions={
            {
              "modifiers": [
                {
                  "enabled": false,
                  "name": "arrow",
                  "options": {
                    "element": "#arrow1",
                    "padding": 5,
                  },
                },
                {
                  "name": "preventOverflow",
                  "options": {
                    "altAxis": true,
                    "boundariesElement": "scrollParent",
                    "padding": 8,
                  },
                },
              ],
              "strategy": "fixed",
            }
          }
          render={[Function]}
          trigger="manual"
        >
          <Tippy
            animation={false}
            appendTo="parent"
            hideOnClick={false}
            interactive={true}
            offset={
              [
                0,
                5,
              ]
            }
            onClickOutside={[Function]}
            onHidden={[Function]}
            onHide={[Function]}
            placement="bottom"
            plugins={
              [
                {
                  "fn": [Function],
                },
                {
                  "fn": [Function],
                },
                {
                  "fn": [Function],
                },
                {
                  "fn": [Function],
                  "name": "addBackdropPlugin",
                },
              ]
            }
            popperOptions={
              {
                "modifiers": [
                  {
                    "enabled": false,
                    "name": "arrow",
                    "options": {
                      "element": "#arrow1",
                      "padding": 5,
                    },
                  },
                  {
                    "name": "preventOverflow",
                    "options": {
                      "altAxis": true,
                      "boundariesElement": "scrollParent",
                      "padding": 8,
                    },
                  },
                ],
                "strategy": "fixed",
              }
            }
            render={[Function]}
            trigger="manual"
          >
            <button
              aria-activedescendant="test-ID-option-$.0"
              aria-expanded={true}
              aria-haspopup="listbox"
              aria-labelledby="test-ID test-ID"
              className="md-select-dropdown-input md-select-open"
              id="test-ID"
              onBlur={[Function]}
              onClick={[Function]}
              onDragStart={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              onMouseDown={[Function]}
              onMouseEnter={[Function]}
              onMouseLeave={[Function]}
              onMouseUp={[Function]}
              onTouchCancel={[Function]}
              onTouchEnd={[Function]}
              onTouchMove={[Function]}
              onTouchStart={[Function]}
              role="combobox"
              type="button"
            >
              <span
                className="md-select-selected-item-wrapper"
                id="test-ID"
              />
              <span
                aria-hidden="true"
                className="md-select-icon-wrapper"
              >
                <Icon
                  name="arrow-up"
                  scale={16}
                  weight="bold"
                >
                  <div
                    aria-hidden="true"
                    className="md-icon-wrapper md-icon-auto-scales md-icon-scales md-icon-no-shrink"
                    role="img"
                  >
                    <svg
                      aria-hidden="true"
                      className=""
                      data-autoscale={false}
                      data-scale={16}
                      data-test="arrow-up"
                      fill="currentColor"
                      height="100%"
                      style={{}}
                      viewBox="0, 0, 32, 32"
                      width="100%"
                    />
                  </div>
                </Icon>
              </span>
            </button>
            <Portal
              containerInfo={
                <div
                  data-tippy-root=""
                  id="tippy-16"
                  style="z-index: 9999; position: fixed; left: 0px; top: 0px; margin: 0px; transform: translate(0px, 0px);"
                >
                  <span
                    data-focus-scope-start="true"
                    hidden=""
                  />
                  <div
                    aria-labelledby="test-ID"
                    class="md-select-popover md-modal-container-wrapper"
                    data-arrow-orientation="vertical"
                    data-color="primary"
                    data-elevation="3"
                    data-padded="true"
                    data-placement="bottom"
                    data-round="50"
                    style="max-height: none;"
                  >
                    <ul
                      aria-labelledby="test-ID"
                      class="md-select-menu-listbox md-menu-list-background-wrapper"
                      data-color="primary"
                      id="test-ID"
                      role="listbox"
                      tabindex="-1"
                    >
                      <li
                        aria-disabled="false"
                        aria-selected="false"
                        class="md-list-item-base-wrapper"
                        data-allow-text-select="false"
                        data-disabled="false"
                        data-interactive="true"
                        data-key="$.0"
                        data-padded="true"
                        data-shape="rectangle"
                        data-size="40"
                        id="test-ID-option-$.0"
                        role="option"
                        tabindex="0"
                      >
                        <div
                          data-position="fill"
                          title="Item 1"
                        >
                          Item 1
                        </div>
                      </li>
                      <li
                        aria-disabled="false"
                        aria-selected="false"
                        class="md-list-item-base-wrapper"
                        data-allow-text-select="false"
                        data-disabled="false"
                        data-interactive="true"
                        data-key="$.1"
                        data-padded="true"
                        data-shape="rectangle"
                        data-size="40"
                        id="test-ID-option-$.1"
                        role="option"
                        tabindex="-1"
                      >
                        <div
                          data-position="fill"
                          title="Item 2"
                        >
                          Item 2
                        </div>
                      </li>
                    </ul>
                  </div>
                  <span
                    data-focus-scope-end="true"
                    hidden=""
                  />
                </div>
              }
            >
              <ModalContainer
                aria-labelledby="test-ID"
                ariaModal={true}
                arrowId="arrow1"
                className="md-select-popover"
                elevation={3}
                focusLockProps={
                  {
                    "autoFocus": true,
                    "restoreFocus": true,
                  }
                }
                isPadded={true}
                onKeyDown={[Function]}
                placement="bottom"
                role={null}
                round={50}
                showArrow={false}
                style={
                  {
                    "maxHeight": "none",
                  }
                }
              >
                <FocusScope
                  autoFocus={true}
                  contain={true}
                  restoreFocus={true}
                >
                  <span
                    data-focus-scope-start={true}
                    hidden={true}
                  />
                  <div
                    aria-labelledby="test-ID"
                    className="md-select-popover md-modal-container-wrapper"
                    data-arrow-orientation="vertical"
                    data-color="primary"
                    data-elevation={3}
                    data-padded={true}
                    data-placement="bottom"
                    data-round={50}
                    onKeyDown={[Function]}
                    role={null}
                    style={
                      {
                        "maxHeight": "none",
                      }
                    }
                  >
                    <ListBoxBase
                      aria-labelledby="test-ID"
                      autoFocus="first"
                      className="md-select-menu-listbox"
                      disallowEmptySelection={true}
                      id="test-ID"
                      onBlur={[Function]}
                      shouldFocusOnHover={true}
                      shouldSelectOnPressUp={true}
                      state={
                        {
                          "close": [Function],
                          "collection": ListCollection {
                            "firstKey": "$.0",
                            "iterable": {
                              Symbol(Symbol.iterator): [Function],
                            },
                            "keyMap": Map {
                              "$.0" => {
                                "aria-label": undefined,
                                "childNodes": {
                                  Symbol(Symbol.iterator): [Function],
                                },
                                "hasChildNodes": false,
                                "index": 0,
                                "key": "$.0",
                                "level": 0,
                                "nextKey": "$.1",
                                "parentKey": null,
                                "prevKey": undefined,
                                "props": {
                                  "children": "Item 1",
                                },
                                "rendered": "Item 1",
                                "shouldInvalidate": undefined,
                                "textValue": "Item 1",
                                "type": "item",
                                "value": undefined,
                                "wrapper": undefined,
                              },
                              "$.1" => {
                                "aria-label": undefined,
                                "childNodes": {
                                  Symbol(Symbol.iterator): [Function],
                                },
                                "hasChildNodes": false,
                                "index": 1,
                                "key": "$.1",
                                "level": 0,
                                "nextKey": undefined,
                                "parentKey": null,
                                "prevKey": "$.0",
                                "props": {
                                  "children": "Item 2",
                                },
                                "rendered": "Item 2",
                                "shouldInvalidate": undefined,
                                "textValue": "Item 2",
                                "type": "item",
                                "value": undefined,
                                "wrapper": undefined,
                              },
                            },
                            "lastKey": "$.1",
                          },
                          "disabledKeys": Set {},
                          "focusStrategy": null,
                          "isFocused": false,
                          "isOpen": true,
                          "open": [Function],
                          "selectedItem": null,
                          "selectedKey": null,
                          "selectionManager": SelectionManager {
                            "_isSelectAll": null,
                            "allowsCellSelection": false,
                            "collection": ListCollection {
                              "firstKey": "$.0",
                              "iterable": {
                                Symbol(Symbol.iterator): [Function],
                              },
                              "keyMap": Map {
                                "$.0" => {
                                  "aria-label": undefined,
                                  "childNodes": {
                                    Symbol(Symbol.iterator): [Function],
                                  },
                                  "hasChildNodes": false,
                                  "index": 0,
                                  "key": "$.0",
                                  "level": 0,
                                  "nextKey": "$.1",
                                  "parentKey": null,
                                  "prevKey": undefined,
                                  "props": {
                                    "children": "Item 1",
                                  },
                                  "rendered": "Item 1",
                                  "shouldInvalidate": undefined,
                                  "textValue": "Item 1",
                                  "type": "item",
                                  "value": undefined,
                                  "wrapper": undefined,
                                },
                                "$.1" => {
                                  "aria-label": undefined,
                                  "childNodes": {
                                    Symbol(Symbol.iterator): [Function],
                                  },
                                  "hasChildNodes": false,
                                  "index": 1,
                                  "key": "$.1",
                                  "level": 0,
                                  "nextKey": undefined,
                                  "parentKey": null,
                                  "prevKey": "$.0",
                                  "props": {
                                    "children": "Item 2",
                                  },
                                  "rendered": "Item 2",
                                  "shouldInvalidate": undefined,
                                  "textValue": "Item 2",
                                  "type": "item",
                                  "value": undefined,
                                  "wrapper": undefined,
                                },
                              },
                              "lastKey": "$.1",
                            },
                            "state": {
                              "childFocusStrategy": "first",
                              "disabledKeys": Set {},
                              "disallowEmptySelection": true,
                              "focusedKey": "$.0",
                              "isFocused": true,
                              "selectedKeys": Set {},
                              "selectionMode": "single",
                              "setFocused": [Function],
                              "setFocusedKey": [Function],
                              "setSelectedKeys": [Function],
                            },
                          },
                          "setFocused": [Function],
                          "setSelectedKey": [Function],
                          "toggle": [Function],
                        }
                      }
                    >
                      <MenuListBackground
                        aria-labelledby="test-ID"
                        className="md-select-menu-listbox"
                        color="primary"
                        id="test-ID"
                        onBlur={[Function]}
                        onFocus={[Function]}
                        onKeyDown={[Function]}
                        onKeyDownCapture={[Function]}
                        onMouseDown={[Function]}
                        role="listbox"
                        tabIndex={-1}
                      >
                        <FocusRing>
                          <FocusRing
                            focusClass="md-focus-ring-wrapper children"
                            focusRingClass="md-focus-ring-wrapper children"
                          >
                            <ul
                              aria-labelledby="test-ID"
                              className="md-select-menu-listbox md-menu-list-background-wrapper"
                              data-color="primary"
                              id="test-ID"
                              onBlur={[Function]}
                              onFocus={[Function]}
                              onKeyDown={[Function]}
                              onKeyDownCapture={[Function]}
                              onMouseDown={[Function]}
                              role="listbox"
                              tabIndex={-1}
                            >
                              <ListBoxItem
                                item={
                                  {
                                    "aria-label": undefined,
                                    "childNodes": {
                                      Symbol(Symbol.iterator): [Function],
                                    },
                                    "hasChildNodes": false,
                                    "index": 0,
                                    "key": "$.0",
                                    "level": 0,
                                    "nextKey": "$.1",
                                    "parentKey": null,
                                    "prevKey": undefined,
                                    "props": {
                                      "children": "Item 1",
                                    },
                                    "rendered": "Item 1",
                                    "shouldInvalidate": undefined,
                                    "textValue": "Item 1",
                                    "type": "item",
                                    "value": undefined,
                                    "wrapper": undefined,
                                  }
                                }
                                key="$.0"
                              >
                                <ListItemBase
                                  aria-describedby={null}
                                  aria-disabled={false}
                                  aria-labelledby={null}
                                  aria-selected={false}
                                  data-key="$.0"
                                  id="test-ID-option-$.0"
                                  isDisabled={false}
                                  isPadded={true}
                                  key="$.0"
                                  onClick={[Function]}
                                  onDragStart={[Function]}
                                  onFocus={[Function]}
                                  onKeyDown={[Function]}
                                  onKeyUp={[Function]}
                                  onMouseDown={[Function]}
                                  onMouseEnter={[Function]}
                                  onMouseLeave={[Function]}
                                  onMouseUp={[Function]}
                                  onTouchCancel={[Function]}
                                  onTouchEnd={[Function]}
                                  onTouchMove={[Function]}
                                  onTouchStart={[Function]}
                                  role="option"
                                  tabIndex={0}
                                >
                                  <FocusRing
                                    isInset={false}
                                  >
                                    <FocusRing
                                      focusClass="md-focus-ring-wrapper children"
                                      focusRingClass="md-focus-ring-wrapper children"
                                      isInset={false}
                                    >
                                      <li
                                        aria-describedby={null}
                                        aria-disabled={false}
                                        aria-labelledby={null}
                                        aria-selected={false}
                                        className="md-list-item-base-wrapper"
                                        data-allow-text-select={false}
                                        data-disabled={false}
                                        data-interactive={true}
                                        data-key="$.0"
                                        data-padded={true}
                                        data-shape="rectangle"
                                        data-size={40}
                                        id="test-ID-option-$.0"
                                        onBlur={[Function]}
                                        onClick={[Function]}
                                        onDragStart={[Function]}
                                        onFocus={[Function]}
                                        onKeyDown={[Function]}
                                        onKeyUp={[Function]}
                                        onMouseDown={[Function]}
                                        onMouseEnter={[Function]}
                                        onMouseLeave={[Function]}
                                        onMouseUp={[Function]}
                                        onPointerDown={[Function]}
                                        onTouchCancel={[Function]}
                                        onTouchEnd={[Function]}
                                        onTouchMove={[Function]}
                                        onTouchStart={[Function]}
                                        role="option"
                                        tabIndex={0}
                                      >
                                        <ListItemBaseSection
                                          position="fill"
                                          title="Item 1"
                                        >
                                          <div
                                            data-position="fill"
                                            title="Item 1"
                                          >
                                            Item 1
                                          </div>
                                        </ListItemBaseSection>
                                      </li>
                                    </FocusRing>
                                  </FocusRing>
                                </ListItemBase>
                              </ListBoxItem>
                              <ListBoxItem
                                item={
                                  {
                                    "aria-label": undefined,
                                    "childNodes": {
                                      Symbol(Symbol.iterator): [Function],
                                    },
                                    "hasChildNodes": false,
                                    "index": 1,
                                    "key": "$.1",
                                    "level": 0,
                                    "nextKey": undefined,
                                    "parentKey": null,
                                    "prevKey": "$.0",
                                    "props": {
                                      "children": "Item 2",
                                    },
                                    "rendered": "Item 2",
                                    "shouldInvalidate": undefined,
                                    "textValue": "Item 2",
                                    "type": "item",
                                    "value": undefined,
                                    "wrapper": undefined,
                                  }
                                }
                                key="$.1"
                              >
                                <ListItemBase
                                  aria-describedby={null}
                                  aria-disabled={false}
                                  aria-labelledby={null}
                                  aria-selected={false}
                                  data-key="$.1"
                                  id="test-ID-option-$.1"
                                  isDisabled={false}
                                  isPadded={true}
                                  key="$.1"
                                  onClick={[Function]}
                                  onDragStart={[Function]}
                                  onFocus={[Function]}
                                  onKeyDown={[Function]}
                                  onKeyUp={[Function]}
                                  onMouseDown={[Function]}
                                  onMouseEnter={[Function]}
                                  onMouseLeave={[Function]}
                                  onMouseUp={[Function]}
                                  onTouchCancel={[Function]}
                                  onTouchEnd={[Function]}
                                  onTouchMove={[Function]}
                                  onTouchStart={[Function]}
                                  role="option"
                                  tabIndex={-1}
                                >
                                  <FocusRing
                                    isInset={false}
                                  >
                                    <FocusRing
                                      focusClass="md-focus-ring-wrapper children"
                                      focusRingClass="md-focus-ring-wrapper children"
                                      isInset={false}
                                    >
                                      <li
                                        aria-describedby={null}
                                        aria-disabled={false}
                                        aria-labelledby={null}
                                        aria-selected={false}
                                        className="md-list-item-base-wrapper"
                                        data-allow-text-select={false}
                                        data-disabled={false}
                                        data-interactive={true}
                                        data-key="$.1"
                                        data-padded={true}
                                        data-shape="rectangle"
                                        data-size={40}
                                        id="test-ID-option-$.1"
                                        onBlur={[Function]}
                                        onClick={[Function]}
                                        onDragStart={[Function]}
                                        onFocus={[Function]}
                                        onKeyDown={[Function]}
                                        onKeyUp={[Function]}
                                        onMouseDown={[Function]}
                                        onMouseEnter={[Function]}
                                        onMouseLeave={[Function]}
                                        onMouseUp={[Function]}
                                        onPointerDown={[Function]}
                                        onTouchCancel={[Function]}
                                        onTouchEnd={[Function]}
                                        onTouchMove={[Function]}
                                        onTouchStart={[Function]}
                                        role="option"
                                        tabIndex={-1}
                                      >
                                        <ListItemBaseSection
                                          position="fill"
                                          title="Item 2"
                                        >
                                          <div
                                            data-position="fill"
                                            title="Item 2"
                                          >
                                            Item 2
                                          </div>
                                        </ListItemBaseSection>
                                      </li>
                                    </FocusRing>
                                  </FocusRing>
                                </ListItemBase>
                              </ListBoxItem>
                            </ul>
                          </FocusRing>
                        </FocusRing>
                      </MenuListBackground>
                    </ListBoxBase>
                  </div>
                  <span
                    data-focus-scope-end={true}
                    hidden={true}
                  />
                </FocusScope>
              </ModalContainer>
            </Portal>
          </Tippy>
        </ForwardRef(TippyWrapper)>
      </LazyTippy>
    </Popover>
  </div>
</Select>
`;

exports[`Select snapshot should match snapshot with placeholder 1`] = `
<Select
  id="test-id"
  label="test"
  placeholder="Select an option"
>
  <div
    className="md-select-wrapper"
    id="test-id"
    style={
      {
        "--local-width": "100%",
      }
    }
  >
    <label
      id="test-ID"
      onClick={[Function]}
    >
      <Text>
        <p
          className="md-text-wrapper"
          data-type="body-primary"
        >
          test
        </p>
      </Text>
    </label>
    <HiddenSelect
      label="test"
      state={
        {
          "close": [Function],
          "collection": ListCollection {
            "firstKey": "$.0",
            "iterable": {
              Symbol(Symbol.iterator): [Function],
            },
            "keyMap": Map {
              "$.0" => {
                "aria-label": undefined,
                "childNodes": {
                  Symbol(Symbol.iterator): [Function],
                },
                "hasChildNodes": false,
                "index": 0,
                "key": "$.0",
                "level": 0,
                "nextKey": "$.1",
                "parentKey": null,
                "prevKey": undefined,
                "props": {
                  "children": "Item 1",
                },
                "rendered": "Item 1",
                "shouldInvalidate": undefined,
                "textValue": "Item 1",
                "type": "item",
                "value": undefined,
                "wrapper": undefined,
              },
              "$.1" => {
                "aria-label": undefined,
                "childNodes": {
                  Symbol(Symbol.iterator): [Function],
                },
                "hasChildNodes": false,
                "index": 1,
                "key": "$.1",
                "level": 0,
                "nextKey": undefined,
                "parentKey": null,
                "prevKey": "$.0",
                "props": {
                  "children": "Item 2",
                },
                "rendered": "Item 2",
                "shouldInvalidate": undefined,
                "textValue": "Item 2",
                "type": "item",
                "value": undefined,
                "wrapper": undefined,
              },
            },
            "lastKey": "$.1",
          },
          "disabledKeys": Set {},
          "focusStrategy": null,
          "isFocused": false,
          "isOpen": false,
          "open": [Function],
          "selectedItem": null,
          "selectedKey": null,
          "selectionManager": SelectionManager {
            "_isSelectAll": null,
            "allowsCellSelection": false,
            "collection": ListCollection {
              "firstKey": "$.0",
              "iterable": {
                Symbol(Symbol.iterator): [Function],
              },
              "keyMap": Map {
                "$.0" => {
                  "aria-label": undefined,
                  "childNodes": {
                    Symbol(Symbol.iterator): [Function],
                  },
                  "hasChildNodes": false,
                  "index": 0,
                  "key": "$.0",
                  "level": 0,
                  "nextKey": "$.1",
                  "parentKey": null,
                  "prevKey": undefined,
                  "props": {
                    "children": "Item 1",
                  },
                  "rendered": "Item 1",
                  "shouldInvalidate": undefined,
                  "textValue": "Item 1",
                  "type": "item",
                  "value": undefined,
                  "wrapper": undefined,
                },
                "$.1" => {
                  "aria-label": undefined,
                  "childNodes": {
                    Symbol(Symbol.iterator): [Function],
                  },
                  "hasChildNodes": false,
                  "index": 1,
                  "key": "$.1",
                  "level": 0,
                  "nextKey": undefined,
                  "parentKey": null,
                  "prevKey": "$.0",
                  "props": {
                    "children": "Item 2",
                  },
                  "rendered": "Item 2",
                  "shouldInvalidate": undefined,
                  "textValue": "Item 2",
                  "type": "item",
                  "value": undefined,
                  "wrapper": undefined,
                },
              },
              "lastKey": "$.1",
            },
            "state": {
              "childFocusStrategy": null,
              "disabledKeys": Set {},
              "disallowEmptySelection": true,
              "focusedKey": null,
              "isFocused": false,
              "selectedKeys": Set {},
              "selectionMode": "single",
              "setFocused": [Function],
              "setFocusedKey": [Function],
              "setSelectedKeys": [Function],
            },
          },
          "setFocused": [Function],
          "setSelectedKey": [Function],
          "toggle": [Function],
        }
      }
      triggerRef={
        {
          "current": <button
            aria-controls="test-id"
            aria-expanded="false"
            aria-haspopup="listbox"
            aria-labelledby="test-ID test-ID"
            class="md-select-dropdown-input"
            id="test-ID"
            role="combobox"
            type="button"
          >
            <span
              class="md-select-selected-item-wrapper"
              id="test-ID"
            >
              Select an option
            </span>
            <span
              aria-hidden="true"
              class="md-select-icon-wrapper"
            >
              <div
                aria-hidden="true"
                class="md-icon-wrapper md-icon-auto-scales md-icon-scales md-icon-no-shrink"
                role="img"
              >
                <svg
                  aria-hidden="true"
                  class=""
                  data-autoscale="false"
                  data-scale="16"
                  data-test="arrow-down"
                  fill="currentColor"
                  height="100%"
                  viewBox="0, 0, 32, 32"
                  width="100%"
                />
              </div>
            </span>
          </button>,
        }
      }
    >
      <div
        aria-hidden={true}
        style={
          {
            "border": 0,
            "clip": "rect(0 0 0 0)",
            "clipPath": "inset(50%)",
            "height": 1,
            "margin": "0 -1px -1px 0",
            "overflow": "hidden",
            "padding": 0,
            "position": "absolute",
            "whiteSpace": "nowrap",
            "width": 1,
          }
        }
      >
        <input
          onFocus={[Function]}
          style={
            {
              "fontSize": 16,
            }
          }
          tabIndex={-1}
          type="text"
        />
        <label>
          test
          <select
            onChange={[Function]}
            size={2}
            tabIndex={-1}
            value=""
          >
            <option />
            <option
              key="$.0"
              value="$.0"
            >
              Item 1
            </option>
            <option
              key="$.1"
              value="$.1"
            >
              Item 2
            </option>
          </select>
        </label>
      </div>
    </HiddenSelect>
    <Popover
      className="md-select-popover"
      hideOnEsc={false}
      interactive={true}
      onClickOutside={[Function]}
      onHide={[Function]}
      onKeyDown={[Function]}
      placement="bottom"
      role={null}
      setInstance={[Function]}
      showArrow={false}
      strategy="absolute"
      style={
        {
          "maxHeight": "none",
        }
      }
      trigger="manual"
      triggerComponent={
        <button
          aria-activedescendant={null}
          aria-controls="test-id"
          aria-expanded={false}
          aria-haspopup="listbox"
          aria-labelledby="test-ID test-ID"
          className="md-select-dropdown-input"
          id="test-ID"
          onBlur={[Function]}
          onClick={[Function]}
          onDragStart={[Function]}
          onFocus={[Function]}
          onKeyDown={[Function]}
          onKeyUp={[Function]}
          onMouseDown={[Function]}
          onMouseEnter={[Function]}
          onMouseLeave={[Function]}
          onMouseUp={[Function]}
          onTouchCancel={[Function]}
          onTouchEnd={[Function]}
          onTouchMove={[Function]}
          onTouchStart={[Function]}
          role="combobox"
          type="button"
        >
          <span
            className="md-select-selected-item-wrapper"
            id="test-ID"
          >
            Select an option
          </span>
          <span
            aria-hidden="true"
            className="md-select-icon-wrapper"
          >
            <Icon
              name="arrow-down"
              scale={16}
              weight="bold"
            />
          </span>
        </button>
      }
    >
      <LazyTippy
        animation={false}
        appendTo="parent"
        hideOnClick={false}
        interactive={true}
        offset={
          [
            0,
            5,
          ]
        }
        onClickOutside={[Function]}
        onHidden={[Function]}
        onHide={[Function]}
        placement="bottom"
        plugins={
          [
            {
              "fn": [Function],
              "name": "addBackdropPlugin",
            },
          ]
        }
        popperOptions={
          {
            "modifiers": [
              {
                "enabled": false,
                "name": "arrow",
                "options": {
                  "element": "#arrow1",
                  "padding": 5,
                },
              },
              {
                "name": "preventOverflow",
                "options": {
                  "altAxis": true,
                  "boundariesElement": "scrollParent",
                  "padding": 8,
                },
              },
            ],
            "strategy": "absolute",
          }
        }
        render={[Function]}
        setInstance={[Function]}
        trigger="manual"
      >
        <ForwardRef(TippyWrapper)
          animation={false}
          appendTo="parent"
          hideOnClick={false}
          interactive={true}
          offset={
            [
              0,
              5,
            ]
          }
          onClickOutside={[Function]}
          onHidden={[Function]}
          onHide={[Function]}
          placement="bottom"
          plugins={
            [
              {
                "fn": [Function],
              },
              {
                "fn": [Function],
              },
              {
                "fn": [Function],
              },
              {
                "fn": [Function],
                "name": "addBackdropPlugin",
              },
            ]
          }
          popperOptions={
            {
              "modifiers": [
                {
                  "enabled": false,
                  "name": "arrow",
                  "options": {
                    "element": "#arrow1",
                    "padding": 5,
                  },
                },
                {
                  "name": "preventOverflow",
                  "options": {
                    "altAxis": true,
                    "boundariesElement": "scrollParent",
                    "padding": 8,
                  },
                },
              ],
              "strategy": "absolute",
            }
          }
          render={[Function]}
          trigger="manual"
        >
          <Tippy
            animation={false}
            appendTo="parent"
            hideOnClick={false}
            interactive={true}
            offset={
              [
                0,
                5,
              ]
            }
            onClickOutside={[Function]}
            onHidden={[Function]}
            onHide={[Function]}
            placement="bottom"
            plugins={
              [
                {
                  "fn": [Function],
                },
                {
                  "fn": [Function],
                },
                {
                  "fn": [Function],
                },
                {
                  "fn": [Function],
                  "name": "addBackdropPlugin",
                },
              ]
            }
            popperOptions={
              {
                "modifiers": [
                  {
                    "enabled": false,
                    "name": "arrow",
                    "options": {
                      "element": "#arrow1",
                      "padding": 5,
                    },
                  },
                  {
                    "name": "preventOverflow",
                    "options": {
                      "altAxis": true,
                      "boundariesElement": "scrollParent",
                      "padding": 8,
                    },
                  },
                ],
                "strategy": "absolute",
              }
            }
            render={[Function]}
            trigger="manual"
          >
            <button
              aria-activedescendant={null}
              aria-controls="test-id"
              aria-expanded={false}
              aria-haspopup="listbox"
              aria-labelledby="test-ID test-ID"
              className="md-select-dropdown-input"
              id="test-ID"
              onBlur={[Function]}
              onClick={[Function]}
              onDragStart={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              onMouseDown={[Function]}
              onMouseEnter={[Function]}
              onMouseLeave={[Function]}
              onMouseUp={[Function]}
              onTouchCancel={[Function]}
              onTouchEnd={[Function]}
              onTouchMove={[Function]}
              onTouchStart={[Function]}
              role="combobox"
              type="button"
            >
              <span
                className="md-select-selected-item-wrapper"
                id="test-ID"
              >
                Select an option
              </span>
              <span
                aria-hidden="true"
                className="md-select-icon-wrapper"
              >
                <Icon
                  name="arrow-down"
                  scale={16}
                  weight="bold"
                >
                  <div
                    aria-hidden="true"
                    className="md-icon-wrapper md-icon-auto-scales md-icon-scales md-icon-no-shrink"
                    role="img"
                  >
                    <svg
                      aria-hidden="true"
                      className=""
                      data-autoscale={false}
                      data-scale={16}
                      data-test="arrow-down"
                      fill="currentColor"
                      height="100%"
                      style={{}}
                      viewBox="0, 0, 32, 32"
                      width="100%"
                    />
                  </div>
                </Icon>
              </span>
            </button>
            <Portal
              containerInfo={
                <div
                  data-tippy-root=""
                  id="tippy-5"
                  style="z-index: 9999;"
                >
                  
                </div>
              }
            />
          </Tippy>
        </ForwardRef(TippyWrapper)>
      </LazyTippy>
    </Popover>
  </div>
</Select>
`;

exports[`Select snapshot should match snapshot with selected option and listbox closed 1`] = `
<Select
  defaultSelectedKey="$.0"
  id="test-id"
  label="test"
>
  <div
    className="md-select-wrapper"
    id="test-id"
    style={
      {
        "--local-width": "100%",
      }
    }
  >
    <label
      id="test-ID"
      onClick={[Function]}
    >
      <Text>
        <p
          className="md-text-wrapper"
          data-type="body-primary"
        >
          test
        </p>
      </Text>
    </label>
    <HiddenSelect
      label="test"
      state={
        {
          "close": [Function],
          "collection": ListCollection {
            "firstKey": "$.0",
            "iterable": {
              Symbol(Symbol.iterator): [Function],
            },
            "keyMap": Map {
              "$.0" => {
                "aria-label": undefined,
                "childNodes": {
                  Symbol(Symbol.iterator): [Function],
                },
                "hasChildNodes": false,
                "index": 0,
                "key": "$.0",
                "level": 0,
                "nextKey": "$.1",
                "parentKey": null,
                "prevKey": undefined,
                "props": {
                  "children": "Item 1",
                },
                "rendered": "Item 1",
                "shouldInvalidate": undefined,
                "textValue": "Item 1",
                "type": "item",
                "value": undefined,
                "wrapper": undefined,
              },
              "$.1" => {
                "aria-label": undefined,
                "childNodes": {
                  Symbol(Symbol.iterator): [Function],
                },
                "hasChildNodes": false,
                "index": 1,
                "key": "$.1",
                "level": 0,
                "nextKey": undefined,
                "parentKey": null,
                "prevKey": "$.0",
                "props": {
                  "children": "Item 2",
                },
                "rendered": "Item 2",
                "shouldInvalidate": undefined,
                "textValue": "Item 2",
                "type": "item",
                "value": undefined,
                "wrapper": undefined,
              },
            },
            "lastKey": "$.1",
          },
          "disabledKeys": Set {},
          "focusStrategy": null,
          "isFocused": false,
          "isOpen": false,
          "open": [Function],
          "selectedItem": {
            "aria-label": undefined,
            "childNodes": {
              Symbol(Symbol.iterator): [Function],
            },
            "hasChildNodes": false,
            "index": 0,
            "key": "$.0",
            "level": 0,
            "nextKey": "$.1",
            "parentKey": null,
            "prevKey": undefined,
            "props": {
              "children": "Item 1",
            },
            "rendered": "Item 1",
            "shouldInvalidate": undefined,
            "textValue": "Item 1",
            "type": "item",
            "value": undefined,
            "wrapper": undefined,
          },
          "selectedKey": "$.0",
          "selectionManager": SelectionManager {
            "_isSelectAll": null,
            "allowsCellSelection": false,
            "collection": ListCollection {
              "firstKey": "$.0",
              "iterable": {
                Symbol(Symbol.iterator): [Function],
              },
              "keyMap": Map {
                "$.0" => {
                  "aria-label": undefined,
                  "childNodes": {
                    Symbol(Symbol.iterator): [Function],
                  },
                  "hasChildNodes": false,
                  "index": 0,
                  "key": "$.0",
                  "level": 0,
                  "nextKey": "$.1",
                  "parentKey": null,
                  "prevKey": undefined,
                  "props": {
                    "children": "Item 1",
                  },
                  "rendered": "Item 1",
                  "shouldInvalidate": undefined,
                  "textValue": "Item 1",
                  "type": "item",
                  "value": undefined,
                  "wrapper": undefined,
                },
                "$.1" => {
                  "aria-label": undefined,
                  "childNodes": {
                    Symbol(Symbol.iterator): [Function],
                  },
                  "hasChildNodes": false,
                  "index": 1,
                  "key": "$.1",
                  "level": 0,
                  "nextKey": undefined,
                  "parentKey": null,
                  "prevKey": "$.0",
                  "props": {
                    "children": "Item 2",
                  },
                  "rendered": "Item 2",
                  "shouldInvalidate": undefined,
                  "textValue": "Item 2",
                  "type": "item",
                  "value": undefined,
                  "wrapper": undefined,
                },
              },
              "lastKey": "$.1",
            },
            "state": {
              "childFocusStrategy": null,
              "disabledKeys": Set {},
              "disallowEmptySelection": true,
              "focusedKey": null,
              "isFocused": false,
              "selectedKeys": Set {
                "$.0",
              },
              "selectionMode": "single",
              "setFocused": [Function],
              "setFocusedKey": [Function],
              "setSelectedKeys": [Function],
            },
          },
          "setFocused": [Function],
          "setSelectedKey": [Function],
          "toggle": [Function],
        }
      }
      triggerRef={
        {
          "current": <button
            aria-controls="test-id"
            aria-expanded="false"
            aria-haspopup="listbox"
            aria-labelledby="test-ID test-ID"
            class="md-select-dropdown-input md-select-selected"
            id="test-ID"
            role="combobox"
            type="button"
          >
            <span
              class="md-select-selected-item-wrapper"
              id="test-ID"
              title="Item 1"
            >
              Item 1
            </span>
            <span
              aria-hidden="true"
              class="md-select-icon-wrapper"
            >
              <div
                aria-hidden="true"
                class="md-icon-wrapper md-icon-auto-scales md-icon-scales md-icon-no-shrink"
                role="img"
              >
                <svg
                  aria-hidden="true"
                  class=""
                  data-autoscale="false"
                  data-scale="16"
                  data-test="arrow-down"
                  fill="currentColor"
                  height="100%"
                  viewBox="0, 0, 32, 32"
                  width="100%"
                />
              </div>
            </span>
          </button>,
        }
      }
    >
      <div
        aria-hidden={true}
        style={
          {
            "border": 0,
            "clip": "rect(0 0 0 0)",
            "clipPath": "inset(50%)",
            "height": 1,
            "margin": "0 -1px -1px 0",
            "overflow": "hidden",
            "padding": 0,
            "position": "absolute",
            "whiteSpace": "nowrap",
            "width": 1,
          }
        }
      >
        <input
          onFocus={[Function]}
          style={
            {
              "fontSize": 16,
            }
          }
          tabIndex={-1}
          type="text"
        />
        <label>
          test
          <select
            onChange={[Function]}
            size={2}
            tabIndex={-1}
            value="$.0"
          >
            <option />
            <option
              key="$.0"
              value="$.0"
            >
              Item 1
            </option>
            <option
              key="$.1"
              value="$.1"
            >
              Item 2
            </option>
          </select>
        </label>
      </div>
    </HiddenSelect>
    <Popover
      className="md-select-popover"
      hideOnEsc={false}
      interactive={true}
      onClickOutside={[Function]}
      onHide={[Function]}
      onKeyDown={[Function]}
      placement="bottom"
      role={null}
      setInstance={[Function]}
      showArrow={false}
      strategy="absolute"
      style={
        {
          "maxHeight": "none",
        }
      }
      trigger="manual"
      triggerComponent={
        <button
          aria-activedescendant={null}
          aria-controls="test-id"
          aria-expanded={false}
          aria-haspopup="listbox"
          aria-labelledby="test-ID test-ID"
          className="md-select-dropdown-input md-select-selected"
          id="test-ID"
          onBlur={[Function]}
          onClick={[Function]}
          onDragStart={[Function]}
          onFocus={[Function]}
          onKeyDown={[Function]}
          onKeyUp={[Function]}
          onMouseDown={[Function]}
          onMouseEnter={[Function]}
          onMouseLeave={[Function]}
          onMouseUp={[Function]}
          onTouchCancel={[Function]}
          onTouchEnd={[Function]}
          onTouchMove={[Function]}
          onTouchStart={[Function]}
          role="combobox"
          type="button"
        >
          <span
            className="md-select-selected-item-wrapper"
            id="test-ID"
            title="Item 1"
          >
            Item 1
          </span>
          <span
            aria-hidden="true"
            className="md-select-icon-wrapper"
          >
            <Icon
              name="arrow-down"
              scale={16}
              weight="bold"
            />
          </span>
        </button>
      }
    >
      <LazyTippy
        animation={false}
        appendTo="parent"
        hideOnClick={false}
        interactive={true}
        offset={
          [
            0,
            5,
          ]
        }
        onClickOutside={[Function]}
        onHidden={[Function]}
        onHide={[Function]}
        placement="bottom"
        plugins={
          [
            {
              "fn": [Function],
              "name": "addBackdropPlugin",
            },
          ]
        }
        popperOptions={
          {
            "modifiers": [
              {
                "enabled": false,
                "name": "arrow",
                "options": {
                  "element": "#arrow1",
                  "padding": 5,
                },
              },
              {
                "name": "preventOverflow",
                "options": {
                  "altAxis": true,
                  "boundariesElement": "scrollParent",
                  "padding": 8,
                },
              },
            ],
            "strategy": "absolute",
          }
        }
        render={[Function]}
        setInstance={[Function]}
        trigger="manual"
      >
        <ForwardRef(TippyWrapper)
          animation={false}
          appendTo="parent"
          hideOnClick={false}
          interactive={true}
          offset={
            [
              0,
              5,
            ]
          }
          onClickOutside={[Function]}
          onHidden={[Function]}
          onHide={[Function]}
          placement="bottom"
          plugins={
            [
              {
                "fn": [Function],
              },
              {
                "fn": [Function],
              },
              {
                "fn": [Function],
              },
              {
                "fn": [Function],
                "name": "addBackdropPlugin",
              },
            ]
          }
          popperOptions={
            {
              "modifiers": [
                {
                  "enabled": false,
                  "name": "arrow",
                  "options": {
                    "element": "#arrow1",
                    "padding": 5,
                  },
                },
                {
                  "name": "preventOverflow",
                  "options": {
                    "altAxis": true,
                    "boundariesElement": "scrollParent",
                    "padding": 8,
                  },
                },
              ],
              "strategy": "absolute",
            }
          }
          render={[Function]}
          trigger="manual"
        >
          <Tippy
            animation={false}
            appendTo="parent"
            hideOnClick={false}
            interactive={true}
            offset={
              [
                0,
                5,
              ]
            }
            onClickOutside={[Function]}
            onHidden={[Function]}
            onHide={[Function]}
            placement="bottom"
            plugins={
              [
                {
                  "fn": [Function],
                },
                {
                  "fn": [Function],
                },
                {
                  "fn": [Function],
                },
                {
                  "fn": [Function],
                  "name": "addBackdropPlugin",
                },
              ]
            }
            popperOptions={
              {
                "modifiers": [
                  {
                    "enabled": false,
                    "name": "arrow",
                    "options": {
                      "element": "#arrow1",
                      "padding": 5,
                    },
                  },
                  {
                    "name": "preventOverflow",
                    "options": {
                      "altAxis": true,
                      "boundariesElement": "scrollParent",
                      "padding": 8,
                    },
                  },
                ],
                "strategy": "absolute",
              }
            }
            render={[Function]}
            trigger="manual"
          >
            <button
              aria-activedescendant={null}
              aria-controls="test-id"
              aria-expanded={false}
              aria-haspopup="listbox"
              aria-labelledby="test-ID test-ID"
              className="md-select-dropdown-input md-select-selected"
              id="test-ID"
              onBlur={[Function]}
              onClick={[Function]}
              onDragStart={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              onMouseDown={[Function]}
              onMouseEnter={[Function]}
              onMouseLeave={[Function]}
              onMouseUp={[Function]}
              onTouchCancel={[Function]}
              onTouchEnd={[Function]}
              onTouchMove={[Function]}
              onTouchStart={[Function]}
              role="combobox"
              type="button"
            >
              <span
                className="md-select-selected-item-wrapper"
                id="test-ID"
                title="Item 1"
              >
                Item 1
              </span>
              <span
                aria-hidden="true"
                className="md-select-icon-wrapper"
              >
                <Icon
                  name="arrow-down"
                  scale={16}
                  weight="bold"
                >
                  <div
                    aria-hidden="true"
                    className="md-icon-wrapper md-icon-auto-scales md-icon-scales md-icon-no-shrink"
                    role="img"
                  >
                    <svg
                      aria-hidden="true"
                      className=""
                      data-autoscale={false}
                      data-scale={16}
                      data-test="arrow-down"
                      fill="currentColor"
                      height="100%"
                      style={{}}
                      viewBox="0, 0, 32, 32"
                      width="100%"
                    />
                  </div>
                </Icon>
              </span>
            </button>
            <Portal
              containerInfo={
                <div
                  data-tippy-root=""
                  id="tippy-10"
                  style="z-index: 9999;"
                >
                  
                </div>
              }
            />
          </Tippy>
        </ForwardRef(TippyWrapper)>
      </LazyTippy>
    </Popover>
  </div>
</Select>
`;

exports[`Select snapshot should match snapshot with selected option and listbox open 1`] = `
<Select
  defaultSelectedKey="$.0"
  id="test-id"
  isOpen={true}
  label="test"
>
  <div
    className="md-select-wrapper"
    id="test-id"
    style={
      {
        "--local-width": "100%",
      }
    }
  >
    <label
      id="test-ID"
      onClick={[Function]}
    >
      <Text>
        <p
          className="md-text-wrapper"
          data-type="body-primary"
        >
          test
        </p>
      </Text>
    </label>
    <HiddenSelect
      label="test"
      state={
        {
          "close": [Function],
          "collection": ListCollection {
            "firstKey": "$.0",
            "iterable": {
              Symbol(Symbol.iterator): [Function],
            },
            "keyMap": Map {
              "$.0" => {
                "aria-label": undefined,
                "childNodes": {
                  Symbol(Symbol.iterator): [Function],
                },
                "hasChildNodes": false,
                "index": 0,
                "key": "$.0",
                "level": 0,
                "nextKey": "$.1",
                "parentKey": null,
                "prevKey": undefined,
                "props": {
                  "children": "Item 1",
                },
                "rendered": "Item 1",
                "shouldInvalidate": undefined,
                "textValue": "Item 1",
                "type": "item",
                "value": undefined,
                "wrapper": undefined,
              },
              "$.1" => {
                "aria-label": undefined,
                "childNodes": {
                  Symbol(Symbol.iterator): [Function],
                },
                "hasChildNodes": false,
                "index": 1,
                "key": "$.1",
                "level": 0,
                "nextKey": undefined,
                "parentKey": null,
                "prevKey": "$.0",
                "props": {
                  "children": "Item 2",
                },
                "rendered": "Item 2",
                "shouldInvalidate": undefined,
                "textValue": "Item 2",
                "type": "item",
                "value": undefined,
                "wrapper": undefined,
              },
            },
            "lastKey": "$.1",
          },
          "disabledKeys": Set {},
          "focusStrategy": null,
          "isFocused": false,
          "isOpen": true,
          "open": [Function],
          "selectedItem": {
            "aria-label": undefined,
            "childNodes": {
              Symbol(Symbol.iterator): [Function],
            },
            "hasChildNodes": false,
            "index": 0,
            "key": "$.0",
            "level": 0,
            "nextKey": "$.1",
            "parentKey": null,
            "prevKey": undefined,
            "props": {
              "children": "Item 1",
            },
            "rendered": "Item 1",
            "shouldInvalidate": undefined,
            "textValue": "Item 1",
            "type": "item",
            "value": undefined,
            "wrapper": undefined,
          },
          "selectedKey": "$.0",
          "selectionManager": SelectionManager {
            "_isSelectAll": null,
            "allowsCellSelection": false,
            "collection": ListCollection {
              "firstKey": "$.0",
              "iterable": {
                Symbol(Symbol.iterator): [Function],
              },
              "keyMap": Map {
                "$.0" => {
                  "aria-label": undefined,
                  "childNodes": {
                    Symbol(Symbol.iterator): [Function],
                  },
                  "hasChildNodes": false,
                  "index": 0,
                  "key": "$.0",
                  "level": 0,
                  "nextKey": "$.1",
                  "parentKey": null,
                  "prevKey": undefined,
                  "props": {
                    "children": "Item 1",
                  },
                  "rendered": "Item 1",
                  "shouldInvalidate": undefined,
                  "textValue": "Item 1",
                  "type": "item",
                  "value": undefined,
                  "wrapper": undefined,
                },
                "$.1" => {
                  "aria-label": undefined,
                  "childNodes": {
                    Symbol(Symbol.iterator): [Function],
                  },
                  "hasChildNodes": false,
                  "index": 1,
                  "key": "$.1",
                  "level": 0,
                  "nextKey": undefined,
                  "parentKey": null,
                  "prevKey": "$.0",
                  "props": {
                    "children": "Item 2",
                  },
                  "rendered": "Item 2",
                  "shouldInvalidate": undefined,
                  "textValue": "Item 2",
                  "type": "item",
                  "value": undefined,
                  "wrapper": undefined,
                },
              },
              "lastKey": "$.1",
            },
            "state": {
              "childFocusStrategy": "first",
              "disabledKeys": Set {},
              "disallowEmptySelection": true,
              "focusedKey": "$.0",
              "isFocused": true,
              "selectedKeys": Set {
                "$.0",
              },
              "selectionMode": "single",
              "setFocused": [Function],
              "setFocusedKey": [Function],
              "setSelectedKeys": [Function],
            },
          },
          "setFocused": [Function],
          "setSelectedKey": [Function],
          "toggle": [Function],
        }
      }
      triggerRef={
        {
          "current": <button
            aria-activedescendant="test-ID-option-$.0"
            aria-controls="test-id"
            aria-expanded="true"
            aria-haspopup="listbox"
            aria-labelledby="test-ID test-ID"
            class="md-select-dropdown-input md-select-selected md-select-open"
            id="test-ID"
            role="combobox"
            type="button"
          >
            <span
              class="md-select-selected-item-wrapper"
              id="test-ID"
              title="Item 1"
            >
              Item 1
            </span>
            <span
              aria-hidden="true"
              class="md-select-icon-wrapper"
            >
              <div
                aria-hidden="true"
                class="md-icon-wrapper md-icon-auto-scales md-icon-scales md-icon-no-shrink"
                role="img"
              >
                <svg
                  aria-hidden="true"
                  class=""
                  data-autoscale="false"
                  data-scale="16"
                  data-test="arrow-up"
                  fill="currentColor"
                  height="100%"
                  viewBox="0, 0, 32, 32"
                  width="100%"
                />
              </div>
            </span>
          </button>,
        }
      }
    >
      <div
        aria-hidden={true}
        style={
          {
            "border": 0,
            "clip": "rect(0 0 0 0)",
            "clipPath": "inset(50%)",
            "height": 1,
            "margin": "0 -1px -1px 0",
            "overflow": "hidden",
            "padding": 0,
            "position": "absolute",
            "whiteSpace": "nowrap",
            "width": 1,
          }
        }
      >
        <input
          onFocus={[Function]}
          style={
            {
              "fontSize": 16,
            }
          }
          tabIndex={-1}
          type="text"
        />
        <label>
          test
          <select
            onChange={[Function]}
            size={2}
            tabIndex={-1}
            value="$.0"
          >
            <option />
            <option
              key="$.0"
              value="$.0"
            >
              Item 1
            </option>
            <option
              key="$.1"
              value="$.1"
            >
              Item 2
            </option>
          </select>
        </label>
      </div>
    </HiddenSelect>
    <Popover
      className="md-select-popover"
      hideOnEsc={false}
      interactive={true}
      onClickOutside={[Function]}
      onHide={[Function]}
      onKeyDown={[Function]}
      placement="bottom"
      role={null}
      setInstance={[Function]}
      showArrow={false}
      strategy="absolute"
      style={
        {
          "maxHeight": "none",
        }
      }
      trigger="manual"
      triggerComponent={
        <button
          aria-activedescendant="test-ID-option-$.0"
          aria-controls="test-id"
          aria-expanded={true}
          aria-haspopup="listbox"
          aria-labelledby="test-ID test-ID"
          className="md-select-dropdown-input md-select-selected md-select-open"
          id="test-ID"
          onBlur={[Function]}
          onClick={[Function]}
          onDragStart={[Function]}
          onFocus={[Function]}
          onKeyDown={[Function]}
          onKeyUp={[Function]}
          onMouseDown={[Function]}
          onMouseEnter={[Function]}
          onMouseLeave={[Function]}
          onMouseUp={[Function]}
          onTouchCancel={[Function]}
          onTouchEnd={[Function]}
          onTouchMove={[Function]}
          onTouchStart={[Function]}
          role="combobox"
          type="button"
        >
          <span
            className="md-select-selected-item-wrapper"
            id="test-ID"
            title="Item 1"
          >
            Item 1
          </span>
          <span
            aria-hidden="true"
            className="md-select-icon-wrapper"
          >
            <Icon
              name="arrow-up"
              scale={16}
              weight="bold"
            />
          </span>
        </button>
      }
    >
      <LazyTippy
        animation={false}
        appendTo="parent"
        hideOnClick={false}
        interactive={true}
        offset={
          [
            0,
            5,
          ]
        }
        onClickOutside={[Function]}
        onHidden={[Function]}
        onHide={[Function]}
        placement="bottom"
        plugins={
          [
            {
              "fn": [Function],
              "name": "addBackdropPlugin",
            },
          ]
        }
        popperOptions={
          {
            "modifiers": [
              {
                "enabled": false,
                "name": "arrow",
                "options": {
                  "element": "#arrow1",
                  "padding": 5,
                },
              },
              {
                "name": "preventOverflow",
                "options": {
                  "altAxis": true,
                  "boundariesElement": "scrollParent",
                  "padding": 8,
                },
              },
            ],
            "strategy": "absolute",
          }
        }
        render={[Function]}
        setInstance={[Function]}
        trigger="manual"
      >
        <ForwardRef(TippyWrapper)
          animation={false}
          appendTo="parent"
          hideOnClick={false}
          interactive={true}
          offset={
            [
              0,
              5,
            ]
          }
          onClickOutside={[Function]}
          onHidden={[Function]}
          onHide={[Function]}
          placement="bottom"
          plugins={
            [
              {
                "fn": [Function],
              },
              {
                "fn": [Function],
              },
              {
                "fn": [Function],
              },
              {
                "fn": [Function],
                "name": "addBackdropPlugin",
              },
            ]
          }
          popperOptions={
            {
              "modifiers": [
                {
                  "enabled": false,
                  "name": "arrow",
                  "options": {
                    "element": "#arrow1",
                    "padding": 5,
                  },
                },
                {
                  "name": "preventOverflow",
                  "options": {
                    "altAxis": true,
                    "boundariesElement": "scrollParent",
                    "padding": 8,
                  },
                },
              ],
              "strategy": "absolute",
            }
          }
          render={[Function]}
          trigger="manual"
        >
          <Tippy
            animation={false}
            appendTo="parent"
            hideOnClick={false}
            interactive={true}
            offset={
              [
                0,
                5,
              ]
            }
            onClickOutside={[Function]}
            onHidden={[Function]}
            onHide={[Function]}
            placement="bottom"
            plugins={
              [
                {
                  "fn": [Function],
                },
                {
                  "fn": [Function],
                },
                {
                  "fn": [Function],
                },
                {
                  "fn": [Function],
                  "name": "addBackdropPlugin",
                },
              ]
            }
            popperOptions={
              {
                "modifiers": [
                  {
                    "enabled": false,
                    "name": "arrow",
                    "options": {
                      "element": "#arrow1",
                      "padding": 5,
                    },
                  },
                  {
                    "name": "preventOverflow",
                    "options": {
                      "altAxis": true,
                      "boundariesElement": "scrollParent",
                      "padding": 8,
                    },
                  },
                ],
                "strategy": "absolute",
              }
            }
            render={[Function]}
            trigger="manual"
          >
            <button
              aria-activedescendant="test-ID-option-$.0"
              aria-controls="test-id"
              aria-expanded={true}
              aria-haspopup="listbox"
              aria-labelledby="test-ID test-ID"
              className="md-select-dropdown-input md-select-selected md-select-open"
              id="test-ID"
              onBlur={[Function]}
              onClick={[Function]}
              onDragStart={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              onMouseDown={[Function]}
              onMouseEnter={[Function]}
              onMouseLeave={[Function]}
              onMouseUp={[Function]}
              onTouchCancel={[Function]}
              onTouchEnd={[Function]}
              onTouchMove={[Function]}
              onTouchStart={[Function]}
              role="combobox"
              type="button"
            >
              <span
                className="md-select-selected-item-wrapper"
                id="test-ID"
                title="Item 1"
              >
                Item 1
              </span>
              <span
                aria-hidden="true"
                className="md-select-icon-wrapper"
              >
                <Icon
                  name="arrow-up"
                  scale={16}
                  weight="bold"
                >
                  <div
                    aria-hidden="true"
                    className="md-icon-wrapper md-icon-auto-scales md-icon-scales md-icon-no-shrink"
                    role="img"
                  >
                    <svg
                      aria-hidden="true"
                      className=""
                      data-autoscale={false}
                      data-scale={16}
                      data-test="arrow-up"
                      fill="currentColor"
                      height="100%"
                      style={{}}
                      viewBox="0, 0, 32, 32"
                      width="100%"
                    />
                  </div>
                </Icon>
              </span>
            </button>
            <Portal
              containerInfo={
                <div
                  data-tippy-root=""
                  id="tippy-11"
                  style="z-index: 9999; position: absolute; left: 0px; top: 0px; margin: 0px; transform: translate(0px, 0px);"
                >
                  <span
                    data-focus-scope-start="true"
                    hidden=""
                  />
                  <div
                    aria-labelledby="test-ID"
                    class="md-select-popover md-modal-container-wrapper"
                    data-arrow-orientation="vertical"
                    data-color="primary"
                    data-elevation="3"
                    data-padded="true"
                    data-placement="bottom"
                    data-round="50"
                    style="max-height: none;"
                  >
                    <ul
                      aria-labelledby="test-ID"
                      class="md-select-menu-listbox md-menu-list-background-wrapper"
                      data-color="primary"
                      id="test-ID"
                      role="listbox"
                      tabindex="-1"
                    >
                      <li
                        aria-disabled="false"
                        aria-selected="true"
                        class="md-list-item-base-wrapper"
                        data-allow-text-select="false"
                        data-disabled="false"
                        data-interactive="true"
                        data-key="$.0"
                        data-padded="true"
                        data-shape="rectangle"
                        data-size="40"
                        id="test-ID-option-$.0"
                        role="option"
                        tabindex="0"
                      >
                        <div
                          data-position="fill"
                          title="Item 1"
                        >
                          Item 1
                        </div>
                        <div
                          data-position="end"
                        >
                          <div
                            aria-hidden="true"
                            class="md-icon-wrapper md-icon-auto-scales md-icon-scales md-list-box-item-tick-icon md-icon-no-shrink"
                            role="img"
                          >
                            <svg
                              aria-hidden="true"
                              class=""
                              data-autoscale="false"
                              data-scale="16"
                              data-test="check"
                              fill="currentColor"
                              height="100%"
                              style="stroke: none;"
                              viewBox="0, 0, 32, 32"
                              width="100%"
                            />
                          </div>
                        </div>
                      </li>
                      <li
                        aria-disabled="false"
                        aria-selected="false"
                        class="md-list-item-base-wrapper"
                        data-allow-text-select="false"
                        data-disabled="false"
                        data-interactive="true"
                        data-key="$.1"
                        data-padded="true"
                        data-shape="rectangle"
                        data-size="40"
                        id="test-ID-option-$.1"
                        role="option"
                        tabindex="-1"
                      >
                        <div
                          data-position="fill"
                          title="Item 2"
                        >
                          Item 2
                        </div>
                      </li>
                    </ul>
                  </div>
                  <span
                    data-focus-scope-end="true"
                    hidden=""
                  />
                </div>
              }
            >
              <ModalContainer
                aria-labelledby="test-ID"
                ariaModal={true}
                arrowId="arrow1"
                className="md-select-popover"
                elevation={3}
                focusLockProps={
                  {
                    "autoFocus": true,
                    "restoreFocus": true,
                  }
                }
                isPadded={true}
                onKeyDown={[Function]}
                placement="bottom"
                role={null}
                round={50}
                showArrow={false}
                style={
                  {
                    "maxHeight": "none",
                  }
                }
              >
                <FocusScope
                  autoFocus={true}
                  contain={true}
                  restoreFocus={true}
                >
                  <span
                    data-focus-scope-start={true}
                    hidden={true}
                  />
                  <div
                    aria-labelledby="test-ID"
                    className="md-select-popover md-modal-container-wrapper"
                    data-arrow-orientation="vertical"
                    data-color="primary"
                    data-elevation={3}
                    data-padded={true}
                    data-placement="bottom"
                    data-round={50}
                    onKeyDown={[Function]}
                    role={null}
                    style={
                      {
                        "maxHeight": "none",
                      }
                    }
                  >
                    <ListBoxBase
                      aria-labelledby="test-ID"
                      autoFocus="first"
                      className="md-select-menu-listbox"
                      disallowEmptySelection={true}
                      id="test-ID"
                      onBlur={[Function]}
                      shouldFocusOnHover={true}
                      shouldSelectOnPressUp={true}
                      state={
                        {
                          "close": [Function],
                          "collection": ListCollection {
                            "firstKey": "$.0",
                            "iterable": {
                              Symbol(Symbol.iterator): [Function],
                            },
                            "keyMap": Map {
                              "$.0" => {
                                "aria-label": undefined,
                                "childNodes": {
                                  Symbol(Symbol.iterator): [Function],
                                },
                                "hasChildNodes": false,
                                "index": 0,
                                "key": "$.0",
                                "level": 0,
                                "nextKey": "$.1",
                                "parentKey": null,
                                "prevKey": undefined,
                                "props": {
                                  "children": "Item 1",
                                },
                                "rendered": "Item 1",
                                "shouldInvalidate": undefined,
                                "textValue": "Item 1",
                                "type": "item",
                                "value": undefined,
                                "wrapper": undefined,
                              },
                              "$.1" => {
                                "aria-label": undefined,
                                "childNodes": {
                                  Symbol(Symbol.iterator): [Function],
                                },
                                "hasChildNodes": false,
                                "index": 1,
                                "key": "$.1",
                                "level": 0,
                                "nextKey": undefined,
                                "parentKey": null,
                                "prevKey": "$.0",
                                "props": {
                                  "children": "Item 2",
                                },
                                "rendered": "Item 2",
                                "shouldInvalidate": undefined,
                                "textValue": "Item 2",
                                "type": "item",
                                "value": undefined,
                                "wrapper": undefined,
                              },
                            },
                            "lastKey": "$.1",
                          },
                          "disabledKeys": Set {},
                          "focusStrategy": null,
                          "isFocused": false,
                          "isOpen": true,
                          "open": [Function],
                          "selectedItem": {
                            "aria-label": undefined,
                            "childNodes": {
                              Symbol(Symbol.iterator): [Function],
                            },
                            "hasChildNodes": false,
                            "index": 0,
                            "key": "$.0",
                            "level": 0,
                            "nextKey": "$.1",
                            "parentKey": null,
                            "prevKey": undefined,
                            "props": {
                              "children": "Item 1",
                            },
                            "rendered": "Item 1",
                            "shouldInvalidate": undefined,
                            "textValue": "Item 1",
                            "type": "item",
                            "value": undefined,
                            "wrapper": undefined,
                          },
                          "selectedKey": "$.0",
                          "selectionManager": SelectionManager {
                            "_isSelectAll": null,
                            "allowsCellSelection": false,
                            "collection": ListCollection {
                              "firstKey": "$.0",
                              "iterable": {
                                Symbol(Symbol.iterator): [Function],
                              },
                              "keyMap": Map {
                                "$.0" => {
                                  "aria-label": undefined,
                                  "childNodes": {
                                    Symbol(Symbol.iterator): [Function],
                                  },
                                  "hasChildNodes": false,
                                  "index": 0,
                                  "key": "$.0",
                                  "level": 0,
                                  "nextKey": "$.1",
                                  "parentKey": null,
                                  "prevKey": undefined,
                                  "props": {
                                    "children": "Item 1",
                                  },
                                  "rendered": "Item 1",
                                  "shouldInvalidate": undefined,
                                  "textValue": "Item 1",
                                  "type": "item",
                                  "value": undefined,
                                  "wrapper": undefined,
                                },
                                "$.1" => {
                                  "aria-label": undefined,
                                  "childNodes": {
                                    Symbol(Symbol.iterator): [Function],
                                  },
                                  "hasChildNodes": false,
                                  "index": 1,
                                  "key": "$.1",
                                  "level": 0,
                                  "nextKey": undefined,
                                  "parentKey": null,
                                  "prevKey": "$.0",
                                  "props": {
                                    "children": "Item 2",
                                  },
                                  "rendered": "Item 2",
                                  "shouldInvalidate": undefined,
                                  "textValue": "Item 2",
                                  "type": "item",
                                  "value": undefined,
                                  "wrapper": undefined,
                                },
                              },
                              "lastKey": "$.1",
                            },
                            "state": {
                              "childFocusStrategy": "first",
                              "disabledKeys": Set {},
                              "disallowEmptySelection": true,
                              "focusedKey": "$.0",
                              "isFocused": true,
                              "selectedKeys": Set {
                                "$.0",
                              },
                              "selectionMode": "single",
                              "setFocused": [Function],
                              "setFocusedKey": [Function],
                              "setSelectedKeys": [Function],
                            },
                          },
                          "setFocused": [Function],
                          "setSelectedKey": [Function],
                          "toggle": [Function],
                        }
                      }
                    >
                      <MenuListBackground
                        aria-labelledby="test-ID"
                        className="md-select-menu-listbox"
                        color="primary"
                        id="test-ID"
                        onBlur={[Function]}
                        onFocus={[Function]}
                        onKeyDown={[Function]}
                        onKeyDownCapture={[Function]}
                        onMouseDown={[Function]}
                        role="listbox"
                        tabIndex={-1}
                      >
                        <FocusRing>
                          <FocusRing
                            focusClass="md-focus-ring-wrapper children"
                            focusRingClass="md-focus-ring-wrapper children"
                          >
                            <ul
                              aria-labelledby="test-ID"
                              className="md-select-menu-listbox md-menu-list-background-wrapper"
                              data-color="primary"
                              id="test-ID"
                              onBlur={[Function]}
                              onFocus={[Function]}
                              onKeyDown={[Function]}
                              onKeyDownCapture={[Function]}
                              onMouseDown={[Function]}
                              role="listbox"
                              tabIndex={-1}
                            >
                              <ListBoxItem
                                item={
                                  {
                                    "aria-label": undefined,
                                    "childNodes": {
                                      Symbol(Symbol.iterator): [Function],
                                    },
                                    "hasChildNodes": false,
                                    "index": 0,
                                    "key": "$.0",
                                    "level": 0,
                                    "nextKey": "$.1",
                                    "parentKey": null,
                                    "prevKey": undefined,
                                    "props": {
                                      "children": "Item 1",
                                    },
                                    "rendered": "Item 1",
                                    "shouldInvalidate": undefined,
                                    "textValue": "Item 1",
                                    "type": "item",
                                    "value": undefined,
                                    "wrapper": undefined,
                                  }
                                }
                                key="$.0"
                              >
                                <ListItemBase
                                  aria-describedby={null}
                                  aria-disabled={false}
                                  aria-labelledby={null}
                                  aria-selected={true}
                                  data-key="$.0"
                                  id="test-ID-option-$.0"
                                  isDisabled={false}
                                  isPadded={true}
                                  key="$.0"
                                  onClick={[Function]}
                                  onDragStart={[Function]}
                                  onFocus={[Function]}
                                  onKeyDown={[Function]}
                                  onKeyUp={[Function]}
                                  onMouseDown={[Function]}
                                  onMouseEnter={[Function]}
                                  onMouseLeave={[Function]}
                                  onMouseUp={[Function]}
                                  onTouchCancel={[Function]}
                                  onTouchEnd={[Function]}
                                  onTouchMove={[Function]}
                                  onTouchStart={[Function]}
                                  role="option"
                                  tabIndex={0}
                                >
                                  <FocusRing
                                    isInset={false}
                                  >
                                    <FocusRing
                                      focusClass="md-focus-ring-wrapper children"
                                      focusRingClass="md-focus-ring-wrapper children"
                                      isInset={false}
                                    >
                                      <li
                                        aria-describedby={null}
                                        aria-disabled={false}
                                        aria-labelledby={null}
                                        aria-selected={true}
                                        className="md-list-item-base-wrapper"
                                        data-allow-text-select={false}
                                        data-disabled={false}
                                        data-interactive={true}
                                        data-key="$.0"
                                        data-padded={true}
                                        data-shape="rectangle"
                                        data-size={40}
                                        id="test-ID-option-$.0"
                                        onBlur={[Function]}
                                        onClick={[Function]}
                                        onDragStart={[Function]}
                                        onFocus={[Function]}
                                        onKeyDown={[Function]}
                                        onKeyUp={[Function]}
                                        onMouseDown={[Function]}
                                        onMouseEnter={[Function]}
                                        onMouseLeave={[Function]}
                                        onMouseUp={[Function]}
                                        onPointerDown={[Function]}
                                        onTouchCancel={[Function]}
                                        onTouchEnd={[Function]}
                                        onTouchMove={[Function]}
                                        onTouchStart={[Function]}
                                        role="option"
                                        tabIndex={0}
                                      >
                                        <ListItemBaseSection
                                          position="fill"
                                          title="Item 1"
                                        >
                                          <div
                                            data-position="fill"
                                            title="Item 1"
                                          >
                                            Item 1
                                          </div>
                                        </ListItemBaseSection>
                                        <ListItemBaseSection
                                          position="end"
                                        >
                                          <div
                                            data-position="end"
                                          >
                                            <Icon
                                              className="md-list-box-item-tick-icon"
                                              name="check"
                                              scale={16}
                                              strokeColor="none"
                                              weight="bold"
                                            >
                                              <div
                                                aria-hidden="true"
                                                className="md-icon-wrapper md-icon-auto-scales md-icon-scales md-list-box-item-tick-icon md-icon-no-shrink"
                                                role="img"
                                              >
                                                <svg
                                                  aria-hidden="true"
                                                  className=""
                                                  data-autoscale={false}
                                                  data-scale={16}
                                                  data-test="check"
                                                  fill="currentColor"
                                                  height="100%"
                                                  style={
                                                    {
                                                      "stroke": "none",
                                                    }
                                                  }
                                                  viewBox="0, 0, 32, 32"
                                                  width="100%"
                                                />
                                              </div>
                                            </Icon>
                                          </div>
                                        </ListItemBaseSection>
                                      </li>
                                    </FocusRing>
                                  </FocusRing>
                                </ListItemBase>
                              </ListBoxItem>
                              <ListBoxItem
                                item={
                                  {
                                    "aria-label": undefined,
                                    "childNodes": {
                                      Symbol(Symbol.iterator): [Function],
                                    },
                                    "hasChildNodes": false,
                                    "index": 1,
                                    "key": "$.1",
                                    "level": 0,
                                    "nextKey": undefined,
                                    "parentKey": null,
                                    "prevKey": "$.0",
                                    "props": {
                                      "children": "Item 2",
                                    },
                                    "rendered": "Item 2",
                                    "shouldInvalidate": undefined,
                                    "textValue": "Item 2",
                                    "type": "item",
                                    "value": undefined,
                                    "wrapper": undefined,
                                  }
                                }
                                key="$.1"
                              >
                                <ListItemBase
                                  aria-describedby={null}
                                  aria-disabled={false}
                                  aria-labelledby={null}
                                  aria-selected={false}
                                  data-key="$.1"
                                  id="test-ID-option-$.1"
                                  isDisabled={false}
                                  isPadded={true}
                                  key="$.1"
                                  onClick={[Function]}
                                  onDragStart={[Function]}
                                  onFocus={[Function]}
                                  onKeyDown={[Function]}
                                  onKeyUp={[Function]}
                                  onMouseDown={[Function]}
                                  onMouseEnter={[Function]}
                                  onMouseLeave={[Function]}
                                  onMouseUp={[Function]}
                                  onTouchCancel={[Function]}
                                  onTouchEnd={[Function]}
                                  onTouchMove={[Function]}
                                  onTouchStart={[Function]}
                                  role="option"
                                  tabIndex={-1}
                                >
                                  <FocusRing
                                    isInset={false}
                                  >
                                    <FocusRing
                                      focusClass="md-focus-ring-wrapper children"
                                      focusRingClass="md-focus-ring-wrapper children"
                                      isInset={false}
                                    >
                                      <li
                                        aria-describedby={null}
                                        aria-disabled={false}
                                        aria-labelledby={null}
                                        aria-selected={false}
                                        className="md-list-item-base-wrapper"
                                        data-allow-text-select={false}
                                        data-disabled={false}
                                        data-interactive={true}
                                        data-key="$.1"
                                        data-padded={true}
                                        data-shape="rectangle"
                                        data-size={40}
                                        id="test-ID-option-$.1"
                                        onBlur={[Function]}
                                        onClick={[Function]}
                                        onDragStart={[Function]}
                                        onFocus={[Function]}
                                        onKeyDown={[Function]}
                                        onKeyUp={[Function]}
                                        onMouseDown={[Function]}
                                        onMouseEnter={[Function]}
                                        onMouseLeave={[Function]}
                                        onMouseUp={[Function]}
                                        onPointerDown={[Function]}
                                        onTouchCancel={[Function]}
                                        onTouchEnd={[Function]}
                                        onTouchMove={[Function]}
                                        onTouchStart={[Function]}
                                        role="option"
                                        tabIndex={-1}
                                      >
                                        <ListItemBaseSection
                                          position="fill"
                                          title="Item 2"
                                        >
                                          <div
                                            data-position="fill"
                                            title="Item 2"
                                          >
                                            Item 2
                                          </div>
                                        </ListItemBaseSection>
                                      </li>
                                    </FocusRing>
                                  </FocusRing>
                                </ListItemBase>
                              </ListBoxItem>
                            </ul>
                          </FocusRing>
                        </FocusRing>
                      </MenuListBackground>
                    </ListBoxBase>
                  </div>
                  <span
                    data-focus-scope-end={true}
                    hidden={true}
                  />
                </FocusScope>
              </ModalContainer>
            </Portal>
          </Tippy>
        </ForwardRef(TippyWrapper)>
      </LazyTippy>
    </Popover>
  </div>
</Select>
`;

exports[`Select snapshot should match snapshot with shallowDisabled 1`] = `
<Select
  label="test"
  shallowDisabled={true}
>
  <div
    className="md-select-wrapper"
    style={
      {
        "--local-width": "100%",
      }
    }
  >
    <label
      id="test-ID"
      onClick={[Function]}
    >
      <Text>
        <p
          className="md-text-wrapper"
          data-type="body-primary"
        >
          test
        </p>
      </Text>
    </label>
    <HiddenSelect
      label="test"
      state={
        {
          "close": [Function],
          "collection": ListCollection {
            "firstKey": "$.0",
            "iterable": {
              Symbol(Symbol.iterator): [Function],
            },
            "keyMap": Map {
              "$.0" => {
                "aria-label": undefined,
                "childNodes": {
                  Symbol(Symbol.iterator): [Function],
                },
                "hasChildNodes": false,
                "index": 0,
                "key": "$.0",
                "level": 0,
                "nextKey": "$.1",
                "parentKey": null,
                "prevKey": undefined,
                "props": {
                  "children": "Item 1",
                },
                "rendered": "Item 1",
                "shouldInvalidate": undefined,
                "textValue": "Item 1",
                "type": "item",
                "value": undefined,
                "wrapper": undefined,
              },
              "$.1" => {
                "aria-label": undefined,
                "childNodes": {
                  Symbol(Symbol.iterator): [Function],
                },
                "hasChildNodes": false,
                "index": 1,
                "key": "$.1",
                "level": 0,
                "nextKey": undefined,
                "parentKey": null,
                "prevKey": "$.0",
                "props": {
                  "children": "Item 2",
                },
                "rendered": "Item 2",
                "shouldInvalidate": undefined,
                "textValue": "Item 2",
                "type": "item",
                "value": undefined,
                "wrapper": undefined,
              },
            },
            "lastKey": "$.1",
          },
          "disabledKeys": Set {},
          "focusStrategy": null,
          "isFocused": false,
          "isOpen": false,
          "open": [Function],
          "selectedItem": null,
          "selectedKey": null,
          "selectionManager": SelectionManager {
            "_isSelectAll": null,
            "allowsCellSelection": false,
            "collection": ListCollection {
              "firstKey": "$.0",
              "iterable": {
                Symbol(Symbol.iterator): [Function],
              },
              "keyMap": Map {
                "$.0" => {
                  "aria-label": undefined,
                  "childNodes": {
                    Symbol(Symbol.iterator): [Function],
                  },
                  "hasChildNodes": false,
                  "index": 0,
                  "key": "$.0",
                  "level": 0,
                  "nextKey": "$.1",
                  "parentKey": null,
                  "prevKey": undefined,
                  "props": {
                    "children": "Item 1",
                  },
                  "rendered": "Item 1",
                  "shouldInvalidate": undefined,
                  "textValue": "Item 1",
                  "type": "item",
                  "value": undefined,
                  "wrapper": undefined,
                },
                "$.1" => {
                  "aria-label": undefined,
                  "childNodes": {
                    Symbol(Symbol.iterator): [Function],
                  },
                  "hasChildNodes": false,
                  "index": 1,
                  "key": "$.1",
                  "level": 0,
                  "nextKey": undefined,
                  "parentKey": null,
                  "prevKey": "$.0",
                  "props": {
                    "children": "Item 2",
                  },
                  "rendered": "Item 2",
                  "shouldInvalidate": undefined,
                  "textValue": "Item 2",
                  "type": "item",
                  "value": undefined,
                  "wrapper": undefined,
                },
              },
              "lastKey": "$.1",
            },
            "state": {
              "childFocusStrategy": null,
              "disabledKeys": Set {},
              "disallowEmptySelection": true,
              "focusedKey": null,
              "isFocused": false,
              "selectedKeys": Set {},
              "selectionMode": "single",
              "setFocused": [Function],
              "setFocusedKey": [Function],
              "setSelectedKeys": [Function],
            },
          },
          "setFocused": [Function],
          "setSelectedKey": [Function],
          "toggle": [Function],
        }
      }
      triggerRef={
        {
          "current": <button
            aria-disabled="true"
            aria-expanded="false"
            aria-haspopup="listbox"
            aria-labelledby="test-ID test-ID"
            class="md-select-dropdown-input"
            data-shallow-disabled="true"
            id="test-ID"
            role="combobox"
            type="button"
          >
            <span
              class="md-select-selected-item-wrapper"
              id="test-ID"
            />
            <span
              aria-hidden="true"
              class="md-select-icon-wrapper"
            >
              <div
                aria-hidden="true"
                class="md-icon-wrapper md-icon-auto-scales md-icon-scales md-icon-no-shrink"
                role="img"
              >
                <svg
                  aria-hidden="true"
                  class=""
                  data-autoscale="false"
                  data-scale="16"
                  data-test="arrow-down"
                  fill="currentColor"
                  height="100%"
                  viewBox="0, 0, 32, 32"
                  width="100%"
                />
              </div>
            </span>
          </button>,
        }
      }
    >
      <div
        aria-hidden={true}
        style={
          {
            "border": 0,
            "clip": "rect(0 0 0 0)",
            "clipPath": "inset(50%)",
            "height": 1,
            "margin": "0 -1px -1px 0",
            "overflow": "hidden",
            "padding": 0,
            "position": "absolute",
            "whiteSpace": "nowrap",
            "width": 1,
          }
        }
      >
        <input
          onFocus={[Function]}
          style={
            {
              "fontSize": 16,
            }
          }
          tabIndex={-1}
          type="text"
        />
        <label>
          test
          <select
            onChange={[Function]}
            size={2}
            tabIndex={-1}
            value=""
          >
            <option />
            <option
              key="$.0"
              value="$.0"
            >
              Item 1
            </option>
            <option
              key="$.1"
              value="$.1"
            >
              Item 2
            </option>
          </select>
        </label>
      </div>
    </HiddenSelect>
    <Popover
      className="md-select-popover"
      hideOnEsc={false}
      interactive={true}
      onClickOutside={[Function]}
      onHide={[Function]}
      onKeyDown={[Function]}
      placement="bottom"
      role={null}
      setInstance={[Function]}
      showArrow={false}
      strategy="absolute"
      style={
        {
          "maxHeight": "none",
        }
      }
      trigger="manual"
      triggerComponent={
        <button
          aria-activedescendant={null}
          aria-disabled={true}
          aria-expanded={false}
          aria-haspopup="listbox"
          aria-labelledby="test-ID test-ID"
          className="md-select-dropdown-input"
          data-shallow-disabled={true}
          id="test-ID"
          onBlur={[Function]}
          onClick={[Function]}
          onDragStart={[Function]}
          onFocus={[Function]}
          onKeyDown={[Function]}
          onKeyUp={[Function]}
          onMouseDown={[Function]}
          onMouseEnter={[Function]}
          onMouseLeave={[Function]}
          onMouseUp={[Function]}
          onTouchCancel={[Function]}
          onTouchEnd={[Function]}
          onTouchMove={[Function]}
          onTouchStart={[Function]}
          role="combobox"
          type="button"
        >
          <span
            className="md-select-selected-item-wrapper"
            id="test-ID"
          />
          <span
            aria-hidden="true"
            className="md-select-icon-wrapper"
          >
            <Icon
              name="arrow-down"
              scale={16}
              weight="bold"
            />
          </span>
        </button>
      }
    >
      <LazyTippy
        animation={false}
        appendTo="parent"
        hideOnClick={false}
        interactive={true}
        offset={
          [
            0,
            5,
          ]
        }
        onClickOutside={[Function]}
        onHidden={[Function]}
        onHide={[Function]}
        placement="bottom"
        plugins={
          [
            {
              "fn": [Function],
              "name": "addBackdropPlugin",
            },
          ]
        }
        popperOptions={
          {
            "modifiers": [
              {
                "enabled": false,
                "name": "arrow",
                "options": {
                  "element": "#arrow1",
                  "padding": 5,
                },
              },
              {
                "name": "preventOverflow",
                "options": {
                  "altAxis": true,
                  "boundariesElement": "scrollParent",
                  "padding": 8,
                },
              },
            ],
            "strategy": "absolute",
          }
        }
        render={[Function]}
        setInstance={[Function]}
        trigger="manual"
      >
        <ForwardRef(TippyWrapper)
          animation={false}
          appendTo="parent"
          hideOnClick={false}
          interactive={true}
          offset={
            [
              0,
              5,
            ]
          }
          onClickOutside={[Function]}
          onHidden={[Function]}
          onHide={[Function]}
          placement="bottom"
          plugins={
            [
              {
                "fn": [Function],
              },
              {
                "fn": [Function],
              },
              {
                "fn": [Function],
              },
              {
                "fn": [Function],
                "name": "addBackdropPlugin",
              },
            ]
          }
          popperOptions={
            {
              "modifiers": [
                {
                  "enabled": false,
                  "name": "arrow",
                  "options": {
                    "element": "#arrow1",
                    "padding": 5,
                  },
                },
                {
                  "name": "preventOverflow",
                  "options": {
                    "altAxis": true,
                    "boundariesElement": "scrollParent",
                    "padding": 8,
                  },
                },
              ],
              "strategy": "absolute",
            }
          }
          render={[Function]}
          trigger="manual"
        >
          <Tippy
            animation={false}
            appendTo="parent"
            hideOnClick={false}
            interactive={true}
            offset={
              [
                0,
                5,
              ]
            }
            onClickOutside={[Function]}
            onHidden={[Function]}
            onHide={[Function]}
            placement="bottom"
            plugins={
              [
                {
                  "fn": [Function],
                },
                {
                  "fn": [Function],
                },
                {
                  "fn": [Function],
                },
                {
                  "fn": [Function],
                  "name": "addBackdropPlugin",
                },
              ]
            }
            popperOptions={
              {
                "modifiers": [
                  {
                    "enabled": false,
                    "name": "arrow",
                    "options": {
                      "element": "#arrow1",
                      "padding": 5,
                    },
                  },
                  {
                    "name": "preventOverflow",
                    "options": {
                      "altAxis": true,
                      "boundariesElement": "scrollParent",
                      "padding": 8,
                    },
                  },
                ],
                "strategy": "absolute",
              }
            }
            render={[Function]}
            trigger="manual"
          >
            <button
              aria-activedescendant={null}
              aria-disabled={true}
              aria-expanded={false}
              aria-haspopup="listbox"
              aria-labelledby="test-ID test-ID"
              className="md-select-dropdown-input"
              data-shallow-disabled={true}
              id="test-ID"
              onBlur={[Function]}
              onClick={[Function]}
              onDragStart={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              onMouseDown={[Function]}
              onMouseEnter={[Function]}
              onMouseLeave={[Function]}
              onMouseUp={[Function]}
              onTouchCancel={[Function]}
              onTouchEnd={[Function]}
              onTouchMove={[Function]}
              onTouchStart={[Function]}
              role="combobox"
              type="button"
            >
              <span
                className="md-select-selected-item-wrapper"
                id="test-ID"
              />
              <span
                aria-hidden="true"
                className="md-select-icon-wrapper"
              >
                <Icon
                  name="arrow-down"
                  scale={16}
                  weight="bold"
                >
                  <div
                    aria-hidden="true"
                    className="md-icon-wrapper md-icon-auto-scales md-icon-scales md-icon-no-shrink"
                    role="img"
                  >
                    <svg
                      aria-hidden="true"
                      className=""
                      data-autoscale={false}
                      data-scale={16}
                      data-test="arrow-down"
                      fill="currentColor"
                      height="100%"
                      style={{}}
                      viewBox="0, 0, 32, 32"
                      width="100%"
                    />
                  </div>
                </Icon>
              </span>
            </button>
            <Portal
              containerInfo={
                <div
                  data-tippy-root=""
                  id="tippy-17"
                  style="z-index: 9999;"
                >
                  
                </div>
              }
            />
          </Tippy>
        </ForwardRef(TippyWrapper)>
      </LazyTippy>
    </Popover>
  </div>
</Select>
`;

exports[`Select snapshot should match snapshot with style 1`] = `
<Select
  id="test-id"
  label="test"
  style={
    {
      "color": "pink",
    }
  }
>
  <div
    className="md-select-wrapper"
    id="test-id"
    style={
      {
        "--local-width": "100%",
        "color": "pink",
      }
    }
  >
    <label
      id="test-ID"
      onClick={[Function]}
    >
      <Text>
        <p
          className="md-text-wrapper"
          data-type="body-primary"
        >
          test
        </p>
      </Text>
    </label>
    <HiddenSelect
      label="test"
      state={
        {
          "close": [Function],
          "collection": ListCollection {
            "firstKey": "$.0",
            "iterable": {
              Symbol(Symbol.iterator): [Function],
            },
            "keyMap": Map {
              "$.0" => {
                "aria-label": undefined,
                "childNodes": {
                  Symbol(Symbol.iterator): [Function],
                },
                "hasChildNodes": false,
                "index": 0,
                "key": "$.0",
                "level": 0,
                "nextKey": "$.1",
                "parentKey": null,
                "prevKey": undefined,
                "props": {
                  "children": "Item 1",
                },
                "rendered": "Item 1",
                "shouldInvalidate": undefined,
                "textValue": "Item 1",
                "type": "item",
                "value": undefined,
                "wrapper": undefined,
              },
              "$.1" => {
                "aria-label": undefined,
                "childNodes": {
                  Symbol(Symbol.iterator): [Function],
                },
                "hasChildNodes": false,
                "index": 1,
                "key": "$.1",
                "level": 0,
                "nextKey": undefined,
                "parentKey": null,
                "prevKey": "$.0",
                "props": {
                  "children": "Item 2",
                },
                "rendered": "Item 2",
                "shouldInvalidate": undefined,
                "textValue": "Item 2",
                "type": "item",
                "value": undefined,
                "wrapper": undefined,
              },
            },
            "lastKey": "$.1",
          },
          "disabledKeys": Set {},
          "focusStrategy": null,
          "isFocused": false,
          "isOpen": false,
          "open": [Function],
          "selectedItem": null,
          "selectedKey": null,
          "selectionManager": SelectionManager {
            "_isSelectAll": null,
            "allowsCellSelection": false,
            "collection": ListCollection {
              "firstKey": "$.0",
              "iterable": {
                Symbol(Symbol.iterator): [Function],
              },
              "keyMap": Map {
                "$.0" => {
                  "aria-label": undefined,
                  "childNodes": {
                    Symbol(Symbol.iterator): [Function],
                  },
                  "hasChildNodes": false,
                  "index": 0,
                  "key": "$.0",
                  "level": 0,
                  "nextKey": "$.1",
                  "parentKey": null,
                  "prevKey": undefined,
                  "props": {
                    "children": "Item 1",
                  },
                  "rendered": "Item 1",
                  "shouldInvalidate": undefined,
                  "textValue": "Item 1",
                  "type": "item",
                  "value": undefined,
                  "wrapper": undefined,
                },
                "$.1" => {
                  "aria-label": undefined,
                  "childNodes": {
                    Symbol(Symbol.iterator): [Function],
                  },
                  "hasChildNodes": false,
                  "index": 1,
                  "key": "$.1",
                  "level": 0,
                  "nextKey": undefined,
                  "parentKey": null,
                  "prevKey": "$.0",
                  "props": {
                    "children": "Item 2",
                  },
                  "rendered": "Item 2",
                  "shouldInvalidate": undefined,
                  "textValue": "Item 2",
                  "type": "item",
                  "value": undefined,
                  "wrapper": undefined,
                },
              },
              "lastKey": "$.1",
            },
            "state": {
              "childFocusStrategy": null,
              "disabledKeys": Set {},
              "disallowEmptySelection": true,
              "focusedKey": null,
              "isFocused": false,
              "selectedKeys": Set {},
              "selectionMode": "single",
              "setFocused": [Function],
              "setFocusedKey": [Function],
              "setSelectedKeys": [Function],
            },
          },
          "setFocused": [Function],
          "setSelectedKey": [Function],
          "toggle": [Function],
        }
      }
      triggerRef={
        {
          "current": <button
            aria-controls="test-id"
            aria-expanded="false"
            aria-haspopup="listbox"
            aria-labelledby="test-ID test-ID"
            class="md-select-dropdown-input"
            id="test-ID"
            role="combobox"
            type="button"
          >
            <span
              class="md-select-selected-item-wrapper"
              id="test-ID"
            />
            <span
              aria-hidden="true"
              class="md-select-icon-wrapper"
            >
              <div
                aria-hidden="true"
                class="md-icon-wrapper md-icon-auto-scales md-icon-scales md-icon-no-shrink"
                role="img"
              >
                <svg
                  aria-hidden="true"
                  class=""
                  data-autoscale="false"
                  data-scale="16"
                  data-test="arrow-down"
                  fill="currentColor"
                  height="100%"
                  viewBox="0, 0, 32, 32"
                  width="100%"
                />
              </div>
            </span>
          </button>,
        }
      }
    >
      <div
        aria-hidden={true}
        style={
          {
            "border": 0,
            "clip": "rect(0 0 0 0)",
            "clipPath": "inset(50%)",
            "height": 1,
            "margin": "0 -1px -1px 0",
            "overflow": "hidden",
            "padding": 0,
            "position": "absolute",
            "whiteSpace": "nowrap",
            "width": 1,
          }
        }
      >
        <input
          onFocus={[Function]}
          style={
            {
              "fontSize": 16,
            }
          }
          tabIndex={-1}
          type="text"
        />
        <label>
          test
          <select
            onChange={[Function]}
            size={2}
            tabIndex={-1}
            value=""
          >
            <option />
            <option
              key="$.0"
              value="$.0"
            >
              Item 1
            </option>
            <option
              key="$.1"
              value="$.1"
            >
              Item 2
            </option>
          </select>
        </label>
      </div>
    </HiddenSelect>
    <Popover
      className="md-select-popover"
      hideOnEsc={false}
      interactive={true}
      onClickOutside={[Function]}
      onHide={[Function]}
      onKeyDown={[Function]}
      placement="bottom"
      role={null}
      setInstance={[Function]}
      showArrow={false}
      strategy="absolute"
      style={
        {
          "maxHeight": "none",
        }
      }
      trigger="manual"
      triggerComponent={
        <button
          aria-activedescendant={null}
          aria-controls="test-id"
          aria-expanded={false}
          aria-haspopup="listbox"
          aria-labelledby="test-ID test-ID"
          className="md-select-dropdown-input"
          id="test-ID"
          onBlur={[Function]}
          onClick={[Function]}
          onDragStart={[Function]}
          onFocus={[Function]}
          onKeyDown={[Function]}
          onKeyUp={[Function]}
          onMouseDown={[Function]}
          onMouseEnter={[Function]}
          onMouseLeave={[Function]}
          onMouseUp={[Function]}
          onTouchCancel={[Function]}
          onTouchEnd={[Function]}
          onTouchMove={[Function]}
          onTouchStart={[Function]}
          role="combobox"
          type="button"
        >
          <span
            className="md-select-selected-item-wrapper"
            id="test-ID"
          />
          <span
            aria-hidden="true"
            className="md-select-icon-wrapper"
          >
            <Icon
              name="arrow-down"
              scale={16}
              weight="bold"
            />
          </span>
        </button>
      }
    >
      <LazyTippy
        animation={false}
        appendTo="parent"
        hideOnClick={false}
        interactive={true}
        offset={
          [
            0,
            5,
          ]
        }
        onClickOutside={[Function]}
        onHidden={[Function]}
        onHide={[Function]}
        placement="bottom"
        plugins={
          [
            {
              "fn": [Function],
              "name": "addBackdropPlugin",
            },
          ]
        }
        popperOptions={
          {
            "modifiers": [
              {
                "enabled": false,
                "name": "arrow",
                "options": {
                  "element": "#arrow1",
                  "padding": 5,
                },
              },
              {
                "name": "preventOverflow",
                "options": {
                  "altAxis": true,
                  "boundariesElement": "scrollParent",
                  "padding": 8,
                },
              },
            ],
            "strategy": "absolute",
          }
        }
        render={[Function]}
        setInstance={[Function]}
        trigger="manual"
      >
        <ForwardRef(TippyWrapper)
          animation={false}
          appendTo="parent"
          hideOnClick={false}
          interactive={true}
          offset={
            [
              0,
              5,
            ]
          }
          onClickOutside={[Function]}
          onHidden={[Function]}
          onHide={[Function]}
          placement="bottom"
          plugins={
            [
              {
                "fn": [Function],
              },
              {
                "fn": [Function],
              },
              {
                "fn": [Function],
              },
              {
                "fn": [Function],
                "name": "addBackdropPlugin",
              },
            ]
          }
          popperOptions={
            {
              "modifiers": [
                {
                  "enabled": false,
                  "name": "arrow",
                  "options": {
                    "element": "#arrow1",
                    "padding": 5,
                  },
                },
                {
                  "name": "preventOverflow",
                  "options": {
                    "altAxis": true,
                    "boundariesElement": "scrollParent",
                    "padding": 8,
                  },
                },
              ],
              "strategy": "absolute",
            }
          }
          render={[Function]}
          trigger="manual"
        >
          <Tippy
            animation={false}
            appendTo="parent"
            hideOnClick={false}
            interactive={true}
            offset={
              [
                0,
                5,
              ]
            }
            onClickOutside={[Function]}
            onHidden={[Function]}
            onHide={[Function]}
            placement="bottom"
            plugins={
              [
                {
                  "fn": [Function],
                },
                {
                  "fn": [Function],
                },
                {
                  "fn": [Function],
                },
                {
                  "fn": [Function],
                  "name": "addBackdropPlugin",
                },
              ]
            }
            popperOptions={
              {
                "modifiers": [
                  {
                    "enabled": false,
                    "name": "arrow",
                    "options": {
                      "element": "#arrow1",
                      "padding": 5,
                    },
                  },
                  {
                    "name": "preventOverflow",
                    "options": {
                      "altAxis": true,
                      "boundariesElement": "scrollParent",
                      "padding": 8,
                    },
                  },
                ],
                "strategy": "absolute",
              }
            }
            render={[Function]}
            trigger="manual"
          >
            <button
              aria-activedescendant={null}
              aria-controls="test-id"
              aria-expanded={false}
              aria-haspopup="listbox"
              aria-labelledby="test-ID test-ID"
              className="md-select-dropdown-input"
              id="test-ID"
              onBlur={[Function]}
              onClick={[Function]}
              onDragStart={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              onMouseDown={[Function]}
              onMouseEnter={[Function]}
              onMouseLeave={[Function]}
              onMouseUp={[Function]}
              onTouchCancel={[Function]}
              onTouchEnd={[Function]}
              onTouchMove={[Function]}
              onTouchStart={[Function]}
              role="combobox"
              type="button"
            >
              <span
                className="md-select-selected-item-wrapper"
                id="test-ID"
              />
              <span
                aria-hidden="true"
                className="md-select-icon-wrapper"
              >
                <Icon
                  name="arrow-down"
                  scale={16}
                  weight="bold"
                >
                  <div
                    aria-hidden="true"
                    className="md-icon-wrapper md-icon-auto-scales md-icon-scales md-icon-no-shrink"
                    role="img"
                  >
                    <svg
                      aria-hidden="true"
                      className=""
                      data-autoscale={false}
                      data-scale={16}
                      data-test="arrow-down"
                      fill="currentColor"
                      height="100%"
                      style={{}}
                      viewBox="0, 0, 32, 32"
                      width="100%"
                    />
                  </div>
                </Icon>
              </span>
            </button>
            <Portal
              containerInfo={
                <div
                  data-tippy-root=""
                  id="tippy-4"
                  style="z-index: 9999;"
                >
                  
                </div>
              }
            />
          </Tippy>
        </ForwardRef(TippyWrapper)>
      </LazyTippy>
    </Popover>
  </div>
</Select>
`;

exports[`Select snapshot should match snapshot with title 1`] = `
<Select
  label="test"
  title="Example text"
>
  <div
    className="md-select-wrapper"
    style={
      {
        "--local-width": "100%",
      }
    }
  >
    <label
      id="test-ID"
      onClick={[Function]}
    >
      <Text>
        <p
          className="md-text-wrapper"
          data-type="body-primary"
        >
          test
        </p>
      </Text>
    </label>
    <HiddenSelect
      label="test"
      state={
        {
          "close": [Function],
          "collection": ListCollection {
            "firstKey": "$.0",
            "iterable": {
              Symbol(Symbol.iterator): [Function],
            },
            "keyMap": Map {
              "$.0" => {
                "aria-label": undefined,
                "childNodes": {
                  Symbol(Symbol.iterator): [Function],
                },
                "hasChildNodes": false,
                "index": 0,
                "key": "$.0",
                "level": 0,
                "nextKey": "$.1",
                "parentKey": null,
                "prevKey": undefined,
                "props": {
                  "children": "Item 1",
                },
                "rendered": "Item 1",
                "shouldInvalidate": undefined,
                "textValue": "Item 1",
                "type": "item",
                "value": undefined,
                "wrapper": undefined,
              },
              "$.1" => {
                "aria-label": undefined,
                "childNodes": {
                  Symbol(Symbol.iterator): [Function],
                },
                "hasChildNodes": false,
                "index": 1,
                "key": "$.1",
                "level": 0,
                "nextKey": undefined,
                "parentKey": null,
                "prevKey": "$.0",
                "props": {
                  "children": "Item 2",
                },
                "rendered": "Item 2",
                "shouldInvalidate": undefined,
                "textValue": "Item 2",
                "type": "item",
                "value": undefined,
                "wrapper": undefined,
              },
            },
            "lastKey": "$.1",
          },
          "disabledKeys": Set {},
          "focusStrategy": null,
          "isFocused": false,
          "isOpen": false,
          "open": [Function],
          "selectedItem": null,
          "selectedKey": null,
          "selectionManager": SelectionManager {
            "_isSelectAll": null,
            "allowsCellSelection": false,
            "collection": ListCollection {
              "firstKey": "$.0",
              "iterable": {
                Symbol(Symbol.iterator): [Function],
              },
              "keyMap": Map {
                "$.0" => {
                  "aria-label": undefined,
                  "childNodes": {
                    Symbol(Symbol.iterator): [Function],
                  },
                  "hasChildNodes": false,
                  "index": 0,
                  "key": "$.0",
                  "level": 0,
                  "nextKey": "$.1",
                  "parentKey": null,
                  "prevKey": undefined,
                  "props": {
                    "children": "Item 1",
                  },
                  "rendered": "Item 1",
                  "shouldInvalidate": undefined,
                  "textValue": "Item 1",
                  "type": "item",
                  "value": undefined,
                  "wrapper": undefined,
                },
                "$.1" => {
                  "aria-label": undefined,
                  "childNodes": {
                    Symbol(Symbol.iterator): [Function],
                  },
                  "hasChildNodes": false,
                  "index": 1,
                  "key": "$.1",
                  "level": 0,
                  "nextKey": undefined,
                  "parentKey": null,
                  "prevKey": "$.0",
                  "props": {
                    "children": "Item 2",
                  },
                  "rendered": "Item 2",
                  "shouldInvalidate": undefined,
                  "textValue": "Item 2",
                  "type": "item",
                  "value": undefined,
                  "wrapper": undefined,
                },
              },
              "lastKey": "$.1",
            },
            "state": {
              "childFocusStrategy": null,
              "disabledKeys": Set {},
              "disallowEmptySelection": true,
              "focusedKey": null,
              "isFocused": false,
              "selectedKeys": Set {},
              "selectionMode": "single",
              "setFocused": [Function],
              "setFocusedKey": [Function],
              "setSelectedKeys": [Function],
            },
          },
          "setFocused": [Function],
          "setSelectedKey": [Function],
          "toggle": [Function],
        }
      }
      triggerRef={
        {
          "current": <button
            aria-expanded="false"
            aria-haspopup="listbox"
            aria-labelledby="test-ID test-ID"
            class="md-select-dropdown-input"
            id="test-ID"
            role="combobox"
            title="Example text"
            type="button"
          >
            <span
              class="md-select-selected-item-wrapper"
              id="test-ID"
            />
            <span
              aria-hidden="true"
              class="md-select-icon-wrapper"
            >
              <div
                aria-hidden="true"
                class="md-icon-wrapper md-icon-auto-scales md-icon-scales md-icon-no-shrink"
                role="img"
              >
                <svg
                  aria-hidden="true"
                  class=""
                  data-autoscale="false"
                  data-scale="16"
                  data-test="arrow-down"
                  fill="currentColor"
                  height="100%"
                  viewBox="0, 0, 32, 32"
                  width="100%"
                />
              </div>
            </span>
          </button>,
        }
      }
    >
      <div
        aria-hidden={true}
        style={
          {
            "border": 0,
            "clip": "rect(0 0 0 0)",
            "clipPath": "inset(50%)",
            "height": 1,
            "margin": "0 -1px -1px 0",
            "overflow": "hidden",
            "padding": 0,
            "position": "absolute",
            "whiteSpace": "nowrap",
            "width": 1,
          }
        }
      >
        <input
          onFocus={[Function]}
          style={
            {
              "fontSize": 16,
            }
          }
          tabIndex={-1}
          type="text"
        />
        <label>
          test
          <select
            onChange={[Function]}
            size={2}
            tabIndex={-1}
            value=""
          >
            <option />
            <option
              key="$.0"
              value="$.0"
            >
              Item 1
            </option>
            <option
              key="$.1"
              value="$.1"
            >
              Item 2
            </option>
          </select>
        </label>
      </div>
    </HiddenSelect>
    <Popover
      className="md-select-popover"
      hideOnEsc={false}
      interactive={true}
      onClickOutside={[Function]}
      onHide={[Function]}
      onKeyDown={[Function]}
      placement="bottom"
      role={null}
      setInstance={[Function]}
      showArrow={false}
      strategy="absolute"
      style={
        {
          "maxHeight": "none",
        }
      }
      trigger="manual"
      triggerComponent={
        <button
          aria-activedescendant={null}
          aria-expanded={false}
          aria-haspopup="listbox"
          aria-labelledby="test-ID test-ID"
          className="md-select-dropdown-input"
          id="test-ID"
          onBlur={[Function]}
          onClick={[Function]}
          onDragStart={[Function]}
          onFocus={[Function]}
          onKeyDown={[Function]}
          onKeyUp={[Function]}
          onMouseDown={[Function]}
          onMouseEnter={[Function]}
          onMouseLeave={[Function]}
          onMouseUp={[Function]}
          onTouchCancel={[Function]}
          onTouchEnd={[Function]}
          onTouchMove={[Function]}
          onTouchStart={[Function]}
          role="combobox"
          title="Example text"
          type="button"
        >
          <span
            className="md-select-selected-item-wrapper"
            id="test-ID"
          />
          <span
            aria-hidden="true"
            className="md-select-icon-wrapper"
          >
            <Icon
              name="arrow-down"
              scale={16}
              weight="bold"
            />
          </span>
        </button>
      }
    >
      <LazyTippy
        animation={false}
        appendTo="parent"
        hideOnClick={false}
        interactive={true}
        offset={
          [
            0,
            5,
          ]
        }
        onClickOutside={[Function]}
        onHidden={[Function]}
        onHide={[Function]}
        placement="bottom"
        plugins={
          [
            {
              "fn": [Function],
              "name": "addBackdropPlugin",
            },
          ]
        }
        popperOptions={
          {
            "modifiers": [
              {
                "enabled": false,
                "name": "arrow",
                "options": {
                  "element": "#arrow1",
                  "padding": 5,
                },
              },
              {
                "name": "preventOverflow",
                "options": {
                  "altAxis": true,
                  "boundariesElement": "scrollParent",
                  "padding": 8,
                },
              },
            ],
            "strategy": "absolute",
          }
        }
        render={[Function]}
        setInstance={[Function]}
        trigger="manual"
      >
        <ForwardRef(TippyWrapper)
          animation={false}
          appendTo="parent"
          hideOnClick={false}
          interactive={true}
          offset={
            [
              0,
              5,
            ]
          }
          onClickOutside={[Function]}
          onHidden={[Function]}
          onHide={[Function]}
          placement="bottom"
          plugins={
            [
              {
                "fn": [Function],
              },
              {
                "fn": [Function],
              },
              {
                "fn": [Function],
              },
              {
                "fn": [Function],
                "name": "addBackdropPlugin",
              },
            ]
          }
          popperOptions={
            {
              "modifiers": [
                {
                  "enabled": false,
                  "name": "arrow",
                  "options": {
                    "element": "#arrow1",
                    "padding": 5,
                  },
                },
                {
                  "name": "preventOverflow",
                  "options": {
                    "altAxis": true,
                    "boundariesElement": "scrollParent",
                    "padding": 8,
                  },
                },
              ],
              "strategy": "absolute",
            }
          }
          render={[Function]}
          trigger="manual"
        >
          <Tippy
            animation={false}
            appendTo="parent"
            hideOnClick={false}
            interactive={true}
            offset={
              [
                0,
                5,
              ]
            }
            onClickOutside={[Function]}
            onHidden={[Function]}
            onHide={[Function]}
            placement="bottom"
            plugins={
              [
                {
                  "fn": [Function],
                },
                {
                  "fn": [Function],
                },
                {
                  "fn": [Function],
                },
                {
                  "fn": [Function],
                  "name": "addBackdropPlugin",
                },
              ]
            }
            popperOptions={
              {
                "modifiers": [
                  {
                    "enabled": false,
                    "name": "arrow",
                    "options": {
                      "element": "#arrow1",
                      "padding": 5,
                    },
                  },
                  {
                    "name": "preventOverflow",
                    "options": {
                      "altAxis": true,
                      "boundariesElement": "scrollParent",
                      "padding": 8,
                    },
                  },
                ],
                "strategy": "absolute",
              }
            }
            render={[Function]}
            trigger="manual"
          >
            <button
              aria-activedescendant={null}
              aria-expanded={false}
              aria-haspopup="listbox"
              aria-labelledby="test-ID test-ID"
              className="md-select-dropdown-input"
              id="test-ID"
              onBlur={[Function]}
              onClick={[Function]}
              onDragStart={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              onMouseDown={[Function]}
              onMouseEnter={[Function]}
              onMouseLeave={[Function]}
              onMouseUp={[Function]}
              onTouchCancel={[Function]}
              onTouchEnd={[Function]}
              onTouchMove={[Function]}
              onTouchStart={[Function]}
              role="combobox"
              title="Example text"
              type="button"
            >
              <span
                className="md-select-selected-item-wrapper"
                id="test-ID"
              />
              <span
                aria-hidden="true"
                className="md-select-icon-wrapper"
              >
                <Icon
                  name="arrow-down"
                  scale={16}
                  weight="bold"
                >
                  <div
                    aria-hidden="true"
                    className="md-icon-wrapper md-icon-auto-scales md-icon-scales md-icon-no-shrink"
                    role="img"
                  >
                    <svg
                      aria-hidden="true"
                      className=""
                      data-autoscale={false}
                      data-scale={16}
                      data-test="arrow-down"
                      fill="currentColor"
                      height="100%"
                      style={{}}
                      viewBox="0, 0, 32, 32"
                      width="100%"
                    />
                  </div>
                </Icon>
              </span>
            </button>
            <Portal
              containerInfo={
                <div
                  data-tippy-root=""
                  id="tippy-13"
                  style="z-index: 9999;"
                >
                  
                </div>
              }
            />
          </Tippy>
        </ForwardRef(TippyWrapper)>
      </LazyTippy>
    </Popover>
  </div>
</Select>
`;
